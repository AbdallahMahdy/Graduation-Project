
Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007fb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000004c0  00800060  00007fb6  0000804a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002b9  00800520  00800520  0000850a  2**0
                  ALLOC
  3 .stab         00006864  00000000  00000000  0000850c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002289  00000000  00000000  0000ed70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00010ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00011199  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00011389  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00013795  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  00014b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00015ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  00015ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  00016197  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00016b65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 0b 2f 	jmp	0x5e16	; 0x5e16 <__vector_13>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__floatsisf+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	15 e0       	ldi	r17, 0x05	; 5
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e6 eb       	ldi	r30, 0xB6	; 182
     162:	ff e7       	ldi	r31, 0x7F	; 127
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a0 32       	cpi	r26, 0x20	; 32
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	17 e0       	ldi	r17, 0x07	; 7
     172:	a0 e2       	ldi	r26, 0x20	; 32
     174:	b5 e0       	ldi	r27, 0x05	; 5
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a9 3d       	cpi	r26, 0xD9	; 217
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 d6 27 	call	0x4fac	; 0x4fac <main>
     184:	0c 94 d9 3f 	jmp	0x7fb2	; 0x7fb2 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 e2 39 	jmp	0x73c4	; 0x73c4 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	a5 e1       	ldi	r26, 0x15	; 21
     222:	b4 e0       	ldi	r27, 0x04	; 4
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 fe 39 	jmp	0x73fc	; 0x73fc <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 ee 39 	jmp	0x73dc	; 0x73dc <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 0a 3a 	jmp	0x7414	; 0x7414 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 ee 39 	jmp	0x73dc	; 0x73dc <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 0a 3a 	jmp	0x7414	; 0x7414 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 e2 39 	jmp	0x73c4	; 0x73c4 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	85 e1       	ldi	r24, 0x15	; 21
     590:	94 e0       	ldi	r25, 0x04	; 4
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 fe 39 	jmp	0x73fc	; 0x73fc <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 ea 39 	jmp	0x73d4	; 0x73d4 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	65 e1       	ldi	r22, 0x15	; 21
     796:	74 e0       	ldi	r23, 0x04	; 4
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 06 3a 	jmp	0x740c	; 0x740c <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 ee 39 	jmp	0x73dc	; 0x73dc <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 20 07 	call	0xe40	; 0xe40 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 0a 3a 	jmp	0x7414	; 0x7414 <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 ee 39 	jmp	0x73dc	; 0x73dc <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 20 07 	call	0xe40	; 0xe40 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 0a 3a 	jmp	0x7414	; 0x7414 <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 ee 39 	jmp	0x73dc	; 0x73dc <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 20 07 	call	0xe40	; 0xe40 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 0a 3a 	jmp	0x7414	; 0x7414 <__epilogue_restores__+0x18>

000009a4 <__floatsisf>:
     9a4:	a8 e0       	ldi	r26, 0x08	; 8
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 eb 39 	jmp	0x73d6	; 0x73d6 <__prologue_saves__+0x12>
     9b0:	9b 01       	movw	r18, r22
     9b2:	ac 01       	movw	r20, r24
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	da 01       	movw	r26, r20
     9ba:	c9 01       	movw	r24, r18
     9bc:	88 27       	eor	r24, r24
     9be:	b7 fd       	sbrc	r27, 7
     9c0:	83 95       	inc	r24
     9c2:	99 27       	eor	r25, r25
     9c4:	aa 27       	eor	r26, r26
     9c6:	bb 27       	eor	r27, r27
     9c8:	b8 2e       	mov	r11, r24
     9ca:	21 15       	cp	r18, r1
     9cc:	31 05       	cpc	r19, r1
     9ce:	41 05       	cpc	r20, r1
     9d0:	51 05       	cpc	r21, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__floatsisf+0x36>
     9d4:	82 e0       	ldi	r24, 0x02	; 2
     9d6:	89 83       	std	Y+1, r24	; 0x01
     9d8:	3a c0       	rjmp	.+116    	; 0xa4e <__floatsisf+0xaa>
     9da:	88 23       	and	r24, r24
     9dc:	a9 f0       	breq	.+42     	; 0xa08 <__floatsisf+0x64>
     9de:	20 30       	cpi	r18, 0x00	; 0
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	38 07       	cpc	r19, r24
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	48 07       	cpc	r20, r24
     9e8:	80 e8       	ldi	r24, 0x80	; 128
     9ea:	58 07       	cpc	r21, r24
     9ec:	29 f4       	brne	.+10     	; 0x9f8 <__floatsisf+0x54>
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	9f ec       	ldi	r25, 0xCF	; 207
     9f6:	30 c0       	rjmp	.+96     	; 0xa58 <__floatsisf+0xb4>
     9f8:	ee 24       	eor	r14, r14
     9fa:	ff 24       	eor	r15, r15
     9fc:	87 01       	movw	r16, r14
     9fe:	e2 1a       	sub	r14, r18
     a00:	f3 0a       	sbc	r15, r19
     a02:	04 0b       	sbc	r16, r20
     a04:	15 0b       	sbc	r17, r21
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <__floatsisf+0x68>
     a08:	79 01       	movw	r14, r18
     a0a:	8a 01       	movw	r16, r20
     a0c:	8e e1       	ldi	r24, 0x1E	; 30
     a0e:	c8 2e       	mov	r12, r24
     a10:	d1 2c       	mov	r13, r1
     a12:	dc 82       	std	Y+4, r13	; 0x04
     a14:	cb 82       	std	Y+3, r12	; 0x03
     a16:	ed 82       	std	Y+5, r14	; 0x05
     a18:	fe 82       	std	Y+6, r15	; 0x06
     a1a:	0f 83       	std	Y+7, r16	; 0x07
     a1c:	18 87       	std	Y+8, r17	; 0x08
     a1e:	c8 01       	movw	r24, r16
     a20:	b7 01       	movw	r22, r14
     a22:	0e 94 84 05 	call	0xb08	; 0xb08 <__clzsi2>
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	18 16       	cp	r1, r24
     a2a:	19 06       	cpc	r1, r25
     a2c:	84 f4       	brge	.+32     	; 0xa4e <__floatsisf+0xaa>
     a2e:	08 2e       	mov	r0, r24
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__floatsisf+0x96>
     a32:	ee 0c       	add	r14, r14
     a34:	ff 1c       	adc	r15, r15
     a36:	00 1f       	adc	r16, r16
     a38:	11 1f       	adc	r17, r17
     a3a:	0a 94       	dec	r0
     a3c:	d2 f7       	brpl	.-12     	; 0xa32 <__floatsisf+0x8e>
     a3e:	ed 82       	std	Y+5, r14	; 0x05
     a40:	fe 82       	std	Y+6, r15	; 0x06
     a42:	0f 83       	std	Y+7, r16	; 0x07
     a44:	18 87       	std	Y+8, r17	; 0x08
     a46:	c8 1a       	sub	r12, r24
     a48:	d9 0a       	sbc	r13, r25
     a4a:	dc 82       	std	Y+4, r13	; 0x04
     a4c:	cb 82       	std	Y+3, r12	; 0x03
     a4e:	ba 82       	std	Y+2, r11	; 0x02
     a50:	ce 01       	movw	r24, r28
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
     a58:	28 96       	adiw	r28, 0x08	; 8
     a5a:	e9 e0       	ldi	r30, 0x09	; 9
     a5c:	0c 94 07 3a 	jmp	0x740e	; 0x740e <__epilogue_restores__+0x12>

00000a60 <__fixsfsi>:
     a60:	ac e0       	ldi	r26, 0x0C	; 12
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	e6 e3       	ldi	r30, 0x36	; 54
     a66:	f5 e0       	ldi	r31, 0x05	; 5
     a68:	0c 94 f2 39 	jmp	0x73e4	; 0x73e4 <__prologue_saves__+0x20>
     a6c:	69 83       	std	Y+1, r22	; 0x01
     a6e:	7a 83       	std	Y+2, r23	; 0x02
     a70:	8b 83       	std	Y+3, r24	; 0x03
     a72:	9c 83       	std	Y+4, r25	; 0x04
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	be 01       	movw	r22, r28
     a7a:	6b 5f       	subi	r22, 0xFB	; 251
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     a82:	8d 81       	ldd	r24, Y+5	; 0x05
     a84:	82 30       	cpi	r24, 0x02	; 2
     a86:	61 f1       	breq	.+88     	; 0xae0 <__fixsfsi+0x80>
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	50 f1       	brcs	.+84     	; 0xae0 <__fixsfsi+0x80>
     a8c:	84 30       	cpi	r24, 0x04	; 4
     a8e:	21 f4       	brne	.+8      	; 0xa98 <__fixsfsi+0x38>
     a90:	8e 81       	ldd	r24, Y+6	; 0x06
     a92:	88 23       	and	r24, r24
     a94:	51 f1       	breq	.+84     	; 0xaea <__fixsfsi+0x8a>
     a96:	2e c0       	rjmp	.+92     	; 0xaf4 <__fixsfsi+0x94>
     a98:	2f 81       	ldd	r18, Y+7	; 0x07
     a9a:	38 85       	ldd	r19, Y+8	; 0x08
     a9c:	37 fd       	sbrc	r19, 7
     a9e:	20 c0       	rjmp	.+64     	; 0xae0 <__fixsfsi+0x80>
     aa0:	6e 81       	ldd	r22, Y+6	; 0x06
     aa2:	2f 31       	cpi	r18, 0x1F	; 31
     aa4:	31 05       	cpc	r19, r1
     aa6:	1c f0       	brlt	.+6      	; 0xaae <__fixsfsi+0x4e>
     aa8:	66 23       	and	r22, r22
     aaa:	f9 f0       	breq	.+62     	; 0xaea <__fixsfsi+0x8a>
     aac:	23 c0       	rjmp	.+70     	; 0xaf4 <__fixsfsi+0x94>
     aae:	8e e1       	ldi	r24, 0x1E	; 30
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	82 1b       	sub	r24, r18
     ab4:	93 0b       	sbc	r25, r19
     ab6:	29 85       	ldd	r18, Y+9	; 0x09
     ab8:	3a 85       	ldd	r19, Y+10	; 0x0a
     aba:	4b 85       	ldd	r20, Y+11	; 0x0b
     abc:	5c 85       	ldd	r21, Y+12	; 0x0c
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__fixsfsi+0x68>
     ac0:	56 95       	lsr	r21
     ac2:	47 95       	ror	r20
     ac4:	37 95       	ror	r19
     ac6:	27 95       	ror	r18
     ac8:	8a 95       	dec	r24
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__fixsfsi+0x60>
     acc:	66 23       	and	r22, r22
     ace:	b1 f0       	breq	.+44     	; 0xafc <__fixsfsi+0x9c>
     ad0:	50 95       	com	r21
     ad2:	40 95       	com	r20
     ad4:	30 95       	com	r19
     ad6:	21 95       	neg	r18
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
     ada:	4f 4f       	sbci	r20, 0xFF	; 255
     adc:	5f 4f       	sbci	r21, 0xFF	; 255
     ade:	0e c0       	rjmp	.+28     	; 0xafc <__fixsfsi+0x9c>
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	09 c0       	rjmp	.+18     	; 0xafc <__fixsfsi+0x9c>
     aea:	2f ef       	ldi	r18, 0xFF	; 255
     aec:	3f ef       	ldi	r19, 0xFF	; 255
     aee:	4f ef       	ldi	r20, 0xFF	; 255
     af0:	5f e7       	ldi	r21, 0x7F	; 127
     af2:	04 c0       	rjmp	.+8      	; 0xafc <__fixsfsi+0x9c>
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	50 e8       	ldi	r21, 0x80	; 128
     afc:	b9 01       	movw	r22, r18
     afe:	ca 01       	movw	r24, r20
     b00:	2c 96       	adiw	r28, 0x0c	; 12
     b02:	e2 e0       	ldi	r30, 0x02	; 2
     b04:	0c 94 0e 3a 	jmp	0x741c	; 0x741c <__epilogue_restores__+0x20>

00000b08 <__clzsi2>:
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	7b 01       	movw	r14, r22
     b12:	8c 01       	movw	r16, r24
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	e8 16       	cp	r14, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	f8 06       	cpc	r15, r24
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	08 07       	cpc	r16, r24
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	18 07       	cpc	r17, r24
     b24:	88 f4       	brcc	.+34     	; 0xb48 <__clzsi2+0x40>
     b26:	8f ef       	ldi	r24, 0xFF	; 255
     b28:	e8 16       	cp	r14, r24
     b2a:	f1 04       	cpc	r15, r1
     b2c:	01 05       	cpc	r16, r1
     b2e:	11 05       	cpc	r17, r1
     b30:	31 f0       	breq	.+12     	; 0xb3e <__clzsi2+0x36>
     b32:	28 f0       	brcs	.+10     	; 0xb3e <__clzsi2+0x36>
     b34:	88 e0       	ldi	r24, 0x08	; 8
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	a0 e0       	ldi	r26, 0x00	; 0
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	17 c0       	rjmp	.+46     	; 0xb6c <__clzsi2+0x64>
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	12 c0       	rjmp	.+36     	; 0xb6c <__clzsi2+0x64>
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	e8 16       	cp	r14, r24
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	f8 06       	cpc	r15, r24
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	08 07       	cpc	r16, r24
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	18 07       	cpc	r17, r24
     b58:	28 f0       	brcs	.+10     	; 0xb64 <__clzsi2+0x5c>
     b5a:	88 e1       	ldi	r24, 0x18	; 24
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 e0       	ldi	r26, 0x00	; 0
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	04 c0       	rjmp	.+8      	; 0xb6c <__clzsi2+0x64>
     b64:	80 e1       	ldi	r24, 0x10	; 16
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	a0 e0       	ldi	r26, 0x00	; 0
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	20 e2       	ldi	r18, 0x20	; 32
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	50 e0       	ldi	r21, 0x00	; 0
     b74:	28 1b       	sub	r18, r24
     b76:	39 0b       	sbc	r19, r25
     b78:	4a 0b       	sbc	r20, r26
     b7a:	5b 0b       	sbc	r21, r27
     b7c:	04 c0       	rjmp	.+8      	; 0xb86 <__clzsi2+0x7e>
     b7e:	16 95       	lsr	r17
     b80:	07 95       	ror	r16
     b82:	f7 94       	ror	r15
     b84:	e7 94       	ror	r14
     b86:	8a 95       	dec	r24
     b88:	d2 f7       	brpl	.-12     	; 0xb7e <__clzsi2+0x76>
     b8a:	f7 01       	movw	r30, r14
     b8c:	e3 5e       	subi	r30, 0xE3	; 227
     b8e:	fb 4f       	sbci	r31, 0xFB	; 251
     b90:	80 81       	ld	r24, Z
     b92:	28 1b       	sub	r18, r24
     b94:	31 09       	sbc	r19, r1
     b96:	41 09       	sbc	r20, r1
     b98:	51 09       	sbc	r21, r1
     b9a:	c9 01       	movw	r24, r18
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	08 95       	ret

00000ba6 <__pack_f>:
     ba6:	df 92       	push	r13
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	fc 01       	movw	r30, r24
     bb2:	e4 80       	ldd	r14, Z+4	; 0x04
     bb4:	f5 80       	ldd	r15, Z+5	; 0x05
     bb6:	06 81       	ldd	r16, Z+6	; 0x06
     bb8:	17 81       	ldd	r17, Z+7	; 0x07
     bba:	d1 80       	ldd	r13, Z+1	; 0x01
     bbc:	80 81       	ld	r24, Z
     bbe:	82 30       	cpi	r24, 0x02	; 2
     bc0:	48 f4       	brcc	.+18     	; 0xbd4 <__pack_f+0x2e>
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	a0 e1       	ldi	r26, 0x10	; 16
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e8 2a       	or	r14, r24
     bcc:	f9 2a       	or	r15, r25
     bce:	0a 2b       	or	r16, r26
     bd0:	1b 2b       	or	r17, r27
     bd2:	a5 c0       	rjmp	.+330    	; 0xd1e <__pack_f+0x178>
     bd4:	84 30       	cpi	r24, 0x04	; 4
     bd6:	09 f4       	brne	.+2      	; 0xbda <__pack_f+0x34>
     bd8:	9f c0       	rjmp	.+318    	; 0xd18 <__pack_f+0x172>
     bda:	82 30       	cpi	r24, 0x02	; 2
     bdc:	21 f4       	brne	.+8      	; 0xbe6 <__pack_f+0x40>
     bde:	ee 24       	eor	r14, r14
     be0:	ff 24       	eor	r15, r15
     be2:	87 01       	movw	r16, r14
     be4:	05 c0       	rjmp	.+10     	; 0xbf0 <__pack_f+0x4a>
     be6:	e1 14       	cp	r14, r1
     be8:	f1 04       	cpc	r15, r1
     bea:	01 05       	cpc	r16, r1
     bec:	11 05       	cpc	r17, r1
     bee:	19 f4       	brne	.+6      	; 0xbf6 <__pack_f+0x50>
     bf0:	e0 e0       	ldi	r30, 0x00	; 0
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	96 c0       	rjmp	.+300    	; 0xd22 <__pack_f+0x17c>
     bf6:	62 81       	ldd	r22, Z+2	; 0x02
     bf8:	73 81       	ldd	r23, Z+3	; 0x03
     bfa:	9f ef       	ldi	r25, 0xFF	; 255
     bfc:	62 38       	cpi	r22, 0x82	; 130
     bfe:	79 07       	cpc	r23, r25
     c00:	0c f0       	brlt	.+2      	; 0xc04 <__pack_f+0x5e>
     c02:	5b c0       	rjmp	.+182    	; 0xcba <__pack_f+0x114>
     c04:	22 e8       	ldi	r18, 0x82	; 130
     c06:	3f ef       	ldi	r19, 0xFF	; 255
     c08:	26 1b       	sub	r18, r22
     c0a:	37 0b       	sbc	r19, r23
     c0c:	2a 31       	cpi	r18, 0x1A	; 26
     c0e:	31 05       	cpc	r19, r1
     c10:	2c f0       	brlt	.+10     	; 0xc1c <__pack_f+0x76>
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	2a c0       	rjmp	.+84     	; 0xc70 <__pack_f+0xca>
     c1c:	b8 01       	movw	r22, r16
     c1e:	a7 01       	movw	r20, r14
     c20:	02 2e       	mov	r0, r18
     c22:	04 c0       	rjmp	.+8      	; 0xc2c <__pack_f+0x86>
     c24:	76 95       	lsr	r23
     c26:	67 95       	ror	r22
     c28:	57 95       	ror	r21
     c2a:	47 95       	ror	r20
     c2c:	0a 94       	dec	r0
     c2e:	d2 f7       	brpl	.-12     	; 0xc24 <__pack_f+0x7e>
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	a0 e0       	ldi	r26, 0x00	; 0
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	04 c0       	rjmp	.+8      	; 0xc42 <__pack_f+0x9c>
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	aa 1f       	adc	r26, r26
     c40:	bb 1f       	adc	r27, r27
     c42:	2a 95       	dec	r18
     c44:	d2 f7       	brpl	.-12     	; 0xc3a <__pack_f+0x94>
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	a1 09       	sbc	r26, r1
     c4a:	b1 09       	sbc	r27, r1
     c4c:	8e 21       	and	r24, r14
     c4e:	9f 21       	and	r25, r15
     c50:	a0 23       	and	r26, r16
     c52:	b1 23       	and	r27, r17
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	a1 05       	cpc	r26, r1
     c58:	b1 05       	cpc	r27, r1
     c5a:	21 f0       	breq	.+8      	; 0xc64 <__pack_f+0xbe>
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	a0 e0       	ldi	r26, 0x00	; 0
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	9a 01       	movw	r18, r20
     c66:	ab 01       	movw	r20, r22
     c68:	28 2b       	or	r18, r24
     c6a:	39 2b       	or	r19, r25
     c6c:	4a 2b       	or	r20, r26
     c6e:	5b 2b       	or	r21, r27
     c70:	da 01       	movw	r26, r20
     c72:	c9 01       	movw	r24, r18
     c74:	8f 77       	andi	r24, 0x7F	; 127
     c76:	90 70       	andi	r25, 0x00	; 0
     c78:	a0 70       	andi	r26, 0x00	; 0
     c7a:	b0 70       	andi	r27, 0x00	; 0
     c7c:	80 34       	cpi	r24, 0x40	; 64
     c7e:	91 05       	cpc	r25, r1
     c80:	a1 05       	cpc	r26, r1
     c82:	b1 05       	cpc	r27, r1
     c84:	39 f4       	brne	.+14     	; 0xc94 <__pack_f+0xee>
     c86:	27 ff       	sbrs	r18, 7
     c88:	09 c0       	rjmp	.+18     	; 0xc9c <__pack_f+0xf6>
     c8a:	20 5c       	subi	r18, 0xC0	; 192
     c8c:	3f 4f       	sbci	r19, 0xFF	; 255
     c8e:	4f 4f       	sbci	r20, 0xFF	; 255
     c90:	5f 4f       	sbci	r21, 0xFF	; 255
     c92:	04 c0       	rjmp	.+8      	; 0xc9c <__pack_f+0xf6>
     c94:	21 5c       	subi	r18, 0xC1	; 193
     c96:	3f 4f       	sbci	r19, 0xFF	; 255
     c98:	4f 4f       	sbci	r20, 0xFF	; 255
     c9a:	5f 4f       	sbci	r21, 0xFF	; 255
     c9c:	e0 e0       	ldi	r30, 0x00	; 0
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	20 30       	cpi	r18, 0x00	; 0
     ca2:	a0 e0       	ldi	r26, 0x00	; 0
     ca4:	3a 07       	cpc	r19, r26
     ca6:	a0 e0       	ldi	r26, 0x00	; 0
     ca8:	4a 07       	cpc	r20, r26
     caa:	a0 e4       	ldi	r26, 0x40	; 64
     cac:	5a 07       	cpc	r21, r26
     cae:	10 f0       	brcs	.+4      	; 0xcb4 <__pack_f+0x10e>
     cb0:	e1 e0       	ldi	r30, 0x01	; 1
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	79 01       	movw	r14, r18
     cb6:	8a 01       	movw	r16, r20
     cb8:	27 c0       	rjmp	.+78     	; 0xd08 <__pack_f+0x162>
     cba:	60 38       	cpi	r22, 0x80	; 128
     cbc:	71 05       	cpc	r23, r1
     cbe:	64 f5       	brge	.+88     	; 0xd18 <__pack_f+0x172>
     cc0:	fb 01       	movw	r30, r22
     cc2:	e1 58       	subi	r30, 0x81	; 129
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	d8 01       	movw	r26, r16
     cc8:	c7 01       	movw	r24, r14
     cca:	8f 77       	andi	r24, 0x7F	; 127
     ccc:	90 70       	andi	r25, 0x00	; 0
     cce:	a0 70       	andi	r26, 0x00	; 0
     cd0:	b0 70       	andi	r27, 0x00	; 0
     cd2:	80 34       	cpi	r24, 0x40	; 64
     cd4:	91 05       	cpc	r25, r1
     cd6:	a1 05       	cpc	r26, r1
     cd8:	b1 05       	cpc	r27, r1
     cda:	39 f4       	brne	.+14     	; 0xcea <__pack_f+0x144>
     cdc:	e7 fe       	sbrs	r14, 7
     cde:	0d c0       	rjmp	.+26     	; 0xcfa <__pack_f+0x154>
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	a0 e0       	ldi	r26, 0x00	; 0
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	04 c0       	rjmp	.+8      	; 0xcf2 <__pack_f+0x14c>
     cea:	8f e3       	ldi	r24, 0x3F	; 63
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	a0 e0       	ldi	r26, 0x00	; 0
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e8 0e       	add	r14, r24
     cf4:	f9 1e       	adc	r15, r25
     cf6:	0a 1f       	adc	r16, r26
     cf8:	1b 1f       	adc	r17, r27
     cfa:	17 ff       	sbrs	r17, 7
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <__pack_f+0x162>
     cfe:	16 95       	lsr	r17
     d00:	07 95       	ror	r16
     d02:	f7 94       	ror	r15
     d04:	e7 94       	ror	r14
     d06:	31 96       	adiw	r30, 0x01	; 1
     d08:	87 e0       	ldi	r24, 0x07	; 7
     d0a:	16 95       	lsr	r17
     d0c:	07 95       	ror	r16
     d0e:	f7 94       	ror	r15
     d10:	e7 94       	ror	r14
     d12:	8a 95       	dec	r24
     d14:	d1 f7       	brne	.-12     	; 0xd0a <__pack_f+0x164>
     d16:	05 c0       	rjmp	.+10     	; 0xd22 <__pack_f+0x17c>
     d18:	ee 24       	eor	r14, r14
     d1a:	ff 24       	eor	r15, r15
     d1c:	87 01       	movw	r16, r14
     d1e:	ef ef       	ldi	r30, 0xFF	; 255
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	6e 2f       	mov	r22, r30
     d24:	67 95       	ror	r22
     d26:	66 27       	eor	r22, r22
     d28:	67 95       	ror	r22
     d2a:	90 2f       	mov	r25, r16
     d2c:	9f 77       	andi	r25, 0x7F	; 127
     d2e:	d7 94       	ror	r13
     d30:	dd 24       	eor	r13, r13
     d32:	d7 94       	ror	r13
     d34:	8e 2f       	mov	r24, r30
     d36:	86 95       	lsr	r24
     d38:	49 2f       	mov	r20, r25
     d3a:	46 2b       	or	r20, r22
     d3c:	58 2f       	mov	r21, r24
     d3e:	5d 29       	or	r21, r13
     d40:	b7 01       	movw	r22, r14
     d42:	ca 01       	movw	r24, r20
     d44:	1f 91       	pop	r17
     d46:	0f 91       	pop	r16
     d48:	ff 90       	pop	r15
     d4a:	ef 90       	pop	r14
     d4c:	df 90       	pop	r13
     d4e:	08 95       	ret

00000d50 <__unpack_f>:
     d50:	fc 01       	movw	r30, r24
     d52:	db 01       	movw	r26, r22
     d54:	40 81       	ld	r20, Z
     d56:	51 81       	ldd	r21, Z+1	; 0x01
     d58:	22 81       	ldd	r18, Z+2	; 0x02
     d5a:	62 2f       	mov	r22, r18
     d5c:	6f 77       	andi	r22, 0x7F	; 127
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	22 1f       	adc	r18, r18
     d62:	22 27       	eor	r18, r18
     d64:	22 1f       	adc	r18, r18
     d66:	93 81       	ldd	r25, Z+3	; 0x03
     d68:	89 2f       	mov	r24, r25
     d6a:	88 0f       	add	r24, r24
     d6c:	82 2b       	or	r24, r18
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	99 1f       	adc	r25, r25
     d74:	99 27       	eor	r25, r25
     d76:	99 1f       	adc	r25, r25
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	9c 93       	st	X, r25
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	21 15       	cp	r18, r1
     d80:	31 05       	cpc	r19, r1
     d82:	a9 f5       	brne	.+106    	; 0xdee <__unpack_f+0x9e>
     d84:	41 15       	cp	r20, r1
     d86:	51 05       	cpc	r21, r1
     d88:	61 05       	cpc	r22, r1
     d8a:	71 05       	cpc	r23, r1
     d8c:	11 f4       	brne	.+4      	; 0xd92 <__unpack_f+0x42>
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	37 c0       	rjmp	.+110    	; 0xe00 <__unpack_f+0xb0>
     d92:	82 e8       	ldi	r24, 0x82	; 130
     d94:	9f ef       	ldi	r25, 0xFF	; 255
     d96:	13 96       	adiw	r26, 0x03	; 3
     d98:	9c 93       	st	X, r25
     d9a:	8e 93       	st	-X, r24
     d9c:	12 97       	sbiw	r26, 0x02	; 2
     d9e:	9a 01       	movw	r18, r20
     da0:	ab 01       	movw	r20, r22
     da2:	67 e0       	ldi	r22, 0x07	; 7
     da4:	22 0f       	add	r18, r18
     da6:	33 1f       	adc	r19, r19
     da8:	44 1f       	adc	r20, r20
     daa:	55 1f       	adc	r21, r21
     dac:	6a 95       	dec	r22
     dae:	d1 f7       	brne	.-12     	; 0xda4 <__unpack_f+0x54>
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	8c 93       	st	X, r24
     db4:	0d c0       	rjmp	.+26     	; 0xdd0 <__unpack_f+0x80>
     db6:	22 0f       	add	r18, r18
     db8:	33 1f       	adc	r19, r19
     dba:	44 1f       	adc	r20, r20
     dbc:	55 1f       	adc	r21, r21
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	8d 91       	ld	r24, X+
     dc2:	9c 91       	ld	r25, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	13 96       	adiw	r26, 0x03	; 3
     dca:	9c 93       	st	X, r25
     dcc:	8e 93       	st	-X, r24
     dce:	12 97       	sbiw	r26, 0x02	; 2
     dd0:	20 30       	cpi	r18, 0x00	; 0
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	38 07       	cpc	r19, r24
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	48 07       	cpc	r20, r24
     dda:	80 e4       	ldi	r24, 0x40	; 64
     ddc:	58 07       	cpc	r21, r24
     dde:	58 f3       	brcs	.-42     	; 0xdb6 <__unpack_f+0x66>
     de0:	14 96       	adiw	r26, 0x04	; 4
     de2:	2d 93       	st	X+, r18
     de4:	3d 93       	st	X+, r19
     de6:	4d 93       	st	X+, r20
     de8:	5c 93       	st	X, r21
     dea:	17 97       	sbiw	r26, 0x07	; 7
     dec:	08 95       	ret
     dee:	2f 3f       	cpi	r18, 0xFF	; 255
     df0:	31 05       	cpc	r19, r1
     df2:	79 f4       	brne	.+30     	; 0xe12 <__unpack_f+0xc2>
     df4:	41 15       	cp	r20, r1
     df6:	51 05       	cpc	r21, r1
     df8:	61 05       	cpc	r22, r1
     dfa:	71 05       	cpc	r23, r1
     dfc:	19 f4       	brne	.+6      	; 0xe04 <__unpack_f+0xb4>
     dfe:	84 e0       	ldi	r24, 0x04	; 4
     e00:	8c 93       	st	X, r24
     e02:	08 95       	ret
     e04:	64 ff       	sbrs	r22, 4
     e06:	03 c0       	rjmp	.+6      	; 0xe0e <__unpack_f+0xbe>
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	8c 93       	st	X, r24
     e0c:	12 c0       	rjmp	.+36     	; 0xe32 <__unpack_f+0xe2>
     e0e:	1c 92       	st	X, r1
     e10:	10 c0       	rjmp	.+32     	; 0xe32 <__unpack_f+0xe2>
     e12:	2f 57       	subi	r18, 0x7F	; 127
     e14:	30 40       	sbci	r19, 0x00	; 0
     e16:	13 96       	adiw	r26, 0x03	; 3
     e18:	3c 93       	st	X, r19
     e1a:	2e 93       	st	-X, r18
     e1c:	12 97       	sbiw	r26, 0x02	; 2
     e1e:	83 e0       	ldi	r24, 0x03	; 3
     e20:	8c 93       	st	X, r24
     e22:	87 e0       	ldi	r24, 0x07	; 7
     e24:	44 0f       	add	r20, r20
     e26:	55 1f       	adc	r21, r21
     e28:	66 1f       	adc	r22, r22
     e2a:	77 1f       	adc	r23, r23
     e2c:	8a 95       	dec	r24
     e2e:	d1 f7       	brne	.-12     	; 0xe24 <__unpack_f+0xd4>
     e30:	70 64       	ori	r23, 0x40	; 64
     e32:	14 96       	adiw	r26, 0x04	; 4
     e34:	4d 93       	st	X+, r20
     e36:	5d 93       	st	X+, r21
     e38:	6d 93       	st	X+, r22
     e3a:	7c 93       	st	X, r23
     e3c:	17 97       	sbiw	r26, 0x07	; 7
     e3e:	08 95       	ret

00000e40 <__fpcmp_parts_f>:
     e40:	1f 93       	push	r17
     e42:	dc 01       	movw	r26, r24
     e44:	fb 01       	movw	r30, r22
     e46:	9c 91       	ld	r25, X
     e48:	92 30       	cpi	r25, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0xe>
     e4c:	47 c0       	rjmp	.+142    	; 0xedc <__fpcmp_parts_f+0x9c>
     e4e:	80 81       	ld	r24, Z
     e50:	82 30       	cpi	r24, 0x02	; 2
     e52:	08 f4       	brcc	.+2      	; 0xe56 <__fpcmp_parts_f+0x16>
     e54:	43 c0       	rjmp	.+134    	; 0xedc <__fpcmp_parts_f+0x9c>
     e56:	94 30       	cpi	r25, 0x04	; 4
     e58:	51 f4       	brne	.+20     	; 0xe6e <__fpcmp_parts_f+0x2e>
     e5a:	11 96       	adiw	r26, 0x01	; 1
     e5c:	1c 91       	ld	r17, X
     e5e:	84 30       	cpi	r24, 0x04	; 4
     e60:	99 f5       	brne	.+102    	; 0xec8 <__fpcmp_parts_f+0x88>
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	68 2f       	mov	r22, r24
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	61 1b       	sub	r22, r17
     e6a:	71 09       	sbc	r23, r1
     e6c:	3f c0       	rjmp	.+126    	; 0xeec <__fpcmp_parts_f+0xac>
     e6e:	84 30       	cpi	r24, 0x04	; 4
     e70:	21 f0       	breq	.+8      	; 0xe7a <__fpcmp_parts_f+0x3a>
     e72:	92 30       	cpi	r25, 0x02	; 2
     e74:	31 f4       	brne	.+12     	; 0xe82 <__fpcmp_parts_f+0x42>
     e76:	82 30       	cpi	r24, 0x02	; 2
     e78:	b9 f1       	breq	.+110    	; 0xee8 <__fpcmp_parts_f+0xa8>
     e7a:	81 81       	ldd	r24, Z+1	; 0x01
     e7c:	88 23       	and	r24, r24
     e7e:	89 f1       	breq	.+98     	; 0xee2 <__fpcmp_parts_f+0xa2>
     e80:	2d c0       	rjmp	.+90     	; 0xedc <__fpcmp_parts_f+0x9c>
     e82:	11 96       	adiw	r26, 0x01	; 1
     e84:	1c 91       	ld	r17, X
     e86:	11 97       	sbiw	r26, 0x01	; 1
     e88:	82 30       	cpi	r24, 0x02	; 2
     e8a:	f1 f0       	breq	.+60     	; 0xec8 <__fpcmp_parts_f+0x88>
     e8c:	81 81       	ldd	r24, Z+1	; 0x01
     e8e:	18 17       	cp	r17, r24
     e90:	d9 f4       	brne	.+54     	; 0xec8 <__fpcmp_parts_f+0x88>
     e92:	12 96       	adiw	r26, 0x02	; 2
     e94:	2d 91       	ld	r18, X+
     e96:	3c 91       	ld	r19, X
     e98:	13 97       	sbiw	r26, 0x03	; 3
     e9a:	82 81       	ldd	r24, Z+2	; 0x02
     e9c:	93 81       	ldd	r25, Z+3	; 0x03
     e9e:	82 17       	cp	r24, r18
     ea0:	93 07       	cpc	r25, r19
     ea2:	94 f0       	brlt	.+36     	; 0xec8 <__fpcmp_parts_f+0x88>
     ea4:	28 17       	cp	r18, r24
     ea6:	39 07       	cpc	r19, r25
     ea8:	bc f0       	brlt	.+46     	; 0xed8 <__fpcmp_parts_f+0x98>
     eaa:	14 96       	adiw	r26, 0x04	; 4
     eac:	8d 91       	ld	r24, X+
     eae:	9d 91       	ld	r25, X+
     eb0:	0d 90       	ld	r0, X+
     eb2:	bc 91       	ld	r27, X
     eb4:	a0 2d       	mov	r26, r0
     eb6:	24 81       	ldd	r18, Z+4	; 0x04
     eb8:	35 81       	ldd	r19, Z+5	; 0x05
     eba:	46 81       	ldd	r20, Z+6	; 0x06
     ebc:	57 81       	ldd	r21, Z+7	; 0x07
     ebe:	28 17       	cp	r18, r24
     ec0:	39 07       	cpc	r19, r25
     ec2:	4a 07       	cpc	r20, r26
     ec4:	5b 07       	cpc	r21, r27
     ec6:	18 f4       	brcc	.+6      	; 0xece <__fpcmp_parts_f+0x8e>
     ec8:	11 23       	and	r17, r17
     eca:	41 f0       	breq	.+16     	; 0xedc <__fpcmp_parts_f+0x9c>
     ecc:	0a c0       	rjmp	.+20     	; 0xee2 <__fpcmp_parts_f+0xa2>
     ece:	82 17       	cp	r24, r18
     ed0:	93 07       	cpc	r25, r19
     ed2:	a4 07       	cpc	r26, r20
     ed4:	b5 07       	cpc	r27, r21
     ed6:	40 f4       	brcc	.+16     	; 0xee8 <__fpcmp_parts_f+0xa8>
     ed8:	11 23       	and	r17, r17
     eda:	19 f0       	breq	.+6      	; 0xee2 <__fpcmp_parts_f+0xa2>
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <__fpcmp_parts_f+0xac>
     ee2:	6f ef       	ldi	r22, 0xFF	; 255
     ee4:	7f ef       	ldi	r23, 0xFF	; 255
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <__fpcmp_parts_f+0xac>
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	cb 01       	movw	r24, r22
     eee:	1f 91       	pop	r17
     ef0:	08 95       	ret

00000ef2 <DIOSetPortDirection>:
#include <avr/io.h>
#include "std_types.h"
#include "DIO.h"
void DIOSetPortDirection (u8 portnumber,u8 value)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <DIOSetPortDirection+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <DIOSetPortDirection+0x8>
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	89 83       	std	Y+1, r24	; 0x01
     f00:	6a 83       	std	Y+2, r22	; 0x02
	switch(portnumber){
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	3c 83       	std	Y+4, r19	; 0x04
     f0a:	2b 83       	std	Y+3, r18	; 0x03
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	9c 81       	ldd	r25, Y+4	; 0x04
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	91 05       	cpc	r25, r1
     f14:	d1 f0       	breq	.+52     	; 0xf4a <DIOSetPortDirection+0x58>
     f16:	2b 81       	ldd	r18, Y+3	; 0x03
     f18:	3c 81       	ldd	r19, Y+4	; 0x04
     f1a:	22 30       	cpi	r18, 0x02	; 2
     f1c:	31 05       	cpc	r19, r1
     f1e:	2c f4       	brge	.+10     	; 0xf2a <DIOSetPortDirection+0x38>
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	9c 81       	ldd	r25, Y+4	; 0x04
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	61 f0       	breq	.+24     	; 0xf40 <DIOSetPortDirection+0x4e>
     f28:	1e c0       	rjmp	.+60     	; 0xf66 <DIOSetPortDirection+0x74>
     f2a:	2b 81       	ldd	r18, Y+3	; 0x03
     f2c:	3c 81       	ldd	r19, Y+4	; 0x04
     f2e:	22 30       	cpi	r18, 0x02	; 2
     f30:	31 05       	cpc	r19, r1
     f32:	81 f0       	breq	.+32     	; 0xf54 <DIOSetPortDirection+0x62>
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	9c 81       	ldd	r25, Y+4	; 0x04
     f38:	83 30       	cpi	r24, 0x03	; 3
     f3a:	91 05       	cpc	r25, r1
     f3c:	81 f0       	breq	.+32     	; 0xf5e <DIOSetPortDirection+0x6c>
     f3e:	13 c0       	rjmp	.+38     	; 0xf66 <DIOSetPortDirection+0x74>
	case 0 : DDRA = value;
     f40:	ea e3       	ldi	r30, 0x3A	; 58
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	80 83       	st	Z, r24
     f48:	0e c0       	rjmp	.+28     	; 0xf66 <DIOSetPortDirection+0x74>
	break;
	case 1 : DDRB = value;
     f4a:	e7 e3       	ldi	r30, 0x37	; 55
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	80 83       	st	Z, r24
     f52:	09 c0       	rjmp	.+18     	; 0xf66 <DIOSetPortDirection+0x74>
	break;
	case 2 : DDRC = value;
     f54:	e4 e3       	ldi	r30, 0x34	; 52
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	80 83       	st	Z, r24
     f5c:	04 c0       	rjmp	.+8      	; 0xf66 <DIOSetPortDirection+0x74>
	break;
	case 3 : DDRD = value;
     f5e:	e1 e3       	ldi	r30, 0x31	; 49
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	80 83       	st	Z, r24
	break;
	default : break;
	}
}
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <DIOSetPortValue>:

void DIOSetPortValue (u8 portnumber,u8 value)
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	00 d0       	rcall	.+0      	; 0xf7a <DIOSetPortValue+0x6>
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <DIOSetPortValue+0x8>
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	6a 83       	std	Y+2, r22	; 0x02
	switch(portnumber){
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	3c 83       	std	Y+4, r19	; 0x04
     f8c:	2b 83       	std	Y+3, r18	; 0x03
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	9c 81       	ldd	r25, Y+4	; 0x04
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	91 05       	cpc	r25, r1
     f96:	d1 f0       	breq	.+52     	; 0xfcc <DIOSetPortValue+0x58>
     f98:	2b 81       	ldd	r18, Y+3	; 0x03
     f9a:	3c 81       	ldd	r19, Y+4	; 0x04
     f9c:	22 30       	cpi	r18, 0x02	; 2
     f9e:	31 05       	cpc	r19, r1
     fa0:	2c f4       	brge	.+10     	; 0xfac <DIOSetPortValue+0x38>
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	9c 81       	ldd	r25, Y+4	; 0x04
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	61 f0       	breq	.+24     	; 0xfc2 <DIOSetPortValue+0x4e>
     faa:	1e c0       	rjmp	.+60     	; 0xfe8 <DIOSetPortValue+0x74>
     fac:	2b 81       	ldd	r18, Y+3	; 0x03
     fae:	3c 81       	ldd	r19, Y+4	; 0x04
     fb0:	22 30       	cpi	r18, 0x02	; 2
     fb2:	31 05       	cpc	r19, r1
     fb4:	81 f0       	breq	.+32     	; 0xfd6 <DIOSetPortValue+0x62>
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	9c 81       	ldd	r25, Y+4	; 0x04
     fba:	83 30       	cpi	r24, 0x03	; 3
     fbc:	91 05       	cpc	r25, r1
     fbe:	81 f0       	breq	.+32     	; 0xfe0 <DIOSetPortValue+0x6c>
     fc0:	13 c0       	rjmp	.+38     	; 0xfe8 <DIOSetPortValue+0x74>
	case 0 : PORTA = value;
     fc2:	eb e3       	ldi	r30, 0x3B	; 59
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	80 83       	st	Z, r24
     fca:	0e c0       	rjmp	.+28     	; 0xfe8 <DIOSetPortValue+0x74>
	break;
	case 1 : PORTB = value;
     fcc:	e8 e3       	ldi	r30, 0x38	; 56
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	80 83       	st	Z, r24
     fd4:	09 c0       	rjmp	.+18     	; 0xfe8 <DIOSetPortValue+0x74>
	break;
	case 2 : PORTC = value;
     fd6:	e5 e3       	ldi	r30, 0x35	; 53
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	80 83       	st	Z, r24
     fde:	04 c0       	rjmp	.+8      	; 0xfe8 <DIOSetPortValue+0x74>
	break;
	case 3 : PORTD = value;
     fe0:	e2 e3       	ldi	r30, 0x32	; 50
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	80 83       	st	Z, r24
	break;
	default : break;
	}
}
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	08 95       	ret

00000ff6 <DIOSetPinDirection>:

void DIOSetPinDirection (u8 portnumber,u8 Pinnumber,u8 value){
     ff6:	df 93       	push	r29
     ff8:	cf 93       	push	r28
     ffa:	00 d0       	rcall	.+0      	; 0xffc <DIOSetPinDirection+0x6>
     ffc:	00 d0       	rcall	.+0      	; 0xffe <DIOSetPinDirection+0x8>
     ffe:	0f 92       	push	r0
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	89 83       	std	Y+1, r24	; 0x01
    1006:	6a 83       	std	Y+2, r22	; 0x02
    1008:	4b 83       	std	Y+3, r20	; 0x03
	switch(portnumber){
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	3d 83       	std	Y+5, r19	; 0x05
    1012:	2c 83       	std	Y+4, r18	; 0x04
    1014:	8c 81       	ldd	r24, Y+4	; 0x04
    1016:	9d 81       	ldd	r25, Y+5	; 0x05
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	91 05       	cpc	r25, r1
    101c:	09 f4       	brne	.+2      	; 0x1020 <DIOSetPinDirection+0x2a>
    101e:	47 c0       	rjmp	.+142    	; 0x10ae <DIOSetPinDirection+0xb8>
    1020:	2c 81       	ldd	r18, Y+4	; 0x04
    1022:	3d 81       	ldd	r19, Y+5	; 0x05
    1024:	22 30       	cpi	r18, 0x02	; 2
    1026:	31 05       	cpc	r19, r1
    1028:	2c f4       	brge	.+10     	; 0x1034 <DIOSetPinDirection+0x3e>
    102a:	8c 81       	ldd	r24, Y+4	; 0x04
    102c:	9d 81       	ldd	r25, Y+5	; 0x05
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	71 f0       	breq	.+28     	; 0x104e <DIOSetPinDirection+0x58>
    1032:	cb c0       	rjmp	.+406    	; 0x11ca <DIOSetPinDirection+0x1d4>
    1034:	2c 81       	ldd	r18, Y+4	; 0x04
    1036:	3d 81       	ldd	r19, Y+5	; 0x05
    1038:	22 30       	cpi	r18, 0x02	; 2
    103a:	31 05       	cpc	r19, r1
    103c:	09 f4       	brne	.+2      	; 0x1040 <DIOSetPinDirection+0x4a>
    103e:	67 c0       	rjmp	.+206    	; 0x110e <DIOSetPinDirection+0x118>
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	9d 81       	ldd	r25, Y+5	; 0x05
    1044:	83 30       	cpi	r24, 0x03	; 3
    1046:	91 05       	cpc	r25, r1
    1048:	09 f4       	brne	.+2      	; 0x104c <DIOSetPinDirection+0x56>
    104a:	91 c0       	rjmp	.+290    	; 0x116e <DIOSetPinDirection+0x178>
    104c:	be c0       	rjmp	.+380    	; 0x11ca <DIOSetPinDirection+0x1d4>

	case 0 : if(value==1) {DDRA |= (1<<Pinnumber);}
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	a1 f4       	brne	.+40     	; 0x107c <DIOSetPinDirection+0x86>
    1054:	aa e3       	ldi	r26, 0x3A	; 58
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	ea e3       	ldi	r30, 0x3A	; 58
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	48 2f       	mov	r20, r24
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 2e       	mov	r0, r18
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <DIOSetPinDirection+0x7c>
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	0a 94       	dec	r0
    1074:	e2 f7       	brpl	.-8      	; 0x106e <DIOSetPinDirection+0x78>
    1076:	84 2b       	or	r24, r20
    1078:	8c 93       	st	X, r24
    107a:	a7 c0       	rjmp	.+334    	; 0x11ca <DIOSetPinDirection+0x1d4>
	  else   if (value==0) {DDRA &= ~(1<<Pinnumber);}
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	88 23       	and	r24, r24
    1080:	09 f0       	breq	.+2      	; 0x1084 <DIOSetPinDirection+0x8e>
    1082:	a3 c0       	rjmp	.+326    	; 0x11ca <DIOSetPinDirection+0x1d4>
    1084:	aa e3       	ldi	r26, 0x3A	; 58
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	ea e3       	ldi	r30, 0x3A	; 58
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 2e       	mov	r0, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <DIOSetPinDirection+0xac>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <DIOSetPinDirection+0xa8>
    10a6:	80 95       	com	r24
    10a8:	84 23       	and	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	8e c0       	rjmp	.+284    	; 0x11ca <DIOSetPinDirection+0x1d4>
	break;

	case 1 : if(value==1) {DDRB |= (1<<Pinnumber);}
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	a1 f4       	brne	.+40     	; 0x10dc <DIOSetPinDirection+0xe6>
    10b4:	a7 e3       	ldi	r26, 0x37	; 55
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e7 e3       	ldi	r30, 0x37	; 55
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 2e       	mov	r0, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <DIOSetPinDirection+0xdc>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <DIOSetPinDirection+0xd8>
    10d6:	84 2b       	or	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	77 c0       	rjmp	.+238    	; 0x11ca <DIOSetPinDirection+0x1d4>
	  else   if (value==0) {DDRB &= ~(1<<Pinnumber);}
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	88 23       	and	r24, r24
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <DIOSetPinDirection+0xee>
    10e2:	73 c0       	rjmp	.+230    	; 0x11ca <DIOSetPinDirection+0x1d4>
    10e4:	a7 e3       	ldi	r26, 0x37	; 55
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e7 e3       	ldi	r30, 0x37	; 55
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIOSetPinDirection+0x10c>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIOSetPinDirection+0x108>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	5e c0       	rjmp	.+188    	; 0x11ca <DIOSetPinDirection+0x1d4>
	break;

	case 2 : if(value==1) {DDRC |= (1<<Pinnumber);}
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	a1 f4       	brne	.+40     	; 0x113c <DIOSetPinDirection+0x146>
    1114:	a4 e3       	ldi	r26, 0x34	; 52
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e4 e3       	ldi	r30, 0x34	; 52
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <DIOSetPinDirection+0x13c>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <DIOSetPinDirection+0x138>
    1136:	84 2b       	or	r24, r20
    1138:	8c 93       	st	X, r24
    113a:	47 c0       	rjmp	.+142    	; 0x11ca <DIOSetPinDirection+0x1d4>
	  else   if (value==0) {DDRC &= ~(1<<Pinnumber);}
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	88 23       	and	r24, r24
    1140:	09 f0       	breq	.+2      	; 0x1144 <DIOSetPinDirection+0x14e>
    1142:	43 c0       	rjmp	.+134    	; 0x11ca <DIOSetPinDirection+0x1d4>
    1144:	a4 e3       	ldi	r26, 0x34	; 52
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e4 e3       	ldi	r30, 0x34	; 52
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <DIOSetPinDirection+0x16c>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <DIOSetPinDirection+0x168>
    1166:	80 95       	com	r24
    1168:	84 23       	and	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	2e c0       	rjmp	.+92     	; 0x11ca <DIOSetPinDirection+0x1d4>
	break;

	case 3 : if(value==1) {DDRD |= (1<<Pinnumber);}
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	a1 f4       	brne	.+40     	; 0x119c <DIOSetPinDirection+0x1a6>
    1174:	a1 e3       	ldi	r26, 0x31	; 49
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e1 e3       	ldi	r30, 0x31	; 49
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	48 2f       	mov	r20, r24
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	02 2e       	mov	r0, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <DIOSetPinDirection+0x19c>
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	0a 94       	dec	r0
    1194:	e2 f7       	brpl	.-8      	; 0x118e <DIOSetPinDirection+0x198>
    1196:	84 2b       	or	r24, r20
    1198:	8c 93       	st	X, r24
    119a:	17 c0       	rjmp	.+46     	; 0x11ca <DIOSetPinDirection+0x1d4>
	  else   if (value==0) {DDRD &= ~(1<<Pinnumber);}
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	88 23       	and	r24, r24
    11a0:	a1 f4       	brne	.+40     	; 0x11ca <DIOSetPinDirection+0x1d4>
    11a2:	a1 e3       	ldi	r26, 0x31	; 49
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e1 e3       	ldi	r30, 0x31	; 49
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <DIOSetPinDirection+0x1ca>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <DIOSetPinDirection+0x1c6>
    11c4:	80 95       	com	r24
    11c6:	84 23       	and	r24, r20
    11c8:	8c 93       	st	X, r24

	break;
	default : break;
	}
	}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <DIOSetPinValue>:




void DIOSetPinValue (u8 portnumber,u8 Pinnumber,u8 value){
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <DIOSetPinValue+0x6>
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <DIOSetPinValue+0x8>
    11e2:	0f 92       	push	r0
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	6a 83       	std	Y+2, r22	; 0x02
    11ec:	4b 83       	std	Y+3, r20	; 0x03

switch(portnumber){
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	3d 83       	std	Y+5, r19	; 0x05
    11f6:	2c 83       	std	Y+4, r18	; 0x04
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	9d 81       	ldd	r25, Y+5	; 0x05
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	91 05       	cpc	r25, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <DIOSetPinValue+0x2a>
    1202:	47 c0       	rjmp	.+142    	; 0x1292 <DIOSetPinValue+0xb8>
    1204:	2c 81       	ldd	r18, Y+4	; 0x04
    1206:	3d 81       	ldd	r19, Y+5	; 0x05
    1208:	22 30       	cpi	r18, 0x02	; 2
    120a:	31 05       	cpc	r19, r1
    120c:	2c f4       	brge	.+10     	; 0x1218 <DIOSetPinValue+0x3e>
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	9d 81       	ldd	r25, Y+5	; 0x05
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	71 f0       	breq	.+28     	; 0x1232 <DIOSetPinValue+0x58>
    1216:	cb c0       	rjmp	.+406    	; 0x13ae <DIOSetPinValue+0x1d4>
    1218:	2c 81       	ldd	r18, Y+4	; 0x04
    121a:	3d 81       	ldd	r19, Y+5	; 0x05
    121c:	22 30       	cpi	r18, 0x02	; 2
    121e:	31 05       	cpc	r19, r1
    1220:	09 f4       	brne	.+2      	; 0x1224 <DIOSetPinValue+0x4a>
    1222:	67 c0       	rjmp	.+206    	; 0x12f2 <DIOSetPinValue+0x118>
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	83 30       	cpi	r24, 0x03	; 3
    122a:	91 05       	cpc	r25, r1
    122c:	09 f4       	brne	.+2      	; 0x1230 <DIOSetPinValue+0x56>
    122e:	91 c0       	rjmp	.+290    	; 0x1352 <DIOSetPinValue+0x178>
    1230:	be c0       	rjmp	.+380    	; 0x13ae <DIOSetPinValue+0x1d4>

case 0 : if(value==1) {PORTA |= (1<<Pinnumber);}
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	a1 f4       	brne	.+40     	; 0x1260 <DIOSetPinValue+0x86>
    1238:	ab e3       	ldi	r26, 0x3B	; 59
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	eb e3       	ldi	r30, 0x3B	; 59
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <DIOSetPinValue+0x7c>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <DIOSetPinValue+0x78>
    125a:	84 2b       	or	r24, r20
    125c:	8c 93       	st	X, r24
    125e:	a7 c0       	rjmp	.+334    	; 0x13ae <DIOSetPinValue+0x1d4>
  else   if (value==0) {PORTA &= ~(1<<Pinnumber);}
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	88 23       	and	r24, r24
    1264:	09 f0       	breq	.+2      	; 0x1268 <DIOSetPinValue+0x8e>
    1266:	a3 c0       	rjmp	.+326    	; 0x13ae <DIOSetPinValue+0x1d4>
    1268:	ab e3       	ldi	r26, 0x3B	; 59
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	eb e3       	ldi	r30, 0x3B	; 59
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 2e       	mov	r0, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIOSetPinValue+0xac>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIOSetPinValue+0xa8>
    128a:	80 95       	com	r24
    128c:	84 23       	and	r24, r20
    128e:	8c 93       	st	X, r24
    1290:	8e c0       	rjmp	.+284    	; 0x13ae <DIOSetPinValue+0x1d4>
break;

case 1 : if(value==1) {PORTB |= (1<<Pinnumber);}
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	81 30       	cpi	r24, 0x01	; 1
    1296:	a1 f4       	brne	.+40     	; 0x12c0 <DIOSetPinValue+0xe6>
    1298:	a8 e3       	ldi	r26, 0x38	; 56
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e8 e3       	ldi	r30, 0x38	; 56
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 2e       	mov	r0, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <DIOSetPinValue+0xdc>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <DIOSetPinValue+0xd8>
    12ba:	84 2b       	or	r24, r20
    12bc:	8c 93       	st	X, r24
    12be:	77 c0       	rjmp	.+238    	; 0x13ae <DIOSetPinValue+0x1d4>
  else   if (value==0) {PORTB &= ~(1<<Pinnumber);}
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	88 23       	and	r24, r24
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <DIOSetPinValue+0xee>
    12c6:	73 c0       	rjmp	.+230    	; 0x13ae <DIOSetPinValue+0x1d4>
    12c8:	a8 e3       	ldi	r26, 0x38	; 56
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e8 e3       	ldi	r30, 0x38	; 56
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <DIOSetPinValue+0x10c>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <DIOSetPinValue+0x108>
    12ea:	80 95       	com	r24
    12ec:	84 23       	and	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	5e c0       	rjmp	.+188    	; 0x13ae <DIOSetPinValue+0x1d4>
break;

case 2 : if(value==1) {PORTC |= (1<<Pinnumber);}
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	a1 f4       	brne	.+40     	; 0x1320 <DIOSetPinValue+0x146>
    12f8:	a5 e3       	ldi	r26, 0x35	; 53
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e5 e3       	ldi	r30, 0x35	; 53
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIOSetPinValue+0x13c>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIOSetPinValue+0x138>
    131a:	84 2b       	or	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	47 c0       	rjmp	.+142    	; 0x13ae <DIOSetPinValue+0x1d4>
  else   if (value==0) {PORTC &= ~(1<<Pinnumber);}
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	88 23       	and	r24, r24
    1324:	09 f0       	breq	.+2      	; 0x1328 <DIOSetPinValue+0x14e>
    1326:	43 c0       	rjmp	.+134    	; 0x13ae <DIOSetPinValue+0x1d4>
    1328:	a5 e3       	ldi	r26, 0x35	; 53
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e5 e3       	ldi	r30, 0x35	; 53
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIOSetPinValue+0x16c>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIOSetPinValue+0x168>
    134a:	80 95       	com	r24
    134c:	84 23       	and	r24, r20
    134e:	8c 93       	st	X, r24
    1350:	2e c0       	rjmp	.+92     	; 0x13ae <DIOSetPinValue+0x1d4>
break;

case 3 : if(value==1) {PORTD |= (1<<Pinnumber);}
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	a1 f4       	brne	.+40     	; 0x1380 <DIOSetPinValue+0x1a6>
    1358:	a2 e3       	ldi	r26, 0x32	; 50
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e2 e3       	ldi	r30, 0x32	; 50
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIOSetPinValue+0x19c>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIOSetPinValue+0x198>
    137a:	84 2b       	or	r24, r20
    137c:	8c 93       	st	X, r24
    137e:	17 c0       	rjmp	.+46     	; 0x13ae <DIOSetPinValue+0x1d4>
  else   if (value==0) {PORTD &= ~(1<<Pinnumber);}
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	88 23       	and	r24, r24
    1384:	a1 f4       	brne	.+40     	; 0x13ae <DIOSetPinValue+0x1d4>
    1386:	a2 e3       	ldi	r26, 0x32	; 50
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e2 e3       	ldi	r30, 0x32	; 50
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	48 2f       	mov	r20, r24
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 2e       	mov	r0, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <DIOSetPinValue+0x1ca>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <DIOSetPinValue+0x1c6>
    13a8:	80 95       	com	r24
    13aa:	84 23       	and	r24, r20
    13ac:	8c 93       	st	X, r24

break;
default : break;
}
}
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <DIOGetPort>:

u8 DIOGetPort (u8 portnumber){
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <DIOGetPort+0x6>
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <DIOGetPort+0x8>
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	8a 83       	std	Y+2, r24	; 0x02
	u8 x;
	switch (portnumber){
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	3c 83       	std	Y+4, r19	; 0x04
    13d4:	2b 83       	std	Y+3, r18	; 0x03
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	9c 81       	ldd	r25, Y+4	; 0x04
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	91 05       	cpc	r25, r1
    13de:	d1 f0       	breq	.+52     	; 0x1414 <DIOGetPort+0x56>
    13e0:	2b 81       	ldd	r18, Y+3	; 0x03
    13e2:	3c 81       	ldd	r19, Y+4	; 0x04
    13e4:	22 30       	cpi	r18, 0x02	; 2
    13e6:	31 05       	cpc	r19, r1
    13e8:	2c f4       	brge	.+10     	; 0x13f4 <DIOGetPort+0x36>
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	9c 81       	ldd	r25, Y+4	; 0x04
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	61 f0       	breq	.+24     	; 0x140a <DIOGetPort+0x4c>
    13f2:	1e c0       	rjmp	.+60     	; 0x1430 <DIOGetPort+0x72>
    13f4:	2b 81       	ldd	r18, Y+3	; 0x03
    13f6:	3c 81       	ldd	r19, Y+4	; 0x04
    13f8:	22 30       	cpi	r18, 0x02	; 2
    13fa:	31 05       	cpc	r19, r1
    13fc:	81 f0       	breq	.+32     	; 0x141e <DIOGetPort+0x60>
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	9c 81       	ldd	r25, Y+4	; 0x04
    1402:	83 30       	cpi	r24, 0x03	; 3
    1404:	91 05       	cpc	r25, r1
    1406:	81 f0       	breq	.+32     	; 0x1428 <DIOGetPort+0x6a>
    1408:	13 c0       	rjmp	.+38     	; 0x1430 <DIOGetPort+0x72>
		case 0 : x=PINA;
    140a:	e9 e3       	ldi	r30, 0x39	; 57
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	0e c0       	rjmp	.+28     	; 0x1430 <DIOGetPort+0x72>
		break;
		case 1 : x=PINB;
    1414:	e6 e3       	ldi	r30, 0x36	; 54
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	09 c0       	rjmp	.+18     	; 0x1430 <DIOGetPort+0x72>
		break;
		case 2 : x=PINC;
    141e:	e3 e3       	ldi	r30, 0x33	; 51
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	89 83       	std	Y+1, r24	; 0x01
    1426:	04 c0       	rjmp	.+8      	; 0x1430 <DIOGetPort+0x72>
		break;
		case 3 : x=PIND;
    1428:	e0 e3       	ldi	r30, 0x30	; 48
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	89 83       	std	Y+1, r24	; 0x01
		break;
		default : break;
	}
	return x;
    1430:	89 81       	ldd	r24, Y+1	; 0x01
}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <DIOGetPinValue>:

u8 DIOGetPinValue (u8 portnumber , u8 Pinnumber){
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	00 d0       	rcall	.+0      	; 0x1446 <DIOGetPinValue+0x6>
    1446:	00 d0       	rcall	.+0      	; 0x1448 <DIOGetPinValue+0x8>
    1448:	0f 92       	push	r0
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	8a 83       	std	Y+2, r24	; 0x02
    1450:	6b 83       	std	Y+3, r22	; 0x03
u8 x;
switch(portnumber){
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	3d 83       	std	Y+5, r19	; 0x05
    145a:	2c 83       	std	Y+4, r18	; 0x04
    145c:	4c 81       	ldd	r20, Y+4	; 0x04
    145e:	5d 81       	ldd	r21, Y+5	; 0x05
    1460:	41 30       	cpi	r20, 0x01	; 1
    1462:	51 05       	cpc	r21, r1
    1464:	41 f1       	breq	.+80     	; 0x14b6 <DIOGetPinValue+0x76>
    1466:	8c 81       	ldd	r24, Y+4	; 0x04
    1468:	9d 81       	ldd	r25, Y+5	; 0x05
    146a:	82 30       	cpi	r24, 0x02	; 2
    146c:	91 05       	cpc	r25, r1
    146e:	34 f4       	brge	.+12     	; 0x147c <DIOGetPinValue+0x3c>
    1470:	2c 81       	ldd	r18, Y+4	; 0x04
    1472:	3d 81       	ldd	r19, Y+5	; 0x05
    1474:	21 15       	cp	r18, r1
    1476:	31 05       	cpc	r19, r1
    1478:	61 f0       	breq	.+24     	; 0x1492 <DIOGetPinValue+0x52>
    147a:	52 c0       	rjmp	.+164    	; 0x1520 <DIOGetPinValue+0xe0>
    147c:	4c 81       	ldd	r20, Y+4	; 0x04
    147e:	5d 81       	ldd	r21, Y+5	; 0x05
    1480:	42 30       	cpi	r20, 0x02	; 2
    1482:	51 05       	cpc	r21, r1
    1484:	51 f1       	breq	.+84     	; 0x14da <DIOGetPinValue+0x9a>
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	83 30       	cpi	r24, 0x03	; 3
    148c:	91 05       	cpc	r25, r1
    148e:	b9 f1       	breq	.+110    	; 0x14fe <DIOGetPinValue+0xbe>
    1490:	47 c0       	rjmp	.+142    	; 0x1520 <DIOGetPinValue+0xe0>
case 0 : x =  ((PINA >> Pinnumber)&1);
    1492:	e9 e3       	ldi	r30, 0x39	; 57
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	88 2f       	mov	r24, r24
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	a9 01       	movw	r20, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <DIOGetPinValue+0x6a>
    14a6:	55 95       	asr	r21
    14a8:	47 95       	ror	r20
    14aa:	8a 95       	dec	r24
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <DIOGetPinValue+0x66>
    14ae:	ca 01       	movw	r24, r20
    14b0:	81 70       	andi	r24, 0x01	; 1
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	35 c0       	rjmp	.+106    	; 0x1520 <DIOGetPinValue+0xe0>
break;
case 1 : x =  ((PINB >> Pinnumber)&1);
    14b6:	e6 e3       	ldi	r30, 0x36	; 54
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	a9 01       	movw	r20, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <DIOGetPinValue+0x8e>
    14ca:	55 95       	asr	r21
    14cc:	47 95       	ror	r20
    14ce:	8a 95       	dec	r24
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <DIOGetPinValue+0x8a>
    14d2:	ca 01       	movw	r24, r20
    14d4:	81 70       	andi	r24, 0x01	; 1
    14d6:	89 83       	std	Y+1, r24	; 0x01
    14d8:	23 c0       	rjmp	.+70     	; 0x1520 <DIOGetPinValue+0xe0>
break;
case 2 : x =  ((PINC >> Pinnumber)&1);
    14da:	e3 e3       	ldi	r30, 0x33	; 51
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	88 2f       	mov	r24, r24
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	a9 01       	movw	r20, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <DIOGetPinValue+0xb2>
    14ee:	55 95       	asr	r21
    14f0:	47 95       	ror	r20
    14f2:	8a 95       	dec	r24
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <DIOGetPinValue+0xae>
    14f6:	ca 01       	movw	r24, r20
    14f8:	81 70       	andi	r24, 0x01	; 1
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	11 c0       	rjmp	.+34     	; 0x1520 <DIOGetPinValue+0xe0>
break;
case 3 : x =  ((PIND >> Pinnumber)&1);
    14fe:	e0 e3       	ldi	r30, 0x30	; 48
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	88 2f       	mov	r24, r24
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	a9 01       	movw	r20, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <DIOGetPinValue+0xd6>
    1512:	55 95       	asr	r21
    1514:	47 95       	ror	r20
    1516:	8a 95       	dec	r24
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <DIOGetPinValue+0xd2>
    151a:	ca 01       	movw	r24, r20
    151c:	81 70       	andi	r24, 0x01	; 1
    151e:	89 83       	std	Y+1, r24	; 0x01
break;
default : break;
}
return x;
    1520:	89 81       	ldd	r24, Y+1	; 0x01
}
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <i2c_init_master>:
#include "I2C.h"



void i2c_init_master(void)
{
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
	TWBR = 0x07;              //bit rate = 400.000 kbps, F_CPU = 12M   SCL freq= F_CPU/(16+2(TWBR).4^TWPS)
    153a:	e0 e2       	ldi	r30, 0x20	; 32
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	87 e0       	ldi	r24, 0x07	; 7
    1540:	80 83       	st	Z, r24
	TWSR &= ~((1<< TWPS1) | (1<< TWPS0));    //baud rate
    1542:	a1 e2       	ldi	r26, 0x21	; 33
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e1 e2       	ldi	r30, 0x21	; 33
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	8c 7f       	andi	r24, 0xFC	; 252
    154e:	8c 93       	st	X, r24
	TWCR = (1<< TWEN);                       //enable I2C
    1550:	e6 e5       	ldi	r30, 0x56	; 86
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	84 e0       	ldi	r24, 0x04	; 4
    1556:	80 83       	st	Z, r24
	return;
}
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <i2c_init_slave>:

void i2c_init_slave(void)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
	TWAR = (1<< 1);          // my address = 0x01
    1566:	e2 e2       	ldi	r30, 0x22	; 34
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	82 e0       	ldi	r24, 0x02	; 2
    156c:	80 83       	st	Z, r24
	TWCR = (1<< TWEN);       //enable I2C
    156e:	e6 e5       	ldi	r30, 0x56	; 86
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	84 e0       	ldi	r24, 0x04	; 4
    1574:	80 83       	st	Z, r24
	return;
}
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <i2c_start>:


void i2c_start(void)
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<< TWINT) | (1<< TWSTA) | (1<< TWEN);   // Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
    1584:	e6 e5       	ldi	r30, 0x56	; 86
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	84 ea       	ldi	r24, 0xA4	; 164
    158a:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));                     // Wait till start condition is transmitted
    158c:	e6 e5       	ldi	r30, 0x56	; 86
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	88 23       	and	r24, r24
    1594:	dc f7       	brge	.-10     	; 0x158c <i2c_start+0x10>
	while((TWSR & 0xF8) != START_ACK);               // Check for the acknowledgment
    1596:	e1 e2       	ldi	r30, 0x21	; 33
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	88 7f       	andi	r24, 0xF8	; 248
    15a2:	90 70       	andi	r25, 0x00	; 0
    15a4:	88 30       	cpi	r24, 0x08	; 8
    15a6:	91 05       	cpc	r25, r1
    15a8:	b1 f7       	brne	.-20     	; 0x1596 <i2c_start+0x1a>
	return;
}
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <i2c_repeated_start>:




void i2c_repeated_start(void)
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<< TWINT) | (1<< TWSTA) | (1<< TWEN);      // Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
    15b8:	e6 e5       	ldi	r30, 0x56	; 86
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	84 ea       	ldi	r24, 0xA4	; 164
    15be:	80 83       	st	Z, r24
	while(!(TWCR & (1<< TWINT)));                       // wait till restart condition is transmitted
    15c0:	e6 e5       	ldi	r30, 0x56	; 86
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	88 23       	and	r24, r24
    15c8:	dc f7       	brge	.-10     	; 0x15c0 <i2c_repeated_start+0x10>
	while((TWSR & 0xF8) != REP_START_ACK);              // Check for the acknowledgment
    15ca:	e1 e2       	ldi	r30, 0x21	; 33
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	88 2f       	mov	r24, r24
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	88 7f       	andi	r24, 0xF8	; 248
    15d6:	90 70       	andi	r25, 0x00	; 0
    15d8:	80 31       	cpi	r24, 0x10	; 16
    15da:	91 05       	cpc	r25, r1
    15dc:	b1 f7       	brne	.-20     	; 0x15ca <i2c_repeated_start+0x1a>
	return;
}
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <i2c_send_slave_address_with_write_req>:




void i2c_send_slave_address_with_write_req(unsigned char slave_address)
{
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	0f 92       	push	r0
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	89 83       	std	Y+1, r24	; 0x01
	TWDR = (slave_address<< 1);                    //Address and write instruction
    15f0:	e3 e2       	ldi	r30, 0x23	; 35
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	88 0f       	add	r24, r24
    15f8:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);                 // Clear TWI interrupt flag, Enable TWI
    15fa:	e6 e5       	ldi	r30, 0x56	; 86
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	84 e8       	ldi	r24, 0x84	; 132
    1600:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));                  // Wait till complete TWDR byte transmitted
    1602:	e6 e5       	ldi	r30, 0x56	; 86
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	88 23       	and	r24, r24
    160a:	dc f7       	brge	.-10     	; 0x1602 <i2c_send_slave_address_with_write_req+0x1e>
	while((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK);  // Check for the acknowledgment
    160c:	e1 e2       	ldi	r30, 0x21	; 33
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	88 2f       	mov	r24, r24
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	88 7f       	andi	r24, 0xF8	; 248
    1618:	90 70       	andi	r25, 0x00	; 0
    161a:	88 31       	cpi	r24, 0x18	; 24
    161c:	91 05       	cpc	r25, r1
    161e:	b1 f7       	brne	.-20     	; 0x160c <i2c_send_slave_address_with_write_req+0x28>
	return;
}
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <i2c_send_slave_address_with_read_req>:




void i2c_send_slave_address_with_read_req(unsigned char slave_address)
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	0f 92       	push	r0
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	89 83       	std	Y+1, r24	; 0x01
	TWDR = (slave_address<< 1);                     // Address
    1634:	e3 e2       	ldi	r30, 0x23	; 35
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	88 0f       	add	r24, r24
    163c:	80 83       	st	Z, r24
	TWDR |= (1<< 0);                                // read instruction
    163e:	a3 e2       	ldi	r26, 0x23	; 35
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e3 e2       	ldi	r30, 0x23	; 35
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	81 60       	ori	r24, 0x01	; 1
    164a:	8c 93       	st	X, r24
	TWCR = (1<< TWINT) | (1<< TWEN);                // Clear TWI interrupt flag,Enable TWI
    164c:	e6 e5       	ldi	r30, 0x56	; 86
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	84 e8       	ldi	r24, 0x84	; 132
    1652:	80 83       	st	Z, r24
	while (!(TWCR & (1<< TWINT)));                  // Wait till complete TWDR byte received
    1654:	e6 e5       	ldi	r30, 0x56	; 86
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	88 23       	and	r24, r24
    165c:	dc f7       	brge	.-10     	; 0x1654 <i2c_send_slave_address_with_read_req+0x2c>
	while((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK);   // Check for the acknowledgment
    165e:	e1 e2       	ldi	r30, 0x21	; 33
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	88 2f       	mov	r24, r24
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	88 7f       	andi	r24, 0xF8	; 248
    166a:	90 70       	andi	r25, 0x00	; 0
    166c:	80 34       	cpi	r24, 0x40	; 64
    166e:	91 05       	cpc	r25, r1
    1670:	b1 f7       	brne	.-20     	; 0x165e <i2c_send_slave_address_with_read_req+0x36>
}
    1672:	0f 90       	pop	r0
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <i2c_write_byte>:




void i2c_write_byte(unsigned char byte)
{
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	0f 92       	push	r0
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	89 83       	std	Y+1, r24	; 0x01
	TWDR = byte;                            // put data in TWDR
    1686:	e3 e2       	ldi	r30, 0x23	; 35
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	80 83       	st	Z, r24
	TWCR = (1<< TWINT) | (1<< TWEN);        // Clear TWI interrupt flag,Enable TWI
    168e:	e6 e5       	ldi	r30, 0x56	; 86
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	84 e8       	ldi	r24, 0x84	; 132
    1694:	80 83       	st	Z, r24
	while (!(TWCR & (1<< TWINT)));          // Wait till complete TWDR byte transmitted
    1696:	e6 e5       	ldi	r30, 0x56	; 86
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	88 23       	and	r24, r24
    169e:	dc f7       	brge	.-10     	; 0x1696 <i2c_write_byte+0x1c>
	while((TWSR & 0xF8) != WR_BYTE_ACK);    // Check for the acknowledgment
    16a0:	e1 e2       	ldi	r30, 0x21	; 33
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	88 2f       	mov	r24, r24
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	88 7f       	andi	r24, 0xF8	; 248
    16ac:	90 70       	andi	r25, 0x00	; 0
    16ae:	88 32       	cpi	r24, 0x28	; 40
    16b0:	91 05       	cpc	r25, r1
    16b2:	b1 f7       	brne	.-20     	; 0x16a0 <i2c_write_byte+0x26>
	return;
}
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <i2c_read_byte>:




unsigned char i2c_read_byte(void)
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<< TWINT) | (1<< TWEN);             // Clear TWI interrupt flag,Enable TWI
    16c4:	e6 e5       	ldi	r30, 0x56	; 86
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	84 e8       	ldi	r24, 0x84	; 132
    16ca:	80 83       	st	Z, r24
	while(!(TWCR & (1<< TWINT)));                // Wait till complete TWDR byte transmitted
    16cc:	e6 e5       	ldi	r30, 0x56	; 86
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	88 23       	and	r24, r24
    16d4:	dc f7       	brge	.-10     	; 0x16cc <i2c_read_byte+0x10>
	while((TWSR & 0xF8) != RD_BYTE_WITH_NACK);   // Check for the acknowledgment
    16d6:	e1 e2       	ldi	r30, 0x21	; 33
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	88 2f       	mov	r24, r24
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	88 7f       	andi	r24, 0xF8	; 248
    16e2:	90 70       	andi	r25, 0x00	; 0
    16e4:	88 35       	cpi	r24, 0x58	; 88
    16e6:	91 05       	cpc	r25, r1
    16e8:	b1 f7       	brne	.-20     	; 0x16d6 <i2c_read_byte+0x1a>
	return TWDR;
    16ea:	e3 e2       	ldi	r30, 0x23	; 35
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
}
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <i2c_stop>:




void i2c_stop(void)
{
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Clear TWI interrupt flag, Put stop condition on SDA,Enable TWI
    16fe:	e6 e5       	ldi	r30, 0x56	; 86
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	84 e9       	ldi	r24, 0x94	; 148
    1704:	80 83       	st	Z, r24
	return;
}
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <i2c_slave_check_slave_address_received_with_write_req>:



void i2c_slave_check_slave_address_received_with_write_req(void)
{
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEA) | (1<<TWEN) | (1<<TWINT);       // enable acknowledgment after receive, Enable TWI, Clear TWI interrupt flag
    1714:	e6 e5       	ldi	r30, 0x56	; 86
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	84 ec       	ldi	r24, 0xC4	; 196
    171a:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));                    // Wait for TWINT flag
    171c:	e6 e5       	ldi	r30, 0x56	; 86
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	88 23       	and	r24, r24
    1724:	dc f7       	brge	.-10     	; 0x171c <i2c_slave_check_slave_address_received_with_write_req+0x10>
	while((TWSR & 0xF8) != SLAVE_ADD_RCVD_WR_REQ) ;
    1726:	e1 e2       	ldi	r30, 0x21	; 33
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	88 2f       	mov	r24, r24
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	88 7f       	andi	r24, 0xF8	; 248
    1732:	90 70       	andi	r25, 0x00	; 0
    1734:	80 36       	cpi	r24, 0x60	; 96
    1736:	91 05       	cpc	r25, r1
    1738:	b1 f7       	brne	.-20     	; 0x1726 <i2c_slave_check_slave_address_received_with_write_req+0x1a>
	return;
}
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <i2c_slave_check_slave_address_received_with_read_req>:



void i2c_slave_check_slave_address_received_with_read_req(void)
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEA) | (1<<TWEN) | (1<<TWINT);    // enable acknowledgment after receive, Enable TWI, Clear TWI interrupt flag
    1748:	e6 e5       	ldi	r30, 0x56	; 86
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	84 ec       	ldi	r24, 0xC4	; 196
    174e:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));                 // Wait for TWINT flag
    1750:	e6 e5       	ldi	r30, 0x56	; 86
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	88 23       	and	r24, r24
    1758:	dc f7       	brge	.-10     	; 0x1750 <i2c_slave_check_slave_address_received_with_read_req+0x10>
	while((TWSR & 0xF8) != SLAVE_ADD_RCVD_RD_REQ);
    175a:	e1 e2       	ldi	r30, 0x21	; 33
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	88 7f       	andi	r24, 0xF8	; 248
    1766:	90 70       	andi	r25, 0x00	; 0
    1768:	88 3a       	cpi	r24, 0xA8	; 168
    176a:	91 05       	cpc	r25, r1
    176c:	b1 f7       	brne	.-20     	; 0x175a <i2c_slave_check_slave_address_received_with_read_req+0x1a>
	return;
}
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <i2c_slave_read_byte>:



unsigned char i2c_slave_read_byte(void)
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);     // Clear TWI interrupt flag,Get enable acknowledgment, Enable TWI
    177c:	e6 e5       	ldi	r30, 0x56	; 86
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	84 ec       	ldi	r24, 0xC4	; 196
    1782:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));                   // Wait for TWINT flag
    1784:	e6 e5       	ldi	r30, 0x56	; 86
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	88 23       	and	r24, r24
    178c:	dc f7       	brge	.-10     	; 0x1784 <i2c_slave_read_byte+0x10>
	while((TWSR & 0xF8) != SLAVE_DATA_RECEIVED);
    178e:	e1 e2       	ldi	r30, 0x21	; 33
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	88 2f       	mov	r24, r24
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	88 7f       	andi	r24, 0xF8	; 248
    179a:	90 70       	andi	r25, 0x00	; 0
    179c:	80 38       	cpi	r24, 0x80	; 128
    179e:	91 05       	cpc	r25, r1
    17a0:	b1 f7       	brne	.-20     	; 0x178e <i2c_slave_read_byte+0x1a>
	return TWDR;
    17a2:	e3 e2       	ldi	r30, 0x23	; 35
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
}
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <i2c_slave_write_byte>:




void i2c_slave_write_byte(unsigned char byte)
{
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	0f 92       	push	r0
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	89 83       	std	Y+1, r24	; 0x01
	TWDR = byte;
    17ba:	e3 e2       	ldi	r30, 0x23	; 35
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);        // Clear TWI interrupt flag,Get enable acknowledgment, Enable TWI
    17c2:	e6 e5       	ldi	r30, 0x56	; 86
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	84 ec       	ldi	r24, 0xC4	; 196
    17c8:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));                      // Wait for TWINT flag
    17ca:	e6 e5       	ldi	r30, 0x56	; 86
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	88 23       	and	r24, r24
    17d2:	dc f7       	brge	.-10     	; 0x17ca <i2c_slave_write_byte+0x1c>
	while((TWSR & 0xF8) != SLAVE_BYTE_TRANSMITTED);   // Data byte in TWDR has been transmitted
    17d4:	e1 e2       	ldi	r30, 0x21	; 33
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	88 2f       	mov	r24, r24
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	88 7f       	andi	r24, 0xF8	; 248
    17e0:	90 70       	andi	r25, 0x00	; 0
    17e2:	80 3c       	cpi	r24, 0xC0	; 192
    17e4:	91 05       	cpc	r25, r1
    17e6:	b1 f7       	brne	.-20     	; 0x17d4 <i2c_slave_write_byte+0x26>
	return;
}
    17e8:	0f 90       	pop	r0
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <USART_Init>:
#include "USART.h"						/* Include USART header file */


void USART_Init(unsigned long BAUDRATE)				/* USART initialize function */
{
    17f0:	0f 93       	push	r16
    17f2:	1f 93       	push	r17
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <USART_Init+0xa>
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <USART_Init+0xc>
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	69 83       	std	Y+1, r22	; 0x01
    1802:	7a 83       	std	Y+2, r23	; 0x02
    1804:	8b 83       	std	Y+3, r24	; 0x03
    1806:	9c 83       	std	Y+4, r25	; 0x04
	UCSRB |= (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);	/* Enable USART transmitter and receiver */
    1808:	aa e2       	ldi	r26, 0x2A	; 42
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	ea e2       	ldi	r30, 0x2A	; 42
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	88 69       	ori	r24, 0x98	; 152
    1814:	8c 93       	st	X, r24
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	/* Write USCRC for 8 bit data and 1 stop bit */ 
    1816:	a0 e4       	ldi	r26, 0x40	; 64
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e0 e4       	ldi	r30, 0x40	; 64
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	86 68       	ori	r24, 0x86	; 134
    1822:	8c 93       	st	X, r24
	UBRRL = BAUD_PRESCALE;							/* Load UBRRL with lower 8 bit of prescale value */
    1824:	09 e2       	ldi	r16, 0x29	; 41
    1826:	10 e0       	ldi	r17, 0x00	; 0
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	9a 81       	ldd	r25, Y+2	; 0x02
    182c:	ab 81       	ldd	r26, Y+3	; 0x03
    182e:	bc 81       	ldd	r27, Y+4	; 0x04
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	aa 1f       	adc	r26, r26
    1836:	bb 1f       	adc	r27, r27
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	aa 1f       	adc	r26, r26
    183e:	bb 1f       	adc	r27, r27
    1840:	88 0f       	add	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	aa 1f       	adc	r26, r26
    1846:	bb 1f       	adc	r27, r27
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	aa 1f       	adc	r26, r26
    184e:	bb 1f       	adc	r27, r27
    1850:	9c 01       	movw	r18, r24
    1852:	ad 01       	movw	r20, r26
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	92 e1       	ldi	r25, 0x12	; 18
    1858:	aa e7       	ldi	r26, 0x7A	; 122
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	bc 01       	movw	r22, r24
    185e:	cd 01       	movw	r24, r26
    1860:	0e 94 ac 39 	call	0x7358	; 0x7358 <__udivmodsi4>
    1864:	da 01       	movw	r26, r20
    1866:	c9 01       	movw	r24, r18
    1868:	81 50       	subi	r24, 0x01	; 1
    186a:	f8 01       	movw	r30, r16
    186c:	80 83       	st	Z, r24
	UBRRH = (BAUD_PRESCALE >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
    186e:	00 e4       	ldi	r16, 0x40	; 64
    1870:	10 e0       	ldi	r17, 0x00	; 0
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	9a 81       	ldd	r25, Y+2	; 0x02
    1876:	ab 81       	ldd	r26, Y+3	; 0x03
    1878:	bc 81       	ldd	r27, Y+4	; 0x04
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	aa 1f       	adc	r26, r26
    1880:	bb 1f       	adc	r27, r27
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	aa 1f       	adc	r26, r26
    1888:	bb 1f       	adc	r27, r27
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	aa 1f       	adc	r26, r26
    1890:	bb 1f       	adc	r27, r27
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	aa 1f       	adc	r26, r26
    1898:	bb 1f       	adc	r27, r27
    189a:	9c 01       	movw	r18, r24
    189c:	ad 01       	movw	r20, r26
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	92 e1       	ldi	r25, 0x12	; 18
    18a2:	aa e7       	ldi	r26, 0x7A	; 122
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	bc 01       	movw	r22, r24
    18a8:	cd 01       	movw	r24, r26
    18aa:	0e 94 ac 39 	call	0x7358	; 0x7358 <__udivmodsi4>
    18ae:	da 01       	movw	r26, r20
    18b0:	c9 01       	movw	r24, r18
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	a1 09       	sbc	r26, r1
    18b6:	b1 09       	sbc	r27, r1
    18b8:	89 2f       	mov	r24, r25
    18ba:	9a 2f       	mov	r25, r26
    18bc:	ab 2f       	mov	r26, r27
    18be:	bb 27       	eor	r27, r27
    18c0:	f8 01       	movw	r30, r16
    18c2:	80 83       	st	Z, r24
}
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	08 95       	ret

000018d6 <USART_RxChar>:

char USART_RxChar()									/* Data receiving function */
{
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
    18de:	eb e2       	ldi	r30, 0x2B	; 43
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	88 23       	and	r24, r24
    18e6:	dc f7       	brge	.-10     	; 0x18de <USART_RxChar+0x8>
	return(UDR);									/* Get and return received data */ 
    18e8:	ec e2       	ldi	r30, 0x2C	; 44
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
}
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	0f 92       	push	r0
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;										/* Write data to be transmitting in UDR */
    1900:	ec e2       	ldi	r30, 0x2C	; 44
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	80 83       	st	Z, r24
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
    1908:	eb e2       	ldi	r30, 0x2B	; 43
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	88 2f       	mov	r24, r24
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	80 72       	andi	r24, 0x20	; 32
    1914:	90 70       	andi	r25, 0x00	; 0
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	b9 f3       	breq	.-18     	; 0x1908 <USART_TxChar+0x14>
}
    191a:	0f 90       	pop	r0
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	00 d0       	rcall	.+0      	; 0x1928 <USART_SendString+0x6>
    1928:	00 d0       	rcall	.+0      	; 0x192a <USART_SendString+0x8>
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	9c 83       	std	Y+4, r25	; 0x04
    1930:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;																	
    1932:	1a 82       	std	Y+2, r1	; 0x02
    1934:	19 82       	std	Y+1, r1	; 0x01
    1936:	0f c0       	rjmp	.+30     	; 0x1956 <USART_SendString+0x34>
	while (str[i]!=0)
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
    1938:	29 81       	ldd	r18, Y+1	; 0x01
    193a:	3a 81       	ldd	r19, Y+2	; 0x02
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	9c 81       	ldd	r25, Y+4	; 0x04
    1940:	fc 01       	movw	r30, r24
    1942:	e2 0f       	add	r30, r18
    1944:	f3 1f       	adc	r31, r19
    1946:	80 81       	ld	r24, Z
    1948:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <USART_TxChar>
		i++;
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	9a 81       	ldd	r25, Y+2	; 0x02
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	9a 83       	std	Y+2, r25	; 0x02
    1954:	89 83       	std	Y+1, r24	; 0x01
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
    1956:	29 81       	ldd	r18, Y+1	; 0x01
    1958:	3a 81       	ldd	r19, Y+2	; 0x02
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	9c 81       	ldd	r25, Y+4	; 0x04
    195e:	fc 01       	movw	r30, r24
    1960:	e2 0f       	add	r30, r18
    1962:	f3 1f       	adc	r31, r19
    1964:	80 81       	ld	r24, Z
    1966:	88 23       	and	r24, r24
    1968:	39 f7       	brne	.-50     	; 0x1938 <USART_SendString+0x16>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
}
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <EEpromInit>:
#include "eeprom.h"
#include "I2C.h"


void EEpromInit(void)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
	i2c_init_master();
    1980:	0e 94 99 0a 	call	0x1532	; 0x1532 <i2c_init_master>
}
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <EEpromWriteByte>:



void EEpromWriteByte(unsigned short address, unsigned char data)
{
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	00 d0       	rcall	.+0      	; 0x1990 <EEpromWriteByte+0x6>
    1990:	0f 92       	push	r0
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	9a 83       	std	Y+2, r25	; 0x02
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	6b 83       	std	Y+3, r22	; 0x03
    i2c_start();
    199c:	0e 94 be 0a 	call	0x157c	; 0x157c <i2c_start>
	i2c_send_slave_address_with_write_req( 0b01010000 /*| ((address & 0x0700)>>8) */);
    19a0:	80 e5       	ldi	r24, 0x50	; 80
    19a2:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <i2c_send_slave_address_with_write_req>
	i2c_write_byte((unsigned char)address);
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	0e 94 3d 0b 	call	0x167a	; 0x167a <i2c_write_byte>
	i2c_write_byte(data);
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	0e 94 3d 0b 	call	0x167a	; 0x167a <i2c_write_byte>
	i2c_stop();
    19b2:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <i2c_stop>
    return;
}
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <EEpromReadByte>:



unsigned char EEpromReadByte(unsigned short address)
{
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	00 d0       	rcall	.+0      	; 0x19c8 <EEpromReadByte+0x6>
    19c8:	0f 92       	push	r0
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	9b 83       	std	Y+3, r25	; 0x03
    19d0:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char data;
	i2c_start();
    19d2:	0e 94 be 0a 	call	0x157c	; 0x157c <i2c_start>
	i2c_send_slave_address_with_write_req( 0b01010000 /*| ((address & 0x07)>>8) */);
    19d6:	80 e5       	ldi	r24, 0x50	; 80
    19d8:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <i2c_send_slave_address_with_write_req>
    i2c_write_byte((unsigned char)address);
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	0e 94 3d 0b 	call	0x167a	; 0x167a <i2c_write_byte>
	i2c_repeated_start();
    19e2:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <i2c_repeated_start>
	i2c_send_slave_address_with_read_req( 0b01010000 /*| ((address & 0x07)>>8)*/ );
    19e6:	80 e5       	ldi	r24, 0x50	; 80
    19e8:	0e 94 14 0b 	call	0x1628	; 0x1628 <i2c_send_slave_address_with_read_req>
	data = i2c_read_byte();
    19ec:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <i2c_read_byte>
    19f0:	89 83       	std	Y+1, r24	; 0x01
	i2c_stop();
    19f2:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <i2c_stop>
    return data;
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <ratof>:

bool IsItGGAString = false,flag1 = false,flag2 = false;


float ratof(char *arr)
{
    1a04:	ef 92       	push	r14
    1a06:	ff 92       	push	r15
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	62 97       	sbiw	r28, 0x12	; 18
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	9e 87       	std	Y+14, r25	; 0x0e
    1a22:	8d 87       	std	Y+13, r24	; 0x0d
  float val = 0;
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	a0 e0       	ldi	r26, 0x00	; 0
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	89 87       	std	Y+9, r24	; 0x09
    1a2e:	9a 87       	std	Y+10, r25	; 0x0a
    1a30:	ab 87       	std	Y+11, r26	; 0x0b
    1a32:	bc 87       	std	Y+12, r27	; 0x0c
  int afterdot=0;
    1a34:	18 86       	std	Y+8, r1	; 0x08
    1a36:	1f 82       	std	Y+7, r1	; 0x07
  float scale=1;
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	a0 e8       	ldi	r26, 0x80	; 128
    1a3e:	bf e3       	ldi	r27, 0x3F	; 63
    1a40:	8b 83       	std	Y+3, r24	; 0x03
    1a42:	9c 83       	std	Y+4, r25	; 0x04
    1a44:	ad 83       	std	Y+5, r26	; 0x05
    1a46:	be 83       	std	Y+6, r27	; 0x06
  int neg = 0;
    1a48:	1a 82       	std	Y+2, r1	; 0x02
    1a4a:	19 82       	std	Y+1, r1	; 0x01

  if (*arr == '-') {
    1a4c:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a4e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a50:	80 81       	ld	r24, Z
    1a52:	8d 32       	cpi	r24, 0x2D	; 45
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <ratof+0x54>
    1a56:	7f c0       	rjmp	.+254    	; 0x1b56 <ratof+0x152>
    arr++;
    1a58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5c:	01 96       	adiw	r24, 0x01	; 1
    1a5e:	9e 87       	std	Y+14, r25	; 0x0e
    1a60:	8d 87       	std	Y+13, r24	; 0x0d
    neg = 1;
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	75 c0       	rjmp	.+234    	; 0x1b56 <ratof+0x152>
  }
  while (*arr) {
    if (afterdot) {
    1a6c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a6e:	98 85       	ldd	r25, Y+8	; 0x08
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	c9 f1       	breq	.+114    	; 0x1ae6 <ratof+0xe2>
      scale = scale/10;
    1a74:	6b 81       	ldd	r22, Y+3	; 0x03
    1a76:	7c 81       	ldd	r23, Y+4	; 0x04
    1a78:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e2       	ldi	r20, 0x20	; 32
    1a82:	51 e4       	ldi	r21, 0x41	; 65
    1a84:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	8b 83       	std	Y+3, r24	; 0x03
    1a8e:	9c 83       	std	Y+4, r25	; 0x04
    1a90:	ad 83       	std	Y+5, r26	; 0x05
    1a92:	be 83       	std	Y+6, r27	; 0x06
      val = val + (*arr-'0')*scale;
    1a94:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a96:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a98:	80 81       	ld	r24, Z
    1a9a:	88 2f       	mov	r24, r24
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	c0 97       	sbiw	r24, 0x30	; 48
    1aa0:	aa 27       	eor	r26, r26
    1aa2:	97 fd       	sbrc	r25, 7
    1aa4:	a0 95       	com	r26
    1aa6:	ba 2f       	mov	r27, r26
    1aa8:	bc 01       	movw	r22, r24
    1aaa:	cd 01       	movw	r24, r26
    1aac:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatsisf>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	bc 01       	movw	r22, r24
    1ab6:	cd 01       	movw	r24, r26
    1ab8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aba:	3c 81       	ldd	r19, Y+4	; 0x04
    1abc:	4d 81       	ldd	r20, Y+5	; 0x05
    1abe:	5e 81       	ldd	r21, Y+6	; 0x06
    1ac0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	9c 01       	movw	r18, r24
    1aca:	ad 01       	movw	r20, r26
    1acc:	69 85       	ldd	r22, Y+9	; 0x09
    1ace:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ad0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ad2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ad4:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	89 87       	std	Y+9, r24	; 0x09
    1ade:	9a 87       	std	Y+10, r25	; 0x0a
    1ae0:	ab 87       	std	Y+11, r26	; 0x0b
    1ae2:	bc 87       	std	Y+12, r27	; 0x0c
    1ae4:	33 c0       	rjmp	.+102    	; 0x1b4c <ratof+0x148>
    } else {
      if (*arr == '.')
    1ae6:	ed 85       	ldd	r30, Y+13	; 0x0d
    1ae8:	fe 85       	ldd	r31, Y+14	; 0x0e
    1aea:	80 81       	ld	r24, Z
    1aec:	8e 32       	cpi	r24, 0x2E	; 46
    1aee:	31 f4       	brne	.+12     	; 0x1afc <ratof+0xf8>
    afterdot++;
    1af0:	8f 81       	ldd	r24, Y+7	; 0x07
    1af2:	98 85       	ldd	r25, Y+8	; 0x08
    1af4:	01 96       	adiw	r24, 0x01	; 1
    1af6:	98 87       	std	Y+8, r25	; 0x08
    1af8:	8f 83       	std	Y+7, r24	; 0x07
    1afa:	28 c0       	rjmp	.+80     	; 0x1b4c <ratof+0x148>
      else
    val = val * 10.0 + (*arr - '0');
    1afc:	69 85       	ldd	r22, Y+9	; 0x09
    1afe:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b00:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b02:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e2       	ldi	r20, 0x20	; 32
    1b0a:	51 e4       	ldi	r21, 0x41	; 65
    1b0c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	7c 01       	movw	r14, r24
    1b16:	8d 01       	movw	r16, r26
    1b18:	ed 85       	ldd	r30, Y+13	; 0x0d
    1b1a:	fe 85       	ldd	r31, Y+14	; 0x0e
    1b1c:	80 81       	ld	r24, Z
    1b1e:	88 2f       	mov	r24, r24
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	c0 97       	sbiw	r24, 0x30	; 48
    1b24:	aa 27       	eor	r26, r26
    1b26:	97 fd       	sbrc	r25, 7
    1b28:	a0 95       	com	r26
    1b2a:	ba 2f       	mov	r27, r26
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatsisf>
    1b34:	9b 01       	movw	r18, r22
    1b36:	ac 01       	movw	r20, r24
    1b38:	c8 01       	movw	r24, r16
    1b3a:	b7 01       	movw	r22, r14
    1b3c:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	89 87       	std	Y+9, r24	; 0x09
    1b46:	9a 87       	std	Y+10, r25	; 0x0a
    1b48:	ab 87       	std	Y+11, r26	; 0x0b
    1b4a:	bc 87       	std	Y+12, r27	; 0x0c
    }
    arr++;
    1b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b50:	01 96       	adiw	r24, 0x01	; 1
    1b52:	9e 87       	std	Y+14, r25	; 0x0e
    1b54:	8d 87       	std	Y+13, r24	; 0x0d

  if (*arr == '-') {
    arr++;
    neg = 1;
  }
  while (*arr) {
    1b56:	ed 85       	ldd	r30, Y+13	; 0x0d
    1b58:	fe 85       	ldd	r31, Y+14	; 0x0e
    1b5a:	80 81       	ld	r24, Z
    1b5c:	88 23       	and	r24, r24
    1b5e:	09 f0       	breq	.+2      	; 0x1b62 <ratof+0x15e>
    1b60:	85 cf       	rjmp	.-246    	; 0x1a6c <ratof+0x68>
      else
    val = val * 10.0 + (*arr - '0');
    }
    arr++;
  }
  if(neg) return -val;
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	9a 81       	ldd	r25, Y+2	; 0x02
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	61 f0       	breq	.+24     	; 0x1b82 <ratof+0x17e>
    1b6a:	89 85       	ldd	r24, Y+9	; 0x09
    1b6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1b70:	bc 85       	ldd	r27, Y+12	; 0x0c
    1b72:	9c 01       	movw	r18, r24
    1b74:	ad 01       	movw	r20, r26
    1b76:	50 58       	subi	r21, 0x80	; 128
    1b78:	2f 87       	std	Y+15, r18	; 0x0f
    1b7a:	38 8b       	std	Y+16, r19	; 0x10
    1b7c:	49 8b       	std	Y+17, r20	; 0x11
    1b7e:	5a 8b       	std	Y+18, r21	; 0x12
    1b80:	08 c0       	rjmp	.+16     	; 0x1b92 <ratof+0x18e>
  else    return  val;
    1b82:	89 85       	ldd	r24, Y+9	; 0x09
    1b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b86:	ab 85       	ldd	r26, Y+11	; 0x0b
    1b88:	bc 85       	ldd	r27, Y+12	; 0x0c
    1b8a:	8f 87       	std	Y+15, r24	; 0x0f
    1b8c:	98 8b       	std	Y+16, r25	; 0x10
    1b8e:	a9 8b       	std	Y+17, r26	; 0x11
    1b90:	ba 8b       	std	Y+18, r27	; 0x12
    1b92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b94:	98 89       	ldd	r25, Y+16	; 0x10
    1b96:	a9 89       	ldd	r26, Y+17	; 0x11
    1b98:	ba 89       	ldd	r27, Y+18	; 0x12
}
    1b9a:	bc 01       	movw	r22, r24
    1b9c:	cd 01       	movw	r24, r26
    1b9e:	62 96       	adiw	r28, 0x12	; 18
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	f8 94       	cli
    1ba4:	de bf       	out	0x3e, r29	; 62
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	cd bf       	out	0x3d, r28	; 61
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	1f 91       	pop	r17
    1bb0:	0f 91       	pop	r16
    1bb2:	ff 90       	pop	r15
    1bb4:	ef 90       	pop	r14
    1bb6:	08 95       	ret

00001bb8 <get_gpstime>:

void get_gpstime(){
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <get_gpstime+0x6>
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
cli();
    1bc2:	f8 94       	cli
uint8_t time_index=0;
    1bc4:	1a 82       	std	Y+2, r1	; 0x02
/* parse Time in GGA string stored in buffer */
for(uint8_t index = 0;GGA_Buffer[index]!=','; index++){
    1bc6:	19 82       	std	Y+1, r1	; 0x01
    1bc8:	14 c0       	rjmp	.+40     	; 0x1bf2 <get_gpstime+0x3a>

Time_Buffer[time_index] = GGA_Buffer[index];
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	88 2f       	mov	r24, r24
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	eb 5c       	subi	r30, 0xCB	; 203
    1bda:	fa 4f       	sbci	r31, 0xFA	; 250
    1bdc:	80 81       	ld	r24, Z
    1bde:	f9 01       	movw	r30, r18
    1be0:	e2 51       	subi	r30, 0x12	; 18
    1be2:	fa 4f       	sbci	r31, 0xFA	; 250
    1be4:	80 83       	st	Z, r24
time_index++;
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	8f 5f       	subi	r24, 0xFF	; 255
    1bea:	8a 83       	std	Y+2, r24	; 0x02

void get_gpstime(){
cli();
uint8_t time_index=0;
/* parse Time in GGA string stored in buffer */
for(uint8_t index = 0;GGA_Buffer[index]!=','; index++){
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	8f 5f       	subi	r24, 0xFF	; 255
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	88 2f       	mov	r24, r24
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	eb 5c       	subi	r30, 0xCB	; 203
    1bfc:	fa 4f       	sbci	r31, 0xFA	; 250
    1bfe:	80 81       	ld	r24, Z
    1c00:	8c 32       	cpi	r24, 0x2C	; 44
    1c02:	19 f7       	brne	.-58     	; 0x1bca <get_gpstime+0x12>

Time_Buffer[time_index] = GGA_Buffer[index];
time_index++;
}
convert_time_to_UTC();
    1c04:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <convert_time_to_UTC>
sei();
    1c08:	78 94       	sei
}
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	08 95       	ret

00001c14 <get_latitude>:

void get_latitude(uint16_t lat_pointer){
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <get_latitude+0x6>
    1c1a:	00 d0       	rcall	.+0      	; 0x1c1c <get_latitude+0x8>
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	9c 83       	std	Y+4, r25	; 0x04
    1c22:	8b 83       	std	Y+3, r24	; 0x03
cli();
    1c24:	f8 94       	cli
uint8_t lat_index;
uint8_t index = lat_pointer+1;
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	8f 5f       	subi	r24, 0xFF	; 255
    1c2a:	89 83       	std	Y+1, r24	; 0x01
lat_index=0;
    1c2c:	1a 82       	std	Y+2, r1	; 0x02
    1c2e:	14 c0       	rjmp	.+40     	; 0x1c58 <get_latitude+0x44>

/* parse Latitude in GGA string stored in buffer */
for(;GGA_Buffer[index]!=',';index++){
Latitude_Buffer[lat_index]= GGA_Buffer[index];
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	88 2f       	mov	r24, r24
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	eb 5c       	subi	r30, 0xCB	; 203
    1c40:	fa 4f       	sbci	r31, 0xFA	; 250
    1c42:	80 81       	ld	r24, Z
    1c44:	f9 01       	movw	r30, r18
    1c46:	ec 5f       	subi	r30, 0xFC	; 252
    1c48:	f9 4f       	sbci	r31, 0xF9	; 249
    1c4a:	80 83       	st	Z, r24
lat_index++;
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	8f 5f       	subi	r24, 0xFF	; 255
    1c50:	8a 83       	std	Y+2, r24	; 0x02
uint8_t lat_index;
uint8_t index = lat_pointer+1;
lat_index=0;

/* parse Latitude in GGA string stored in buffer */
for(;GGA_Buffer[index]!=',';index++){
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	8f 5f       	subi	r24, 0xFF	; 255
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	88 2f       	mov	r24, r24
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	fc 01       	movw	r30, r24
    1c60:	eb 5c       	subi	r30, 0xCB	; 203
    1c62:	fa 4f       	sbci	r31, 0xFA	; 250
    1c64:	80 81       	ld	r24, Z
    1c66:	8c 32       	cpi	r24, 0x2C	; 44
    1c68:	19 f7       	brne	.-58     	; 0x1c30 <get_latitude+0x1c>
Latitude_Buffer[lat_index]= GGA_Buffer[index];
lat_index++;
}

Latitude_Buffer[lat_index++] = GGA_Buffer[index++];
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	28 2f       	mov	r18, r24
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	88 2f       	mov	r24, r24
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	fc 01       	movw	r30, r24
    1c78:	eb 5c       	subi	r30, 0xCB	; 203
    1c7a:	fa 4f       	sbci	r31, 0xFA	; 250
    1c7c:	80 81       	ld	r24, Z
    1c7e:	f9 01       	movw	r30, r18
    1c80:	ec 5f       	subi	r30, 0xFC	; 252
    1c82:	f9 4f       	sbci	r31, 0xF9	; 249
    1c84:	80 83       	st	Z, r24
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	8f 5f       	subi	r24, 0xFF	; 255
    1c8a:	8a 83       	std	Y+2, r24	; 0x02
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	8f 5f       	subi	r24, 0xFF	; 255
    1c90:	89 83       	std	Y+1, r24	; 0x01
Latitude_Buffer[lat_index]= GGA_Buffer[index]; /* get direction */
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	88 2f       	mov	r24, r24
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	eb 5c       	subi	r30, 0xCB	; 203
    1ca2:	fa 4f       	sbci	r31, 0xFA	; 250
    1ca4:	80 81       	ld	r24, Z
    1ca6:	f9 01       	movw	r30, r18
    1ca8:	ec 5f       	subi	r30, 0xFC	; 252
    1caa:	f9 4f       	sbci	r31, 0xF9	; 249
    1cac:	80 83       	st	Z, r24
convert_to_degrees(Latitude_Buffer);
    1cae:	84 e0       	ldi	r24, 0x04	; 4
    1cb0:	96 e0       	ldi	r25, 0x06	; 6
    1cb2:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <convert_to_degrees>
sei();
    1cb6:	78 94       	sei
}
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <get_longitude>:

void get_longitude(uint16_t long_pointer){
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <get_longitude+0x6>
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <get_longitude+0x8>
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	9c 83       	std	Y+4, r25	; 0x04
    1cd4:	8b 83       	std	Y+3, r24	; 0x03
cli();
    1cd6:	f8 94       	cli
uint8_t long_index;
uint8_t index = long_pointer+1;
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	8f 5f       	subi	r24, 0xFF	; 255
    1cdc:	89 83       	std	Y+1, r24	; 0x01
long_index=0;
    1cde:	1a 82       	std	Y+2, r1	; 0x02
    1ce0:	14 c0       	rjmp	.+40     	; 0x1d0a <get_longitude+0x44>

/* parse Longitude in GGA string stored in buffer */
for( ; GGA_Buffer[index]!=','; index++){
Longitude_Buffer[long_index]= GGA_Buffer[index];
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	88 2f       	mov	r24, r24
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	fc 01       	movw	r30, r24
    1cf0:	eb 5c       	subi	r30, 0xCB	; 203
    1cf2:	fa 4f       	sbci	r31, 0xFA	; 250
    1cf4:	80 81       	ld	r24, Z
    1cf6:	f9 01       	movw	r30, r18
    1cf8:	e1 52       	subi	r30, 0x21	; 33
    1cfa:	fa 4f       	sbci	r31, 0xFA	; 250
    1cfc:	80 83       	st	Z, r24
long_index++;
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	8f 5f       	subi	r24, 0xFF	; 255
    1d02:	8a 83       	std	Y+2, r24	; 0x02
uint8_t long_index;
uint8_t index = long_pointer+1;
long_index=0;

/* parse Longitude in GGA string stored in buffer */
for( ; GGA_Buffer[index]!=','; index++){
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	8f 5f       	subi	r24, 0xFF	; 255
    1d08:	89 83       	std	Y+1, r24	; 0x01
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	88 2f       	mov	r24, r24
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	fc 01       	movw	r30, r24
    1d12:	eb 5c       	subi	r30, 0xCB	; 203
    1d14:	fa 4f       	sbci	r31, 0xFA	; 250
    1d16:	80 81       	ld	r24, Z
    1d18:	8c 32       	cpi	r24, 0x2C	; 44
    1d1a:	19 f7       	brne	.-58     	; 0x1ce2 <get_longitude+0x1c>
Longitude_Buffer[long_index]= GGA_Buffer[index];
long_index++;
}

Longitude_Buffer[long_index++] = GGA_Buffer[index++];
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	88 2f       	mov	r24, r24
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	fc 01       	movw	r30, r24
    1d2a:	eb 5c       	subi	r30, 0xCB	; 203
    1d2c:	fa 4f       	sbci	r31, 0xFA	; 250
    1d2e:	80 81       	ld	r24, Z
    1d30:	f9 01       	movw	r30, r18
    1d32:	e1 52       	subi	r30, 0x21	; 33
    1d34:	fa 4f       	sbci	r31, 0xFA	; 250
    1d36:	80 83       	st	Z, r24
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	8f 5f       	subi	r24, 0xFF	; 255
    1d3c:	8a 83       	std	Y+2, r24	; 0x02
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	8f 5f       	subi	r24, 0xFF	; 255
    1d42:	89 83       	std	Y+1, r24	; 0x01
Longitude_Buffer[long_index] = GGA_Buffer[index]; /* get direction */
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	28 2f       	mov	r18, r24
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	88 2f       	mov	r24, r24
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	fc 01       	movw	r30, r24
    1d52:	eb 5c       	subi	r30, 0xCB	; 203
    1d54:	fa 4f       	sbci	r31, 0xFA	; 250
    1d56:	80 81       	ld	r24, Z
    1d58:	f9 01       	movw	r30, r18
    1d5a:	e1 52       	subi	r30, 0x21	; 33
    1d5c:	fa 4f       	sbci	r31, 0xFA	; 250
    1d5e:	80 83       	st	Z, r24
convert_to_degrees(Longitude_Buffer);
    1d60:	8f ed       	ldi	r24, 0xDF	; 223
    1d62:	95 e0       	ldi	r25, 0x05	; 5
    1d64:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <convert_to_degrees>
sei();
    1d68:	78 94       	sei
}
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	08 95       	ret

00001d78 <get_altitude>:

void get_altitude(uint16_t alt_pointer){
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	00 d0       	rcall	.+0      	; 0x1d7e <get_altitude+0x6>
    1d7e:	00 d0       	rcall	.+0      	; 0x1d80 <get_altitude+0x8>
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
    1d84:	9c 83       	std	Y+4, r25	; 0x04
    1d86:	8b 83       	std	Y+3, r24	; 0x03
cli();
    1d88:	f8 94       	cli
uint8_t alt_index;
uint8_t index = alt_pointer+1;
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	8f 5f       	subi	r24, 0xFF	; 255
    1d8e:	89 83       	std	Y+1, r24	; 0x01
alt_index=0;
    1d90:	1a 82       	std	Y+2, r1	; 0x02
    1d92:	14 c0       	rjmp	.+40     	; 0x1dbc <get_altitude+0x44>
/* parse Altitude in GGA string stored in buffer */
for( ; GGA_Buffer[index]!=','; index++){
Altitude_Buffer[alt_index]= GGA_Buffer[index];
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	88 2f       	mov	r24, r24
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	fc 01       	movw	r30, r24
    1da2:	eb 5c       	subi	r30, 0xCB	; 203
    1da4:	fa 4f       	sbci	r31, 0xFA	; 250
    1da6:	80 81       	ld	r24, Z
    1da8:	f9 01       	movw	r30, r18
    1daa:	e9 5d       	subi	r30, 0xD9	; 217
    1dac:	f9 4f       	sbci	r31, 0xF9	; 249
    1dae:	80 83       	st	Z, r24
alt_index++;
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	8f 5f       	subi	r24, 0xFF	; 255
    1db4:	8a 83       	std	Y+2, r24	; 0x02
cli();
uint8_t alt_index;
uint8_t index = alt_pointer+1;
alt_index=0;
/* parse Altitude in GGA string stored in buffer */
for( ; GGA_Buffer[index]!=','; index++){
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	8f 5f       	subi	r24, 0xFF	; 255
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	88 2f       	mov	r24, r24
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	eb 5c       	subi	r30, 0xCB	; 203
    1dc6:	fa 4f       	sbci	r31, 0xFA	; 250
    1dc8:	80 81       	ld	r24, Z
    1dca:	8c 32       	cpi	r24, 0x2C	; 44
    1dcc:	19 f7       	brne	.-58     	; 0x1d94 <get_altitude+0x1c>
Altitude_Buffer[alt_index]= GGA_Buffer[index];
alt_index++;
}

Altitude_Buffer[alt_index] = GGA_Buffer[index+1];
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	88 2f       	mov	r24, r24
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	01 96       	adiw	r24, 0x01	; 1
    1ddc:	fc 01       	movw	r30, r24
    1dde:	eb 5c       	subi	r30, 0xCB	; 203
    1de0:	fa 4f       	sbci	r31, 0xFA	; 250
    1de2:	80 81       	ld	r24, Z
    1de4:	f9 01       	movw	r30, r18
    1de6:	e9 5d       	subi	r30, 0xD9	; 217
    1de8:	f9 4f       	sbci	r31, 0xF9	; 249
    1dea:	80 83       	st	Z, r24
sei();
    1dec:	78 94       	sei
}
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <convert_time_to_UTC>:
void convert_time_to_UTC()
{
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	2a 97       	sbiw	r28, 0x0a	; 10
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
unsigned int hour, min, sec;
uint32_t Time_value;

Time_value = atol(Time_Buffer); /* convert string to integer */
    1e10:	8e ee       	ldi	r24, 0xEE	; 238
    1e12:	95 e0       	ldi	r25, 0x05	; 5
    1e14:	0e 94 58 3a 	call	0x74b0	; 0x74b0 <atol>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	89 83       	std	Y+1, r24	; 0x01
    1e1e:	9a 83       	std	Y+2, r25	; 0x02
    1e20:	ab 83       	std	Y+3, r26	; 0x03
    1e22:	bc 83       	std	Y+4, r27	; 0x04
hour = (Time_value / 10000); /* extract hour from integer */
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	9a 81       	ldd	r25, Y+2	; 0x02
    1e28:	ab 81       	ldd	r26, Y+3	; 0x03
    1e2a:	bc 81       	ldd	r27, Y+4	; 0x04
    1e2c:	20 e1       	ldi	r18, 0x10	; 16
    1e2e:	37 e2       	ldi	r19, 0x27	; 39
    1e30:	40 e0       	ldi	r20, 0x00	; 0
    1e32:	50 e0       	ldi	r21, 0x00	; 0
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	0e 94 ac 39 	call	0x7358	; 0x7358 <__udivmodsi4>
    1e3c:	da 01       	movw	r26, r20
    1e3e:	c9 01       	movw	r24, r18
    1e40:	9a 87       	std	Y+10, r25	; 0x0a
    1e42:	89 87       	std	Y+9, r24	; 0x09
min = (Time_value % 10000) / 100; /* extract minute from integer */
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	9a 81       	ldd	r25, Y+2	; 0x02
    1e48:	ab 81       	ldd	r26, Y+3	; 0x03
    1e4a:	bc 81       	ldd	r27, Y+4	; 0x04
    1e4c:	20 e1       	ldi	r18, 0x10	; 16
    1e4e:	37 e2       	ldi	r19, 0x27	; 39
    1e50:	40 e0       	ldi	r20, 0x00	; 0
    1e52:	50 e0       	ldi	r21, 0x00	; 0
    1e54:	bc 01       	movw	r22, r24
    1e56:	cd 01       	movw	r24, r26
    1e58:	0e 94 ac 39 	call	0x7358	; 0x7358 <__udivmodsi4>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	24 e6       	ldi	r18, 0x64	; 100
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e0       	ldi	r20, 0x00	; 0
    1e66:	50 e0       	ldi	r21, 0x00	; 0
    1e68:	bc 01       	movw	r22, r24
    1e6a:	cd 01       	movw	r24, r26
    1e6c:	0e 94 ac 39 	call	0x7358	; 0x7358 <__udivmodsi4>
    1e70:	da 01       	movw	r26, r20
    1e72:	c9 01       	movw	r24, r18
    1e74:	98 87       	std	Y+8, r25	; 0x08
    1e76:	8f 83       	std	Y+7, r24	; 0x07
sec = (Time_value % 10000) % 100; /* extract second from integer*/
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7c:	ab 81       	ldd	r26, Y+3	; 0x03
    1e7e:	bc 81       	ldd	r27, Y+4	; 0x04
    1e80:	20 e1       	ldi	r18, 0x10	; 16
    1e82:	37 e2       	ldi	r19, 0x27	; 39
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	50 e0       	ldi	r21, 0x00	; 0
    1e88:	bc 01       	movw	r22, r24
    1e8a:	cd 01       	movw	r24, r26
    1e8c:	0e 94 ac 39 	call	0x7358	; 0x7358 <__udivmodsi4>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	24 e6       	ldi	r18, 0x64	; 100
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e0       	ldi	r20, 0x00	; 0
    1e9a:	50 e0       	ldi	r21, 0x00	; 0
    1e9c:	bc 01       	movw	r22, r24
    1e9e:	cd 01       	movw	r24, r26
    1ea0:	0e 94 ac 39 	call	0x7358	; 0x7358 <__udivmodsi4>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	9e 83       	std	Y+6, r25	; 0x06
    1eaa:	8d 83       	std	Y+5, r24	; 0x05

sprintf(Time_Buffer, "%d:%d:%d", hour,min,sec);
    1eac:	8d b7       	in	r24, 0x3d	; 61
    1eae:	9e b7       	in	r25, 0x3e	; 62
    1eb0:	0a 97       	sbiw	r24, 0x0a	; 10
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	9e bf       	out	0x3e, r25	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	8d bf       	out	0x3d, r24	; 61
    1ebc:	ed b7       	in	r30, 0x3d	; 61
    1ebe:	fe b7       	in	r31, 0x3e	; 62
    1ec0:	31 96       	adiw	r30, 0x01	; 1
    1ec2:	8e ee       	ldi	r24, 0xEE	; 238
    1ec4:	95 e0       	ldi	r25, 0x05	; 5
    1ec6:	91 83       	std	Z+1, r25	; 0x01
    1ec8:	80 83       	st	Z, r24
    1eca:	80 e6       	ldi	r24, 0x60	; 96
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	93 83       	std	Z+3, r25	; 0x03
    1ed0:	82 83       	std	Z+2, r24	; 0x02
    1ed2:	89 85       	ldd	r24, Y+9	; 0x09
    1ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed6:	95 83       	std	Z+5, r25	; 0x05
    1ed8:	84 83       	std	Z+4, r24	; 0x04
    1eda:	8f 81       	ldd	r24, Y+7	; 0x07
    1edc:	98 85       	ldd	r25, Y+8	; 0x08
    1ede:	97 83       	std	Z+7, r25	; 0x07
    1ee0:	86 83       	std	Z+6, r24	; 0x06
    1ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee6:	91 87       	std	Z+9, r25	; 0x09
    1ee8:	80 87       	std	Z+8, r24	; 0x08
    1eea:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <sprintf>
    1eee:	8d b7       	in	r24, 0x3d	; 61
    1ef0:	9e b7       	in	r25, 0x3e	; 62
    1ef2:	0a 96       	adiw	r24, 0x0a	; 10
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	9e bf       	out	0x3e, r25	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	8d bf       	out	0x3d, r24	; 61

}
    1efe:	2a 96       	adiw	r28, 0x0a	; 10
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	f8 94       	cli
    1f04:	de bf       	out	0x3e, r29	; 62
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	cd bf       	out	0x3d, r28	; 61
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	08 95       	ret

00001f10 <convert_to_degrees>:

void convert_to_degrees(char *raw){
    1f10:	0f 93       	push	r16
    1f12:	1f 93       	push	r17
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	66 97       	sbiw	r28, 0x16	; 22
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	9e 8b       	std	Y+22, r25	; 0x16
    1f2a:	8d 8b       	std	Y+21, r24	; 0x15
float decimal_value,temp;

int32_t degrees;

float position;
value = ratof(raw); /* convert string into float for conversion */
    1f2c:	8d 89       	ldd	r24, Y+21	; 0x15
    1f2e:	9e 89       	ldd	r25, Y+22	; 0x16
    1f30:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <ratof>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	89 8b       	std	Y+17, r24	; 0x11
    1f3a:	9a 8b       	std	Y+18, r25	; 0x12
    1f3c:	ab 8b       	std	Y+19, r26	; 0x13
    1f3e:	bc 8b       	std	Y+20, r27	; 0x14

/* convert raw latitude/longitude into degree format */
decimal_value = (value/100);
    1f40:	69 89       	ldd	r22, Y+17	; 0x11
    1f42:	7a 89       	ldd	r23, Y+18	; 0x12
    1f44:	8b 89       	ldd	r24, Y+19	; 0x13
    1f46:	9c 89       	ldd	r25, Y+20	; 0x14
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	48 ec       	ldi	r20, 0xC8	; 200
    1f4e:	52 e4       	ldi	r21, 0x42	; 66
    1f50:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	8d 87       	std	Y+13, r24	; 0x0d
    1f5a:	9e 87       	std	Y+14, r25	; 0x0e
    1f5c:	af 87       	std	Y+15, r26	; 0x0f
    1f5e:	b8 8b       	std	Y+16, r27	; 0x10
degrees = (int)(decimal_value);
    1f60:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f62:	7e 85       	ldd	r23, Y+14	; 0x0e
    1f64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f66:	98 89       	ldd	r25, Y+16	; 0x10
    1f68:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	aa 27       	eor	r26, r26
    1f72:	97 fd       	sbrc	r25, 7
    1f74:	a0 95       	com	r26
    1f76:	ba 2f       	mov	r27, r26
    1f78:	8d 83       	std	Y+5, r24	; 0x05
    1f7a:	9e 83       	std	Y+6, r25	; 0x06
    1f7c:	af 83       	std	Y+7, r26	; 0x07
    1f7e:	b8 87       	std	Y+8, r27	; 0x08
temp = (decimal_value - (int)decimal_value)/0.6;
    1f80:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f82:	7e 85       	ldd	r23, Y+14	; 0x0e
    1f84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f86:	98 89       	ldd	r25, Y+16	; 0x10
    1f88:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	aa 27       	eor	r26, r26
    1f92:	97 fd       	sbrc	r25, 7
    1f94:	a0 95       	com	r26
    1f96:	ba 2f       	mov	r27, r26
    1f98:	bc 01       	movw	r22, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatsisf>
    1fa0:	9b 01       	movw	r18, r22
    1fa2:	ac 01       	movw	r20, r24
    1fa4:	6d 85       	ldd	r22, Y+13	; 0x0d
    1fa6:	7e 85       	ldd	r23, Y+14	; 0x0e
    1fa8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1faa:	98 89       	ldd	r25, Y+16	; 0x10
    1fac:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	bc 01       	movw	r22, r24
    1fb6:	cd 01       	movw	r24, r26
    1fb8:	2a e9       	ldi	r18, 0x9A	; 154
    1fba:	39 e9       	ldi	r19, 0x99	; 153
    1fbc:	49 e1       	ldi	r20, 0x19	; 25
    1fbe:	5f e3       	ldi	r21, 0x3F	; 63
    1fc0:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	89 87       	std	Y+9, r24	; 0x09
    1fca:	9a 87       	std	Y+10, r25	; 0x0a
    1fcc:	ab 87       	std	Y+11, r26	; 0x0b
    1fce:	bc 87       	std	Y+12, r27	; 0x0c
position = (float)degrees + temp;
    1fd0:	6d 81       	ldd	r22, Y+5	; 0x05
    1fd2:	7e 81       	ldd	r23, Y+6	; 0x06
    1fd4:	8f 81       	ldd	r24, Y+7	; 0x07
    1fd6:	98 85       	ldd	r25, Y+8	; 0x08
    1fd8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatsisf>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	bc 01       	movw	r22, r24
    1fe2:	cd 01       	movw	r24, r26
    1fe4:	29 85       	ldd	r18, Y+9	; 0x09
    1fe6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fe8:	4b 85       	ldd	r20, Y+11	; 0x0b
    1fea:	5c 85       	ldd	r21, Y+12	; 0x0c
    1fec:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	9a 83       	std	Y+2, r25	; 0x02
    1ff8:	ab 83       	std	Y+3, r26	; 0x03
    1ffa:	bc 83       	std	Y+4, r27	; 0x04

dtostrf(position, 6, 4, degrees_buffer); /* convert float value into string */
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    2000:	ab 81       	ldd	r26, Y+3	; 0x03
    2002:	bc 81       	ldd	r27, Y+4	; 0x04
    2004:	eb ec       	ldi	r30, 0xCB	; 203
    2006:	f5 e0       	ldi	r31, 0x05	; 5
    2008:	bc 01       	movw	r22, r24
    200a:	cd 01       	movw	r24, r26
    200c:	46 e0       	ldi	r20, 0x06	; 6
    200e:	24 e0       	ldi	r18, 0x04	; 4
    2010:	8f 01       	movw	r16, r30
    2012:	0e 94 19 3a 	call	0x7432	; 0x7432 <dtostrf>
}
    2016:	66 96       	adiw	r28, 0x16	; 22
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	1f 91       	pop	r17
    2028:	0f 91       	pop	r16
    202a:	08 95       	ret

0000202c <Read_Response>:
 uint32_t TimeOut = 0;
char RESPONSE_BUFFER[DEFAULT_BUFFER_SIZE];


void Read_Response()								/* Read response */
{
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	a6 97       	sbiw	r28, 0x26	; 38
    2036:	0f b6       	in	r0, 0x3f	; 63
    2038:	f8 94       	cli
    203a:	de bf       	out	0x3e, r29	; 62
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	cd bf       	out	0x3d, r28	; 61
	static char CRLF_BUF[2];
	static char CRLF_FOUND;
	uint32_t TimeCount = 0, ResponseBufferLength;
    2040:	1b a2       	std	Y+35, r1	; 0x23
    2042:	1c a2       	std	Y+36, r1	; 0x24
    2044:	1d a2       	std	Y+37, r1	; 0x25
    2046:	1e a2       	std	Y+38, r1	; 0x26
	while(1)
	{
		if(TimeCount >= (DEFAULT_TIMEOUT+TimeOut))	/* Check timecount each time */
    2048:	80 91 26 05 	lds	r24, 0x0526
    204c:	90 91 27 05 	lds	r25, 0x0527
    2050:	a0 91 28 05 	lds	r26, 0x0528
    2054:	b0 91 29 05 	lds	r27, 0x0529
    2058:	9c 01       	movw	r18, r24
    205a:	ad 01       	movw	r20, r26
    205c:	20 5f       	subi	r18, 0xF0	; 240
    205e:	38 4d       	sbci	r19, 0xD8	; 216
    2060:	4f 4f       	sbci	r20, 0xFF	; 255
    2062:	5f 4f       	sbci	r21, 0xFF	; 255
    2064:	8b a1       	ldd	r24, Y+35	; 0x23
    2066:	9c a1       	ldd	r25, Y+36	; 0x24
    2068:	ad a1       	ldd	r26, Y+37	; 0x25
    206a:	be a1       	ldd	r27, Y+38	; 0x26
    206c:	82 17       	cp	r24, r18
    206e:	93 07       	cpc	r25, r19
    2070:	a4 07       	cpc	r26, r20
    2072:	b5 07       	cpc	r27, r21
    2074:	70 f0       	brcs	.+28     	; 0x2092 <Read_Response+0x66>
		{
			CRLF_COUNT = 0; TimeOut = 0;
    2076:	10 92 23 05 	sts	0x0523, r1
    207a:	10 92 26 05 	sts	0x0526, r1
    207e:	10 92 27 05 	sts	0x0527, r1
    2082:	10 92 28 05 	sts	0x0528, r1
    2086:	10 92 29 05 	sts	0x0529, r1
			Response_Status = SIM900_RESPONSE_TIMEOUT;/* if its overflowed then make status timeout and return */
    208a:	82 e0       	ldi	r24, 0x02	; 2
    208c:	80 93 f7 06 	sts	0x06F7, r24
    2090:	85 c1       	rjmp	.+778    	; 0x239c <Read_Response+0x370>
			return;
		}

		if(Response_Status == SIM900_RESPONSE_STARTING)
    2092:	80 91 f7 06 	lds	r24, 0x06F7
    2096:	84 30       	cpi	r24, 0x04	; 4
    2098:	61 f4       	brne	.+24     	; 0x20b2 <Read_Response+0x86>
		{
			CRLF_FOUND = 0;
    209a:	10 92 2a 05 	sts	0x052A, r1
			memset(CRLF_BUF, 0, 2);
    209e:	8b e2       	ldi	r24, 0x2B	; 43
    20a0:	95 e0       	ldi	r25, 0x05	; 5
    20a2:	60 e0       	ldi	r22, 0x00	; 0
    20a4:	70 e0       	ldi	r23, 0x00	; 0
    20a6:	42 e0       	ldi	r20, 0x02	; 2
    20a8:	50 e0       	ldi	r21, 0x00	; 0
    20aa:	0e 94 9a 3a 	call	0x7534	; 0x7534 <memset>
			Response_Status = SIM900_RESPONSE_WAITING;/* Make status waiting while reading */
    20ae:	10 92 f7 06 	sts	0x06F7, r1
		}
		ResponseBufferLength = strlen(RESPONSE_BUFFER);
    20b2:	8f e2       	ldi	r24, 0x2F	; 47
    20b4:	96 e0       	ldi	r25, 0x06	; 6
    20b6:	0e 94 a1 3a 	call	0x7542	; 0x7542 <strlen>
    20ba:	cc 01       	movw	r24, r24
    20bc:	a0 e0       	ldi	r26, 0x00	; 0
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	8f 8f       	std	Y+31, r24	; 0x1f
    20c2:	98 a3       	std	Y+32, r25	; 0x20
    20c4:	a9 a3       	std	Y+33, r26	; 0x21
    20c6:	ba a3       	std	Y+34, r27	; 0x22
		if (ResponseBufferLength)
    20c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20ca:	98 a1       	ldd	r25, Y+32	; 0x20
    20cc:	a9 a1       	ldd	r26, Y+33	; 0x21
    20ce:	ba a1       	ldd	r27, Y+34	; 0x22
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	a1 05       	cpc	r26, r1
    20d4:	b1 05       	cpc	r27, r1
    20d6:	09 f4       	brne	.+2      	; 0x20da <Read_Response+0xae>
    20d8:	e3 c0       	rjmp	.+454    	; 0x22a0 <Read_Response+0x274>
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	a0 e8       	ldi	r26, 0x80	; 128
    20e0:	bf e3       	ldi	r27, 0x3F	; 63
    20e2:	89 8f       	std	Y+25, r24	; 0x19
    20e4:	9a 8f       	std	Y+26, r25	; 0x1a
    20e6:	ab 8f       	std	Y+27, r26	; 0x1b
    20e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ea:	69 8d       	ldd	r22, Y+25	; 0x19
    20ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	4a ef       	ldi	r20, 0xFA	; 250
    20f8:	54 e4       	ldi	r21, 0x44	; 68
    20fa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	8d 8b       	std	Y+21, r24	; 0x15
    2104:	9e 8b       	std	Y+22, r25	; 0x16
    2106:	af 8b       	std	Y+23, r26	; 0x17
    2108:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    210a:	6d 89       	ldd	r22, Y+21	; 0x15
    210c:	7e 89       	ldd	r23, Y+22	; 0x16
    210e:	8f 89       	ldd	r24, Y+23	; 0x17
    2110:	98 8d       	ldd	r25, Y+24	; 0x18
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e8       	ldi	r20, 0x80	; 128
    2118:	5f e3       	ldi	r21, 0x3F	; 63
    211a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    211e:	88 23       	and	r24, r24
    2120:	2c f4       	brge	.+10     	; 0x212c <Read_Response+0x100>
		__ticks = 1;
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	9c 8b       	std	Y+20, r25	; 0x14
    2128:	8b 8b       	std	Y+19, r24	; 0x13
    212a:	3f c0       	rjmp	.+126    	; 0x21aa <Read_Response+0x17e>
	else if (__tmp > 65535)
    212c:	6d 89       	ldd	r22, Y+21	; 0x15
    212e:	7e 89       	ldd	r23, Y+22	; 0x16
    2130:	8f 89       	ldd	r24, Y+23	; 0x17
    2132:	98 8d       	ldd	r25, Y+24	; 0x18
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	3f ef       	ldi	r19, 0xFF	; 255
    2138:	4f e7       	ldi	r20, 0x7F	; 127
    213a:	57 e4       	ldi	r21, 0x47	; 71
    213c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2140:	18 16       	cp	r1, r24
    2142:	4c f5       	brge	.+82     	; 0x2196 <Read_Response+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2144:	69 8d       	ldd	r22, Y+25	; 0x19
    2146:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2148:	8b 8d       	ldd	r24, Y+27	; 0x1b
    214a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e2       	ldi	r20, 0x20	; 32
    2152:	51 e4       	ldi	r21, 0x41	; 65
    2154:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	bc 01       	movw	r22, r24
    215e:	cd 01       	movw	r24, r26
    2160:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	9c 8b       	std	Y+20, r25	; 0x14
    216a:	8b 8b       	std	Y+19, r24	; 0x13
    216c:	0f c0       	rjmp	.+30     	; 0x218c <Read_Response+0x160>
    216e:	88 ec       	ldi	r24, 0xC8	; 200
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	9a 8b       	std	Y+18, r25	; 0x12
    2174:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2176:	89 89       	ldd	r24, Y+17	; 0x11
    2178:	9a 89       	ldd	r25, Y+18	; 0x12
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	f1 f7       	brne	.-4      	; 0x217a <Read_Response+0x14e>
    217e:	9a 8b       	std	Y+18, r25	; 0x12
    2180:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2182:	8b 89       	ldd	r24, Y+19	; 0x13
    2184:	9c 89       	ldd	r25, Y+20	; 0x14
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	9c 8b       	std	Y+20, r25	; 0x14
    218a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218c:	8b 89       	ldd	r24, Y+19	; 0x13
    218e:	9c 89       	ldd	r25, Y+20	; 0x14
    2190:	00 97       	sbiw	r24, 0x00	; 0
    2192:	69 f7       	brne	.-38     	; 0x216e <Read_Response+0x142>
    2194:	14 c0       	rjmp	.+40     	; 0x21be <Read_Response+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2196:	6d 89       	ldd	r22, Y+21	; 0x15
    2198:	7e 89       	ldd	r23, Y+22	; 0x16
    219a:	8f 89       	ldd	r24, Y+23	; 0x17
    219c:	98 8d       	ldd	r25, Y+24	; 0x18
    219e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	9c 8b       	std	Y+20, r25	; 0x14
    21a8:	8b 8b       	std	Y+19, r24	; 0x13
    21aa:	8b 89       	ldd	r24, Y+19	; 0x13
    21ac:	9c 89       	ldd	r25, Y+20	; 0x14
    21ae:	98 8b       	std	Y+16, r25	; 0x10
    21b0:	8f 87       	std	Y+15, r24	; 0x0f
    21b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b4:	98 89       	ldd	r25, Y+16	; 0x10
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <Read_Response+0x18a>
    21ba:	98 8b       	std	Y+16, r25	; 0x10
    21bc:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(1);
			TimeCount++;
    21be:	8b a1       	ldd	r24, Y+35	; 0x23
    21c0:	9c a1       	ldd	r25, Y+36	; 0x24
    21c2:	ad a1       	ldd	r26, Y+37	; 0x25
    21c4:	be a1       	ldd	r27, Y+38	; 0x26
    21c6:	01 96       	adiw	r24, 0x01	; 1
    21c8:	a1 1d       	adc	r26, r1
    21ca:	b1 1d       	adc	r27, r1
    21cc:	8b a3       	std	Y+35, r24	; 0x23
    21ce:	9c a3       	std	Y+36, r25	; 0x24
    21d0:	ad a3       	std	Y+37, r26	; 0x25
    21d2:	be a3       	std	Y+38, r27	; 0x26
			if (ResponseBufferLength==strlen(RESPONSE_BUFFER))
    21d4:	8f e2       	ldi	r24, 0x2F	; 47
    21d6:	96 e0       	ldi	r25, 0x06	; 6
    21d8:	0e 94 a1 3a 	call	0x7542	; 0x7542 <strlen>
    21dc:	9c 01       	movw	r18, r24
    21de:	40 e0       	ldi	r20, 0x00	; 0
    21e0:	50 e0       	ldi	r21, 0x00	; 0
    21e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21e4:	98 a1       	ldd	r25, Y+32	; 0x20
    21e6:	a9 a1       	ldd	r26, Y+33	; 0x21
    21e8:	ba a1       	ldd	r27, Y+34	; 0x22
    21ea:	28 17       	cp	r18, r24
    21ec:	39 07       	cpc	r19, r25
    21ee:	4a 07       	cpc	r20, r26
    21f0:	5b 07       	cpc	r21, r27
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <Read_Response+0x1ca>
    21f4:	55 c0       	rjmp	.+170    	; 0x22a0 <Read_Response+0x274>
			{
				for (uint16_t i=0;i<ResponseBufferLength;i++)
    21f6:	1e 8e       	std	Y+30, r1	; 0x1e
    21f8:	1d 8e       	std	Y+29, r1	; 0x1d
    21fa:	41 c0       	rjmp	.+130    	; 0x227e <Read_Response+0x252>
				{
					memmove(CRLF_BUF, CRLF_BUF + 1, 1);
    21fc:	8b e2       	ldi	r24, 0x2B	; 43
    21fe:	95 e0       	ldi	r25, 0x05	; 5
    2200:	2c e2       	ldi	r18, 0x2C	; 44
    2202:	35 e0       	ldi	r19, 0x05	; 5
    2204:	b9 01       	movw	r22, r18
    2206:	41 e0       	ldi	r20, 0x01	; 1
    2208:	50 e0       	ldi	r21, 0x00	; 0
    220a:	0e 94 88 3a 	call	0x7510	; 0x7510 <memmove>
					CRLF_BUF[1] = RESPONSE_BUFFER[i];
    220e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2210:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2212:	fc 01       	movw	r30, r24
    2214:	e1 5d       	subi	r30, 0xD1	; 209
    2216:	f9 4f       	sbci	r31, 0xF9	; 249
    2218:	80 81       	ld	r24, Z
    221a:	80 93 2c 05 	sts	0x052C, r24
					if(!strncmp(CRLF_BUF, "\r\n", 2))
    221e:	8b e2       	ldi	r24, 0x2B	; 43
    2220:	95 e0       	ldi	r25, 0x05	; 5
    2222:	29 e6       	ldi	r18, 0x69	; 105
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	b9 01       	movw	r22, r18
    2228:	42 e0       	ldi	r20, 0x02	; 2
    222a:	50 e0       	ldi	r21, 0x00	; 0
    222c:	0e 94 aa 3a 	call	0x7554	; 0x7554 <strncmp>
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	01 f5       	brne	.+64     	; 0x2274 <Read_Response+0x248>
					{
						if(++CRLF_FOUND == (DEFAULT_CRLF_COUNT+CRLF_COUNT))
    2234:	80 91 2a 05 	lds	r24, 0x052A
    2238:	8f 5f       	subi	r24, 0xFF	; 255
    223a:	80 93 2a 05 	sts	0x052A, r24
    223e:	80 91 2a 05 	lds	r24, 0x052A
    2242:	28 2f       	mov	r18, r24
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	80 91 23 05 	lds	r24, 0x0523
    224a:	99 27       	eor	r25, r25
    224c:	87 fd       	sbrc	r24, 7
    224e:	90 95       	com	r25
    2250:	02 96       	adiw	r24, 0x02	; 2
    2252:	28 17       	cp	r18, r24
    2254:	39 07       	cpc	r19, r25
    2256:	71 f4       	brne	.+28     	; 0x2274 <Read_Response+0x248>
						{
							CRLF_COUNT = 0; TimeOut = 0;
    2258:	10 92 23 05 	sts	0x0523, r1
    225c:	10 92 26 05 	sts	0x0526, r1
    2260:	10 92 27 05 	sts	0x0527, r1
    2264:	10 92 28 05 	sts	0x0528, r1
    2268:	10 92 29 05 	sts	0x0529, r1
							Response_Status = SIM900_RESPONSE_FINISHED;
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	80 93 f7 06 	sts	0x06F7, r24
    2272:	94 c0       	rjmp	.+296    	; 0x239c <Read_Response+0x370>
		{
			_delay_ms(1);
			TimeCount++;
			if (ResponseBufferLength==strlen(RESPONSE_BUFFER))
			{
				for (uint16_t i=0;i<ResponseBufferLength;i++)
    2274:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2276:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2278:	01 96       	adiw	r24, 0x01	; 1
    227a:	9e 8f       	std	Y+30, r25	; 0x1e
    227c:	8d 8f       	std	Y+29, r24	; 0x1d
    227e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2280:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2282:	9c 01       	movw	r18, r24
    2284:	40 e0       	ldi	r20, 0x00	; 0
    2286:	50 e0       	ldi	r21, 0x00	; 0
    2288:	8f 8d       	ldd	r24, Y+31	; 0x1f
    228a:	98 a1       	ldd	r25, Y+32	; 0x20
    228c:	a9 a1       	ldd	r26, Y+33	; 0x21
    228e:	ba a1       	ldd	r27, Y+34	; 0x22
    2290:	28 17       	cp	r18, r24
    2292:	39 07       	cpc	r19, r25
    2294:	4a 07       	cpc	r20, r26
    2296:	5b 07       	cpc	r21, r27
    2298:	08 f4       	brcc	.+2      	; 0x229c <Read_Response+0x270>
    229a:	b0 cf       	rjmp	.-160    	; 0x21fc <Read_Response+0x1d0>
							Response_Status = SIM900_RESPONSE_FINISHED;
							return;
						}
					}
				}
				CRLF_FOUND = 0;
    229c:	10 92 2a 05 	sts	0x052A, r1
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	a0 e8       	ldi	r26, 0x80	; 128
    22a6:	bf e3       	ldi	r27, 0x3F	; 63
    22a8:	8b 87       	std	Y+11, r24	; 0x0b
    22aa:	9c 87       	std	Y+12, r25	; 0x0c
    22ac:	ad 87       	std	Y+13, r26	; 0x0d
    22ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	4a ef       	ldi	r20, 0xFA	; 250
    22be:	54 e4       	ldi	r21, 0x44	; 68
    22c0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	8f 83       	std	Y+7, r24	; 0x07
    22ca:	98 87       	std	Y+8, r25	; 0x08
    22cc:	a9 87       	std	Y+9, r26	; 0x09
    22ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22d0:	6f 81       	ldd	r22, Y+7	; 0x07
    22d2:	78 85       	ldd	r23, Y+8	; 0x08
    22d4:	89 85       	ldd	r24, Y+9	; 0x09
    22d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e8       	ldi	r20, 0x80	; 128
    22de:	5f e3       	ldi	r21, 0x3F	; 63
    22e0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    22e4:	88 23       	and	r24, r24
    22e6:	2c f4       	brge	.+10     	; 0x22f2 <Read_Response+0x2c6>
		__ticks = 1;
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	9e 83       	std	Y+6, r25	; 0x06
    22ee:	8d 83       	std	Y+5, r24	; 0x05
    22f0:	3f c0       	rjmp	.+126    	; 0x2370 <Read_Response+0x344>
	else if (__tmp > 65535)
    22f2:	6f 81       	ldd	r22, Y+7	; 0x07
    22f4:	78 85       	ldd	r23, Y+8	; 0x08
    22f6:	89 85       	ldd	r24, Y+9	; 0x09
    22f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	3f ef       	ldi	r19, 0xFF	; 255
    22fe:	4f e7       	ldi	r20, 0x7F	; 127
    2300:	57 e4       	ldi	r21, 0x47	; 71
    2302:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2306:	18 16       	cp	r1, r24
    2308:	4c f5       	brge	.+82     	; 0x235c <Read_Response+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230a:	6b 85       	ldd	r22, Y+11	; 0x0b
    230c:	7c 85       	ldd	r23, Y+12	; 0x0c
    230e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2310:	9e 85       	ldd	r25, Y+14	; 0x0e
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	40 e2       	ldi	r20, 0x20	; 32
    2318:	51 e4       	ldi	r21, 0x41	; 65
    231a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	bc 01       	movw	r22, r24
    2324:	cd 01       	movw	r24, r26
    2326:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	9e 83       	std	Y+6, r25	; 0x06
    2330:	8d 83       	std	Y+5, r24	; 0x05
    2332:	0f c0       	rjmp	.+30     	; 0x2352 <Read_Response+0x326>
    2334:	88 ec       	ldi	r24, 0xC8	; 200
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	9c 83       	std	Y+4, r25	; 0x04
    233a:	8b 83       	std	Y+3, r24	; 0x03
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	9c 81       	ldd	r25, Y+4	; 0x04
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	f1 f7       	brne	.-4      	; 0x2340 <Read_Response+0x314>
    2344:	9c 83       	std	Y+4, r25	; 0x04
    2346:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2348:	8d 81       	ldd	r24, Y+5	; 0x05
    234a:	9e 81       	ldd	r25, Y+6	; 0x06
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	9e 83       	std	Y+6, r25	; 0x06
    2350:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2352:	8d 81       	ldd	r24, Y+5	; 0x05
    2354:	9e 81       	ldd	r25, Y+6	; 0x06
    2356:	00 97       	sbiw	r24, 0x00	; 0
    2358:	69 f7       	brne	.-38     	; 0x2334 <Read_Response+0x308>
    235a:	14 c0       	rjmp	.+40     	; 0x2384 <Read_Response+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235c:	6f 81       	ldd	r22, Y+7	; 0x07
    235e:	78 85       	ldd	r23, Y+8	; 0x08
    2360:	89 85       	ldd	r24, Y+9	; 0x09
    2362:	9a 85       	ldd	r25, Y+10	; 0x0a
    2364:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	9e 83       	std	Y+6, r25	; 0x06
    236e:	8d 83       	std	Y+5, r24	; 0x05
    2370:	8d 81       	ldd	r24, Y+5	; 0x05
    2372:	9e 81       	ldd	r25, Y+6	; 0x06
    2374:	9a 83       	std	Y+2, r25	; 0x02
    2376:	89 83       	std	Y+1, r24	; 0x01
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	9a 81       	ldd	r25, Y+2	; 0x02
    237c:	01 97       	sbiw	r24, 0x01	; 1
    237e:	f1 f7       	brne	.-4      	; 0x237c <Read_Response+0x350>
    2380:	9a 83       	std	Y+2, r25	; 0x02
    2382:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		_delay_ms(1);
		TimeCount++;
    2384:	8b a1       	ldd	r24, Y+35	; 0x23
    2386:	9c a1       	ldd	r25, Y+36	; 0x24
    2388:	ad a1       	ldd	r26, Y+37	; 0x25
    238a:	be a1       	ldd	r27, Y+38	; 0x26
    238c:	01 96       	adiw	r24, 0x01	; 1
    238e:	a1 1d       	adc	r26, r1
    2390:	b1 1d       	adc	r27, r1
    2392:	8b a3       	std	Y+35, r24	; 0x23
    2394:	9c a3       	std	Y+36, r25	; 0x24
    2396:	ad a3       	std	Y+37, r26	; 0x25
    2398:	be a3       	std	Y+38, r27	; 0x26
    239a:	56 ce       	rjmp	.-852    	; 0x2048 <Read_Response+0x1c>
	}
}
    239c:	a6 96       	adiw	r28, 0x26	; 38
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	08 95       	ret

000023ae <Start_Read_Response>:

void Start_Read_Response()
{
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
	Response_Status = SIM900_RESPONSE_STARTING;
    23b6:	84 e0       	ldi	r24, 0x04	; 4
    23b8:	80 93 f7 06 	sts	0x06F7, r24
	do {
		Read_Response();
    23bc:	0e 94 16 10 	call	0x202c	; 0x202c <Read_Response>
	} while(Response_Status == SIM900_RESPONSE_WAITING);/* Read response till response is waiting */
    23c0:	80 91 f7 06 	lds	r24, 0x06F7
    23c4:	88 23       	and	r24, r24
    23c6:	d1 f3       	breq	.-12     	; 0x23bc <Start_Read_Response+0xe>
}
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <Buffer_Flush>:

void Buffer_Flush()								/* Flush all variables */
{
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
	memset(RESPONSE_BUFFER, 0, DEFAULT_BUFFER_SIZE-1);
    23d6:	8f e2       	ldi	r24, 0x2F	; 47
    23d8:	96 e0       	ldi	r25, 0x06	; 6
    23da:	60 e0       	ldi	r22, 0x00	; 0
    23dc:	70 e0       	ldi	r23, 0x00	; 0
    23de:	47 ec       	ldi	r20, 0xC7	; 199
    23e0:	50 e0       	ldi	r21, 0x00	; 0
    23e2:	0e 94 9a 3a 	call	0x7534	; 0x7534 <memset>
	Counter=0;
    23e6:	10 92 25 05 	sts	0x0525, r1
    23ea:	10 92 24 05 	sts	0x0524, r1
}
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <GetResponseBody>:

/* Remove CRLF and other default strings from response */
void GetResponseBody(char* Response, uint16_t ResponseLength)
{
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	2d 97       	sbiw	r28, 0x0d	; 13
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
    2408:	9b 87       	std	Y+11, r25	; 0x0b
    240a:	8a 87       	std	Y+10, r24	; 0x0a
    240c:	7d 87       	std	Y+13, r23	; 0x0d
    240e:	6c 87       	std	Y+12, r22	; 0x0c
	uint16_t i = 12;
    2410:	8c e0       	ldi	r24, 0x0C	; 12
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	9c 83       	std	Y+4, r25	; 0x04
    2416:	8b 83       	std	Y+3, r24	; 0x03
    2418:	05 c0       	rjmp	.+10     	; 0x2424 <GetResponseBody+0x30>
	char buffer[5];
	while(Response[i] != '\r' && i < 100)
		++i;
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	9c 81       	ldd	r25, Y+4	; 0x04
    241e:	01 96       	adiw	r24, 0x01	; 1
    2420:	9c 83       	std	Y+4, r25	; 0x04
    2422:	8b 83       	std	Y+3, r24	; 0x03
/* Remove CRLF and other default strings from response */
void GetResponseBody(char* Response, uint16_t ResponseLength)
{
	uint16_t i = 12;
	char buffer[5];
	while(Response[i] != '\r' && i < 100)
    2424:	2a 85       	ldd	r18, Y+10	; 0x0a
    2426:	3b 85       	ldd	r19, Y+11	; 0x0b
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	9c 81       	ldd	r25, Y+4	; 0x04
    242c:	f9 01       	movw	r30, r18
    242e:	e8 0f       	add	r30, r24
    2430:	f9 1f       	adc	r31, r25
    2432:	80 81       	ld	r24, Z
    2434:	8d 30       	cpi	r24, 0x0D	; 13
    2436:	29 f0       	breq	.+10     	; 0x2442 <GetResponseBody+0x4e>
    2438:	8b 81       	ldd	r24, Y+3	; 0x03
    243a:	9c 81       	ldd	r25, Y+4	; 0x04
    243c:	84 36       	cpi	r24, 0x64	; 100
    243e:	91 05       	cpc	r25, r1
    2440:	60 f3       	brcs	.-40     	; 0x241a <GetResponseBody+0x26>
		++i;

	strncpy(buffer, Response + 12, (i - 12));
    2442:	8a 85       	ldd	r24, Y+10	; 0x0a
    2444:	9b 85       	ldd	r25, Y+11	; 0x0b
    2446:	ac 01       	movw	r20, r24
    2448:	44 5f       	subi	r20, 0xF4	; 244
    244a:	5f 4f       	sbci	r21, 0xFF	; 255
    244c:	8b 81       	ldd	r24, Y+3	; 0x03
    244e:	9c 81       	ldd	r25, Y+4	; 0x04
    2450:	9c 01       	movw	r18, r24
    2452:	2c 50       	subi	r18, 0x0C	; 12
    2454:	30 40       	sbci	r19, 0x00	; 0
    2456:	ce 01       	movw	r24, r28
    2458:	05 96       	adiw	r24, 0x05	; 5
    245a:	ba 01       	movw	r22, r20
    245c:	a9 01       	movw	r20, r18
    245e:	0e 94 b8 3a 	call	0x7570	; 0x7570 <strncpy>
	ResponseLength = atoi(buffer);
    2462:	ce 01       	movw	r24, r28
    2464:	05 96       	adiw	r24, 0x05	; 5
    2466:	0e 94 3a 3a 	call	0x7474	; 0x7474 <atoi>
    246a:	9d 87       	std	Y+13, r25	; 0x0d
    246c:	8c 87       	std	Y+12, r24	; 0x0c

	i += 2;
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	9c 81       	ldd	r25, Y+4	; 0x04
    2472:	02 96       	adiw	r24, 0x02	; 2
    2474:	9c 83       	std	Y+4, r25	; 0x04
    2476:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t tmp = strlen(Response) - i;
    2478:	8a 85       	ldd	r24, Y+10	; 0x0a
    247a:	9b 85       	ldd	r25, Y+11	; 0x0b
    247c:	0e 94 a1 3a 	call	0x7542	; 0x7542 <strlen>
    2480:	9c 01       	movw	r18, r24
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	9c 81       	ldd	r25, Y+4	; 0x04
    2486:	a9 01       	movw	r20, r18
    2488:	48 1b       	sub	r20, r24
    248a:	59 0b       	sbc	r21, r25
    248c:	ca 01       	movw	r24, r20
    248e:	9a 83       	std	Y+2, r25	; 0x02
    2490:	89 83       	std	Y+1, r24	; 0x01
	memcpy(Response, Response + i, tmp);
    2492:	2a 85       	ldd	r18, Y+10	; 0x0a
    2494:	3b 85       	ldd	r19, Y+11	; 0x0b
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	9c 81       	ldd	r25, Y+4	; 0x04
    249a:	a9 01       	movw	r20, r18
    249c:	48 0f       	add	r20, r24
    249e:	59 1f       	adc	r21, r25
    24a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    24a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    24a4:	29 81       	ldd	r18, Y+1	; 0x01
    24a6:	3a 81       	ldd	r19, Y+2	; 0x02
    24a8:	ba 01       	movw	r22, r20
    24aa:	a9 01       	movw	r20, r18
    24ac:	0e 94 7f 3a 	call	0x74fe	; 0x74fe <memcpy>

	if(!strncmp(Response + tmp - 6, "\r\nOK\r\n", 6))
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	9a 81       	ldd	r25, Y+2	; 0x02
    24b4:	9c 01       	movw	r18, r24
    24b6:	26 50       	subi	r18, 0x06	; 6
    24b8:	30 40       	sbci	r19, 0x00	; 0
    24ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    24bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    24be:	82 0f       	add	r24, r18
    24c0:	93 1f       	adc	r25, r19
    24c2:	2c e6       	ldi	r18, 0x6C	; 108
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	b9 01       	movw	r22, r18
    24c8:	46 e0       	ldi	r20, 0x06	; 6
    24ca:	50 e0       	ldi	r21, 0x00	; 0
    24cc:	0e 94 aa 3a 	call	0x7554	; 0x7554 <strncmp>
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	99 f4       	brne	.+38     	; 0x24fa <GetResponseBody+0x106>
	memset(Response + tmp - 6, 0, i + 6);
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	9a 81       	ldd	r25, Y+2	; 0x02
    24d8:	9c 01       	movw	r18, r24
    24da:	26 50       	subi	r18, 0x06	; 6
    24dc:	30 40       	sbci	r19, 0x00	; 0
    24de:	8a 85       	ldd	r24, Y+10	; 0x0a
    24e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    24e2:	28 0f       	add	r18, r24
    24e4:	39 1f       	adc	r19, r25
    24e6:	8b 81       	ldd	r24, Y+3	; 0x03
    24e8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ea:	ac 01       	movw	r20, r24
    24ec:	4a 5f       	subi	r20, 0xFA	; 250
    24ee:	5f 4f       	sbci	r21, 0xFF	; 255
    24f0:	c9 01       	movw	r24, r18
    24f2:	60 e0       	ldi	r22, 0x00	; 0
    24f4:	70 e0       	ldi	r23, 0x00	; 0
    24f6:	0e 94 9a 3a 	call	0x7534	; 0x7534 <memset>
}
    24fa:	2d 96       	adiw	r28, 0x0d	; 13
    24fc:	0f b6       	in	r0, 0x3f	; 63
    24fe:	f8 94       	cli
    2500:	de bf       	out	0x3e, r29	; 62
    2502:	0f be       	out	0x3f, r0	; 63
    2504:	cd bf       	out	0x3d, r28	; 61
    2506:	cf 91       	pop	r28
    2508:	df 91       	pop	r29
    250a:	08 95       	ret

0000250c <WaitForExpectedResponse>:

bool WaitForExpectedResponse(char* ExpectedResponse)
{
    250c:	df 93       	push	r29
    250e:	cf 93       	push	r28
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
    2514:	61 97       	sbiw	r28, 0x11	; 17
    2516:	0f b6       	in	r0, 0x3f	; 63
    2518:	f8 94       	cli
    251a:	de bf       	out	0x3e, r29	; 62
    251c:	0f be       	out	0x3f, r0	; 63
    251e:	cd bf       	out	0x3d, r28	; 61
    2520:	98 8b       	std	Y+16, r25	; 0x10
    2522:	8f 87       	std	Y+15, r24	; 0x0f
	Buffer_Flush();
    2524:	0e 94 e7 11 	call	0x23ce	; 0x23ce <Buffer_Flush>
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	a8 e4       	ldi	r26, 0x48	; 72
    252e:	b3 e4       	ldi	r27, 0x43	; 67
    2530:	8b 87       	std	Y+11, r24	; 0x0b
    2532:	9c 87       	std	Y+12, r25	; 0x0c
    2534:	ad 87       	std	Y+13, r26	; 0x0d
    2536:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2538:	6b 85       	ldd	r22, Y+11	; 0x0b
    253a:	7c 85       	ldd	r23, Y+12	; 0x0c
    253c:	8d 85       	ldd	r24, Y+13	; 0x0d
    253e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	4a ef       	ldi	r20, 0xFA	; 250
    2546:	54 e4       	ldi	r21, 0x44	; 68
    2548:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	8f 83       	std	Y+7, r24	; 0x07
    2552:	98 87       	std	Y+8, r25	; 0x08
    2554:	a9 87       	std	Y+9, r26	; 0x09
    2556:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2558:	6f 81       	ldd	r22, Y+7	; 0x07
    255a:	78 85       	ldd	r23, Y+8	; 0x08
    255c:	89 85       	ldd	r24, Y+9	; 0x09
    255e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e8       	ldi	r20, 0x80	; 128
    2566:	5f e3       	ldi	r21, 0x3F	; 63
    2568:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    256c:	88 23       	and	r24, r24
    256e:	2c f4       	brge	.+10     	; 0x257a <WaitForExpectedResponse+0x6e>
		__ticks = 1;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	9e 83       	std	Y+6, r25	; 0x06
    2576:	8d 83       	std	Y+5, r24	; 0x05
    2578:	3f c0       	rjmp	.+126    	; 0x25f8 <WaitForExpectedResponse+0xec>
	else if (__tmp > 65535)
    257a:	6f 81       	ldd	r22, Y+7	; 0x07
    257c:	78 85       	ldd	r23, Y+8	; 0x08
    257e:	89 85       	ldd	r24, Y+9	; 0x09
    2580:	9a 85       	ldd	r25, Y+10	; 0x0a
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	3f ef       	ldi	r19, 0xFF	; 255
    2586:	4f e7       	ldi	r20, 0x7F	; 127
    2588:	57 e4       	ldi	r21, 0x47	; 71
    258a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    258e:	18 16       	cp	r1, r24
    2590:	4c f5       	brge	.+82     	; 0x25e4 <WaitForExpectedResponse+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2592:	6b 85       	ldd	r22, Y+11	; 0x0b
    2594:	7c 85       	ldd	r23, Y+12	; 0x0c
    2596:	8d 85       	ldd	r24, Y+13	; 0x0d
    2598:	9e 85       	ldd	r25, Y+14	; 0x0e
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e2       	ldi	r20, 0x20	; 32
    25a0:	51 e4       	ldi	r21, 0x41	; 65
    25a2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	bc 01       	movw	r22, r24
    25ac:	cd 01       	movw	r24, r26
    25ae:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	9e 83       	std	Y+6, r25	; 0x06
    25b8:	8d 83       	std	Y+5, r24	; 0x05
    25ba:	0f c0       	rjmp	.+30     	; 0x25da <WaitForExpectedResponse+0xce>
    25bc:	88 ec       	ldi	r24, 0xC8	; 200
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	9c 83       	std	Y+4, r25	; 0x04
    25c2:	8b 83       	std	Y+3, r24	; 0x03
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	9c 81       	ldd	r25, Y+4	; 0x04
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <WaitForExpectedResponse+0xbc>
    25cc:	9c 83       	std	Y+4, r25	; 0x04
    25ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d0:	8d 81       	ldd	r24, Y+5	; 0x05
    25d2:	9e 81       	ldd	r25, Y+6	; 0x06
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	9e 83       	std	Y+6, r25	; 0x06
    25d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25da:	8d 81       	ldd	r24, Y+5	; 0x05
    25dc:	9e 81       	ldd	r25, Y+6	; 0x06
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	69 f7       	brne	.-38     	; 0x25bc <WaitForExpectedResponse+0xb0>
    25e2:	14 c0       	rjmp	.+40     	; 0x260c <WaitForExpectedResponse+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e4:	6f 81       	ldd	r22, Y+7	; 0x07
    25e6:	78 85       	ldd	r23, Y+8	; 0x08
    25e8:	89 85       	ldd	r24, Y+9	; 0x09
    25ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ec:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	9e 83       	std	Y+6, r25	; 0x06
    25f6:	8d 83       	std	Y+5, r24	; 0x05
    25f8:	8d 81       	ldd	r24, Y+5	; 0x05
    25fa:	9e 81       	ldd	r25, Y+6	; 0x06
    25fc:	9a 83       	std	Y+2, r25	; 0x02
    25fe:	89 83       	std	Y+1, r24	; 0x01
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	9a 81       	ldd	r25, Y+2	; 0x02
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <WaitForExpectedResponse+0xf8>
    2608:	9a 83       	std	Y+2, r25	; 0x02
    260a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	Start_Read_Response();						/* First read response */
    260c:	0e 94 d7 11 	call	0x23ae	; 0x23ae <Start_Read_Response>
	if((Response_Status != SIM900_RESPONSE_TIMEOUT) && (strstr(RESPONSE_BUFFER, ExpectedResponse) != NULL))
    2610:	80 91 f7 06 	lds	r24, 0x06F7
    2614:	82 30       	cpi	r24, 0x02	; 2
    2616:	61 f0       	breq	.+24     	; 0x2630 <WaitForExpectedResponse+0x124>
    2618:	8f e2       	ldi	r24, 0x2F	; 47
    261a:	96 e0       	ldi	r25, 0x06	; 6
    261c:	2f 85       	ldd	r18, Y+15	; 0x0f
    261e:	38 89       	ldd	r19, Y+16	; 0x10
    2620:	b9 01       	movw	r22, r18
    2622:	0e 94 c7 3a 	call	0x758e	; 0x758e <strstr>
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	19 f0       	breq	.+6      	; 0x2630 <WaitForExpectedResponse+0x124>
		return true;							/* Return true for success */
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	89 8b       	std	Y+17, r24	; 0x11
    262e:	01 c0       	rjmp	.+2      	; 0x2632 <WaitForExpectedResponse+0x126>
	return false;								/* Else return false */
    2630:	19 8a       	std	Y+17, r1	; 0x11
    2632:	89 89       	ldd	r24, Y+17	; 0x11
}
    2634:	61 96       	adiw	r28, 0x11	; 17
    2636:	0f b6       	in	r0, 0x3f	; 63
    2638:	f8 94       	cli
    263a:	de bf       	out	0x3e, r29	; 62
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	cd bf       	out	0x3d, r28	; 61
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <SendATandExpectResponse>:

bool SendATandExpectResponse(char* ATCommand, char* ExpectedResponse)
{
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	00 d0       	rcall	.+0      	; 0x264c <SendATandExpectResponse+0x6>
    264c:	00 d0       	rcall	.+0      	; 0x264e <SendATandExpectResponse+0x8>
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	9a 83       	std	Y+2, r25	; 0x02
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	7c 83       	std	Y+4, r23	; 0x04
    2658:	6b 83       	std	Y+3, r22	; 0x03
	USART_SendString(ATCommand);				/* Send AT command to SIM900 */
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	9a 81       	ldd	r25, Y+2	; 0x02
    265e:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	USART_TxChar('\r');
    2662:	8d e0       	ldi	r24, 0x0D	; 13
    2664:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <USART_TxChar>
	return WaitForExpectedResponse(ExpectedResponse);
    2668:	8b 81       	ldd	r24, Y+3	; 0x03
    266a:	9c 81       	ldd	r25, Y+4	; 0x04
    266c:	0e 94 86 12 	call	0x250c	; 0x250c <WaitForExpectedResponse>
}
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	08 95       	ret

0000267e <HTTP_Parameter>:

bool HTTP_Parameter(char* Parameter, char* Value)/* Set HTTP parameter and return response */
{
    267e:	df 93       	push	r29
    2680:	cf 93       	push	r28
    2682:	00 d0       	rcall	.+0      	; 0x2684 <HTTP_Parameter+0x6>
    2684:	00 d0       	rcall	.+0      	; 0x2686 <HTTP_Parameter+0x8>
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	9a 83       	std	Y+2, r25	; 0x02
    268c:	89 83       	std	Y+1, r24	; 0x01
    268e:	7c 83       	std	Y+4, r23	; 0x04
    2690:	6b 83       	std	Y+3, r22	; 0x03

	USART_SendString("AT+HTTPPARA=\"");
    2692:	83 e7       	ldi	r24, 0x73	; 115
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	USART_SendString(Parameter);
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	9a 81       	ldd	r25, Y+2	; 0x02
    269e:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	USART_SendString("\",\"");
    26a2:	81 e8       	ldi	r24, 0x81	; 129
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	USART_SendString(Value);
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	9c 81       	ldd	r25, Y+4	; 0x04
    26ae:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	USART_SendString("\"\r");
    26b2:	85 e8       	ldi	r24, 0x85	; 133
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	return WaitForExpectedResponse("OK");
    26ba:	88 e8       	ldi	r24, 0x88	; 136
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	0e 94 86 12 	call	0x250c	; 0x250c <WaitForExpectedResponse>
}
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	08 95       	ret

000026d0 <SIM900HTTP_Start>:

bool SIM900HTTP_Start()							/* Check SIM900 board */
{
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	00 d0       	rcall	.+0      	; 0x26d6 <SIM900HTTP_Start+0x6>
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t i=0;i<5;i++)
    26da:	19 82       	std	Y+1, r1	; 0x01
    26dc:	1f c0       	rjmp	.+62     	; 0x271c <SIM900HTTP_Start+0x4c>
	{
		if(SendATandExpectResponse("ATE0","OK")||SendATandExpectResponse("AT","OK"))
    26de:	8b e8       	ldi	r24, 0x8B	; 139
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	28 e8       	ldi	r18, 0x88	; 136
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	b9 01       	movw	r22, r18
    26e8:	0e 94 23 13 	call	0x2646	; 0x2646 <SendATandExpectResponse>
    26ec:	88 23       	and	r24, r24
    26ee:	49 f4       	brne	.+18     	; 0x2702 <SIM900HTTP_Start+0x32>
    26f0:	80 e9       	ldi	r24, 0x90	; 144
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	28 e8       	ldi	r18, 0x88	; 136
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	b9 01       	movw	r22, r18
    26fa:	0e 94 23 13 	call	0x2646	; 0x2646 <SendATandExpectResponse>
    26fe:	88 23       	and	r24, r24
    2700:	51 f0       	breq	.+20     	; 0x2716 <SIM900HTTP_Start+0x46>
		{
			HTTP_Parameter("CID","1");			/* set Bearer profile identifier */
    2702:	83 e9       	ldi	r24, 0x93	; 147
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	27 e9       	ldi	r18, 0x97	; 151
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	b9 01       	movw	r22, r18
    270c:	0e 94 3f 13 	call	0x267e	; 0x267e <HTTP_Parameter>
			return true;
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	8a 83       	std	Y+2, r24	; 0x02
    2714:	07 c0       	rjmp	.+14     	; 0x2724 <SIM900HTTP_Start+0x54>
	return WaitForExpectedResponse("OK");
}

bool SIM900HTTP_Start()							/* Check SIM900 board */
{
	for (uint8_t i=0;i<5;i++)
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	8f 5f       	subi	r24, 0xFF	; 255
    271a:	89 83       	std	Y+1, r24	; 0x01
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	85 30       	cpi	r24, 0x05	; 5
    2720:	f0 f2       	brcs	.-68     	; 0x26de <SIM900HTTP_Start+0xe>
		{
			HTTP_Parameter("CID","1");			/* set Bearer profile identifier */
			return true;
		}
	}
	return false;
    2722:	1a 82       	std	Y+2, r1	; 0x02
    2724:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	08 95       	ret

00002730 <SIM900HTTP_Connect>:

bool SIM900HTTP_Connect(char* _APN, char* _USERNAME, char* _PASSWORD) /* Connect to GPRS */
{
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	cd b7       	in	r28, 0x3d	; 61
    2736:	de b7       	in	r29, 0x3e	; 62
    2738:	27 97       	sbiw	r28, 0x07	; 7
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
    2744:	9a 83       	std	Y+2, r25	; 0x02
    2746:	89 83       	std	Y+1, r24	; 0x01
    2748:	7c 83       	std	Y+4, r23	; 0x04
    274a:	6b 83       	std	Y+3, r22	; 0x03
    274c:	5e 83       	std	Y+6, r21	; 0x06
    274e:	4d 83       	std	Y+5, r20	; 0x05

	USART_SendString("AT+CREG?\r");
    2750:	89 e9       	ldi	r24, 0x99	; 153
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	if(!WaitForExpectedResponse("+CREG: 0,1"))
    2758:	83 ea       	ldi	r24, 0xA3	; 163
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	0e 94 86 12 	call	0x250c	; 0x250c <WaitForExpectedResponse>
    2760:	98 2f       	mov	r25, r24
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	89 27       	eor	r24, r25
    2766:	88 23       	and	r24, r24
    2768:	11 f0       	breq	.+4      	; 0x276e <SIM900HTTP_Connect+0x3e>
		return false;
    276a:	1f 82       	std	Y+7, r1	; 0x07
    276c:	49 c0       	rjmp	.+146    	; 0x2800 <SIM900HTTP_Connect+0xd0>

	USART_SendString("AT+SAPBR=0,1\r");
    276e:	8e ea       	ldi	r24, 0xAE	; 174
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	WaitForExpectedResponse("OK");
    2776:	88 e8       	ldi	r24, 0x88	; 136
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	0e 94 86 12 	call	0x250c	; 0x250c <WaitForExpectedResponse>

	USART_SendString("AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"\r");
    277e:	8c eb       	ldi	r24, 0xBC	; 188
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	WaitForExpectedResponse("OK");
    2786:	88 e8       	ldi	r24, 0x88	; 136
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	0e 94 86 12 	call	0x250c	; 0x250c <WaitForExpectedResponse>

	USART_SendString("AT+SAPBR=3,1,\"APN\",\"");
    278e:	8b ed       	ldi	r24, 0xDB	; 219
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	USART_SendString(_APN);
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	9a 81       	ldd	r25, Y+2	; 0x02
    279a:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	USART_SendString("\"\r");
    279e:	85 e8       	ldi	r24, 0x85	; 133
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	WaitForExpectedResponse("OK");
    27a6:	88 e8       	ldi	r24, 0x88	; 136
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	0e 94 86 12 	call	0x250c	; 0x250c <WaitForExpectedResponse>

	USART_SendString("AT+SAPBR=3,1,\"USER\",\"");
    27ae:	80 ef       	ldi	r24, 0xF0	; 240
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	USART_SendString(_USERNAME);
    27b6:	8b 81       	ldd	r24, Y+3	; 0x03
    27b8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ba:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	USART_SendString("\"\r");
    27be:	85 e8       	ldi	r24, 0x85	; 133
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	WaitForExpectedResponse("OK");
    27c6:	88 e8       	ldi	r24, 0x88	; 136
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	0e 94 86 12 	call	0x250c	; 0x250c <WaitForExpectedResponse>

	USART_SendString("AT+SAPBR=3,1,\"PWD\",\"");
    27ce:	86 e0       	ldi	r24, 0x06	; 6
    27d0:	91 e0       	ldi	r25, 0x01	; 1
    27d2:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	USART_SendString(_PASSWORD);
    27d6:	8d 81       	ldd	r24, Y+5	; 0x05
    27d8:	9e 81       	ldd	r25, Y+6	; 0x06
    27da:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	USART_SendString("\"\r");
    27de:	85 e8       	ldi	r24, 0x85	; 133
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	WaitForExpectedResponse("OK");
    27e6:	88 e8       	ldi	r24, 0x88	; 136
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	0e 94 86 12 	call	0x250c	; 0x250c <WaitForExpectedResponse>

	USART_SendString("AT+SAPBR=1,1\r");
    27ee:	8b e1       	ldi	r24, 0x1B	; 27
    27f0:	91 e0       	ldi	r25, 0x01	; 1
    27f2:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	return WaitForExpectedResponse("OK");
    27f6:	88 e8       	ldi	r24, 0x88	; 136
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	0e 94 86 12 	call	0x250c	; 0x250c <WaitForExpectedResponse>
    27fe:	8f 83       	std	Y+7, r24	; 0x07
    2800:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2802:	27 96       	adiw	r28, 0x07	; 7
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	de bf       	out	0x3e, r29	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	cd bf       	out	0x3d, r28	; 61
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	08 95       	ret

00002814 <HTTP_Init>:

bool HTTP_Init()								/* Initiate HTTP */
{
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
	USART_SendString("AT+HTTPINIT\r");
    281c:	89 e2       	ldi	r24, 0x29	; 41
    281e:	91 e0       	ldi	r25, 0x01	; 1
    2820:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	return WaitForExpectedResponse("OK");
    2824:	88 e8       	ldi	r24, 0x88	; 136
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	0e 94 86 12 	call	0x250c	; 0x250c <WaitForExpectedResponse>
}
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	08 95       	ret

00002832 <HTTP_Terminate>:

bool HTTP_Terminate()							/* terminate HTTP */
{
    2832:	df 93       	push	r29
    2834:	cf 93       	push	r28
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
	USART_SendString("AT+HTTPTERM\r");
    283a:	86 e3       	ldi	r24, 0x36	; 54
    283c:	91 e0       	ldi	r25, 0x01	; 1
    283e:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	return WaitForExpectedResponse("OK");
    2842:	88 e8       	ldi	r24, 0x88	; 136
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	0e 94 86 12 	call	0x250c	; 0x250c <WaitForExpectedResponse>
}
    284a:	cf 91       	pop	r28
    284c:	df 91       	pop	r29
    284e:	08 95       	ret

00002850 <HTTP_SetURL>:

bool HTTP_SetURL(char * url)					/* Set URL */
{
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	00 d0       	rcall	.+0      	; 0x2856 <HTTP_SetURL+0x6>
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	9a 83       	std	Y+2, r25	; 0x02
    285c:	89 83       	std	Y+1, r24	; 0x01
	return HTTP_Parameter("URL", url);
    285e:	83 e4       	ldi	r24, 0x43	; 67
    2860:	91 e0       	ldi	r25, 0x01	; 1
    2862:	29 81       	ldd	r18, Y+1	; 0x01
    2864:	3a 81       	ldd	r19, Y+2	; 0x02
    2866:	b9 01       	movw	r22, r18
    2868:	0e 94 3f 13 	call	0x267e	; 0x267e <HTTP_Parameter>
}
    286c:	0f 90       	pop	r0
    286e:	0f 90       	pop	r0
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	08 95       	ret

00002876 <HTTP_Connected>:

bool HTTP_Connected()							/* Check for connected */
{
    2876:	df 93       	push	r29
    2878:	cf 93       	push	r28
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
	USART_SendString("AT+SAPBR=2,1\r");
    287e:	87 e4       	ldi	r24, 0x47	; 71
    2880:	91 e0       	ldi	r25, 0x01	; 1
    2882:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	CRLF_COUNT = 2;										/* Make additional crlf count for response */
    2886:	82 e0       	ldi	r24, 0x02	; 2
    2888:	80 93 23 05 	sts	0x0523, r24
	return WaitForExpectedResponse("+SAPBR: 1,1");
    288c:	85 e5       	ldi	r24, 0x55	; 85
    288e:	91 e0       	ldi	r25, 0x01	; 1
    2890:	0e 94 86 12 	call	0x250c	; 0x250c <WaitForExpectedResponse>
}
    2894:	cf 91       	pop	r28
    2896:	df 91       	pop	r29
    2898:	08 95       	ret

0000289a <HTTP_SetPost_json>:

bool HTTP_SetPost_json()						/* Set Json Application format for post */
{
    289a:	df 93       	push	r29
    289c:	cf 93       	push	r28
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
	return HTTP_Parameter("CONTENT", "application/json");
    28a2:	81 e6       	ldi	r24, 0x61	; 97
    28a4:	91 e0       	ldi	r25, 0x01	; 1
    28a6:	29 e6       	ldi	r18, 0x69	; 105
    28a8:	31 e0       	ldi	r19, 0x01	; 1
    28aa:	b9 01       	movw	r22, r18
    28ac:	0e 94 3f 13 	call	0x267e	; 0x267e <HTTP_Parameter>
}
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	08 95       	ret

000028b6 <HTTP_Save>:

bool HTTP_Save()								/* Save the application context */
{
    28b6:	df 93       	push	r29
    28b8:	cf 93       	push	r28
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
	USART_SendString("AT+HTTPSCONT\r");
    28be:	8a e7       	ldi	r24, 0x7A	; 122
    28c0:	91 e0       	ldi	r25, 0x01	; 1
    28c2:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	return WaitForExpectedResponse("OK");
    28c6:	88 e8       	ldi	r24, 0x88	; 136
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	0e 94 86 12 	call	0x250c	; 0x250c <WaitForExpectedResponse>
}
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	08 95       	ret

000028d4 <HTTP_Data>:

bool HTTP_Data(char* data)						/* Load HTTP data */
{
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    28dc:	6c 97       	sbiw	r28, 0x1c	; 28
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	9b 8f       	std	Y+27, r25	; 0x1b
    28ea:	8a 8f       	std	Y+26, r24	; 0x1a
	char _buffer[25];
	sprintf(_buffer, "AT+HTTPDATA=%d,%d\r", strlen(data), 10000);
    28ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28ee:	9b 8d       	ldd	r25, Y+27	; 0x1b
    28f0:	0e 94 a1 3a 	call	0x7542	; 0x7542 <strlen>
    28f4:	9c 01       	movw	r18, r24
    28f6:	8d b7       	in	r24, 0x3d	; 61
    28f8:	9e b7       	in	r25, 0x3e	; 62
    28fa:	08 97       	sbiw	r24, 0x08	; 8
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	f8 94       	cli
    2900:	9e bf       	out	0x3e, r25	; 62
    2902:	0f be       	out	0x3f, r0	; 63
    2904:	8d bf       	out	0x3d, r24	; 61
    2906:	ed b7       	in	r30, 0x3d	; 61
    2908:	fe b7       	in	r31, 0x3e	; 62
    290a:	31 96       	adiw	r30, 0x01	; 1
    290c:	ce 01       	movw	r24, r28
    290e:	01 96       	adiw	r24, 0x01	; 1
    2910:	91 83       	std	Z+1, r25	; 0x01
    2912:	80 83       	st	Z, r24
    2914:	88 e8       	ldi	r24, 0x88	; 136
    2916:	91 e0       	ldi	r25, 0x01	; 1
    2918:	93 83       	std	Z+3, r25	; 0x03
    291a:	82 83       	std	Z+2, r24	; 0x02
    291c:	35 83       	std	Z+5, r19	; 0x05
    291e:	24 83       	std	Z+4, r18	; 0x04
    2920:	80 e1       	ldi	r24, 0x10	; 16
    2922:	97 e2       	ldi	r25, 0x27	; 39
    2924:	97 83       	std	Z+7, r25	; 0x07
    2926:	86 83       	std	Z+6, r24	; 0x06
    2928:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <sprintf>
    292c:	8d b7       	in	r24, 0x3d	; 61
    292e:	9e b7       	in	r25, 0x3e	; 62
    2930:	08 96       	adiw	r24, 0x08	; 8
    2932:	0f b6       	in	r0, 0x3f	; 63
    2934:	f8 94       	cli
    2936:	9e bf       	out	0x3e, r25	; 62
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	8d bf       	out	0x3d, r24	; 61
	USART_SendString(_buffer);
    293c:	ce 01       	movw	r24, r28
    293e:	01 96       	adiw	r24, 0x01	; 1
    2940:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>

	if(WaitForExpectedResponse("DOWNLOAD"))
    2944:	8b e9       	ldi	r24, 0x9B	; 155
    2946:	91 e0       	ldi	r25, 0x01	; 1
    2948:	0e 94 86 12 	call	0x250c	; 0x250c <WaitForExpectedResponse>
    294c:	88 23       	and	r24, r24
    294e:	49 f0       	breq	.+18     	; 0x2962 <HTTP_Data+0x8e>
		return SendATandExpectResponse(data, "OK");
    2950:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2952:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2954:	28 e8       	ldi	r18, 0x88	; 136
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	b9 01       	movw	r22, r18
    295a:	0e 94 23 13 	call	0x2646	; 0x2646 <SendATandExpectResponse>
    295e:	8c 8f       	std	Y+28, r24	; 0x1c
    2960:	01 c0       	rjmp	.+2      	; 0x2964 <HTTP_Data+0x90>
	else
		return false;
    2962:	1c 8e       	std	Y+28, r1	; 0x1c
    2964:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    2966:	6c 96       	adiw	r28, 0x1c	; 28
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	de bf       	out	0x3e, r29	; 62
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	cd bf       	out	0x3d, r28	; 61
    2972:	cf 91       	pop	r28
    2974:	df 91       	pop	r29
    2976:	08 95       	ret

00002978 <HTTP_Action>:

bool HTTP_Action(char method)					/* Select HTTP Action */
{
    2978:	df 93       	push	r29
    297a:	cf 93       	push	r28
    297c:	0f 92       	push	r0
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
    2982:	89 83       	std	Y+1, r24	; 0x01
	if(method == GET)
    2984:	89 81       	ldd	r24, Y+1	; 0x01
    2986:	88 23       	and	r24, r24
    2988:	21 f4       	brne	.+8      	; 0x2992 <HTTP_Action+0x1a>
		USART_SendString("AT+HTTPACTION=0\r");
    298a:	84 ea       	ldi	r24, 0xA4	; 164
    298c:	91 e0       	ldi	r25, 0x01	; 1
    298e:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	if(method == POST)
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	81 30       	cpi	r24, 0x01	; 1
    2996:	21 f4       	brne	.+8      	; 0x29a0 <HTTP_Action+0x28>
		USART_SendString("AT+HTTPACTION=1\r");
    2998:	85 eb       	ldi	r24, 0xB5	; 181
    299a:	91 e0       	ldi	r25, 0x01	; 1
    299c:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	return WaitForExpectedResponse("OK");
    29a0:	88 e8       	ldi	r24, 0x88	; 136
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	0e 94 86 12 	call	0x250c	; 0x250c <WaitForExpectedResponse>
}
    29a8:	0f 90       	pop	r0
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	08 95       	ret

000029b0 <HTTP_Read>:

bool HTTP_Read(uint8_t StartByte, uint16_t ByteSize) /* Read HTTP response */
{
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    29b8:	6d 97       	sbiw	r28, 0x1d	; 29
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	f8 94       	cli
    29be:	de bf       	out	0x3e, r29	; 62
    29c0:	0f be       	out	0x3f, r0	; 63
    29c2:	cd bf       	out	0x3d, r28	; 61
    29c4:	8a 8f       	std	Y+26, r24	; 0x1a
    29c6:	7c 8f       	std	Y+28, r23	; 0x1c
    29c8:	6b 8f       	std	Y+27, r22	; 0x1b
	char Command[25];
	sprintf(Command,"AT+HTTPREAD=%d,%d\r",StartByte,ByteSize);
    29ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    29cc:	28 2f       	mov	r18, r24
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	8d b7       	in	r24, 0x3d	; 61
    29d2:	9e b7       	in	r25, 0x3e	; 62
    29d4:	08 97       	sbiw	r24, 0x08	; 8
    29d6:	0f b6       	in	r0, 0x3f	; 63
    29d8:	f8 94       	cli
    29da:	9e bf       	out	0x3e, r25	; 62
    29dc:	0f be       	out	0x3f, r0	; 63
    29de:	8d bf       	out	0x3d, r24	; 61
    29e0:	ed b7       	in	r30, 0x3d	; 61
    29e2:	fe b7       	in	r31, 0x3e	; 62
    29e4:	31 96       	adiw	r30, 0x01	; 1
    29e6:	ce 01       	movw	r24, r28
    29e8:	01 96       	adiw	r24, 0x01	; 1
    29ea:	91 83       	std	Z+1, r25	; 0x01
    29ec:	80 83       	st	Z, r24
    29ee:	86 ec       	ldi	r24, 0xC6	; 198
    29f0:	91 e0       	ldi	r25, 0x01	; 1
    29f2:	93 83       	std	Z+3, r25	; 0x03
    29f4:	82 83       	std	Z+2, r24	; 0x02
    29f6:	35 83       	std	Z+5, r19	; 0x05
    29f8:	24 83       	std	Z+4, r18	; 0x04
    29fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29fe:	97 83       	std	Z+7, r25	; 0x07
    2a00:	86 83       	std	Z+6, r24	; 0x06
    2a02:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <sprintf>
    2a06:	8d b7       	in	r24, 0x3d	; 61
    2a08:	9e b7       	in	r25, 0x3e	; 62
    2a0a:	08 96       	adiw	r24, 0x08	; 8
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	9e bf       	out	0x3e, r25	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	8d bf       	out	0x3d, r24	; 61
	Command[25] = 0;
    2a16:	1a 8e       	std	Y+26, r1	; 0x1a
	USART_SendString(Command);
    2a18:	ce 01       	movw	r24, r28
    2a1a:	01 96       	adiw	r24, 0x01	; 1
    2a1c:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>

	CRLF_COUNT = 2;										/* Make additional crlf count for response */
    2a20:	82 e0       	ldi	r24, 0x02	; 2
    2a22:	80 93 23 05 	sts	0x0523, r24
	if(WaitForExpectedResponse("+HTTPREAD"))
    2a26:	89 ed       	ldi	r24, 0xD9	; 217
    2a28:	91 e0       	ldi	r25, 0x01	; 1
    2a2a:	0e 94 86 12 	call	0x250c	; 0x250c <WaitForExpectedResponse>
    2a2e:	88 23       	and	r24, r24
    2a30:	51 f0       	breq	.+20     	; 0x2a46 <HTTP_Read+0x96>
	{
		GetResponseBody(RESPONSE_BUFFER, ByteSize);
    2a32:	8f e2       	ldi	r24, 0x2F	; 47
    2a34:	96 e0       	ldi	r25, 0x06	; 6
    2a36:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2a38:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2a3a:	b9 01       	movw	r22, r18
    2a3c:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <GetResponseBody>
		return true;
    2a40:	91 e0       	ldi	r25, 0x01	; 1
    2a42:	9d 8f       	std	Y+29, r25	; 0x1d
    2a44:	01 c0       	rjmp	.+2      	; 0x2a48 <HTTP_Read+0x98>
	}
	else
		return false;
    2a46:	1d 8e       	std	Y+29, r1	; 0x1d
    2a48:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    2a4a:	6d 96       	adiw	r28, 0x1d	; 29
    2a4c:	0f b6       	in	r0, 0x3f	; 63
    2a4e:	f8 94       	cli
    2a50:	de bf       	out	0x3e, r29	; 62
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	cd bf       	out	0x3d, r28	; 61
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <HTTP_Post>:

uint8_t HTTP_Post(char* Parameters, uint16_t ResponseLength)
{
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	00 d0       	rcall	.+0      	; 0x2a62 <HTTP_Post+0x6>
    2a62:	00 d0       	rcall	.+0      	; 0x2a64 <HTTP_Post+0x8>
    2a64:	00 d0       	rcall	.+0      	; 0x2a66 <HTTP_Post+0xa>
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
    2a6a:	9b 83       	std	Y+3, r25	; 0x03
    2a6c:	8a 83       	std	Y+2, r24	; 0x02
    2a6e:	7d 83       	std	Y+5, r23	; 0x05
    2a70:	6c 83       	std	Y+4, r22	; 0x04
	HTTP_Parameter("CID","1");			/* set Bearer profile identifier */
    2a72:	83 e9       	ldi	r24, 0x93	; 147
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	27 e9       	ldi	r18, 0x97	; 151
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	b9 01       	movw	r22, r18
    2a7c:	0e 94 3f 13 	call	0x267e	; 0x267e <HTTP_Parameter>
	if(!(HTTP_Data(Parameters) && HTTP_Action(POST)))
    2a80:	8a 81       	ldd	r24, Y+2	; 0x02
    2a82:	9b 81       	ldd	r25, Y+3	; 0x03
    2a84:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <HTTP_Data>
    2a88:	98 2f       	mov	r25, r24
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	89 27       	eor	r24, r25
    2a8e:	88 23       	and	r24, r24
    2a90:	39 f4       	brne	.+14     	; 0x2aa0 <HTTP_Post+0x44>
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	0e 94 bc 14 	call	0x2978	; 0x2978 <HTTP_Action>
    2a98:	91 e0       	ldi	r25, 0x01	; 1
    2a9a:	89 27       	eor	r24, r25
    2a9c:	88 23       	and	r24, r24
    2a9e:	19 f0       	breq	.+6      	; 0x2aa6 <HTTP_Post+0x4a>
	return SIM900_RESPONSE_TIMEOUT;
    2aa0:	82 e0       	ldi	r24, 0x02	; 2
    2aa2:	8e 83       	std	Y+6, r24	; 0x06
    2aa4:	1c c0       	rjmp	.+56     	; 0x2ade <HTTP_Post+0x82>

	bool status200 = WaitForExpectedResponse(",200,");
    2aa6:	83 ee       	ldi	r24, 0xE3	; 227
    2aa8:	91 e0       	ldi	r25, 0x01	; 1
    2aaa:	0e 94 86 12 	call	0x250c	; 0x250c <WaitForExpectedResponse>
    2aae:	89 83       	std	Y+1, r24	; 0x01

	if(Response_Status == SIM900_RESPONSE_TIMEOUT)
    2ab0:	80 91 f7 06 	lds	r24, 0x06F7
    2ab4:	82 30       	cpi	r24, 0x02	; 2
    2ab6:	19 f4       	brne	.+6      	; 0x2abe <HTTP_Post+0x62>
	return SIM900_RESPONSE_TIMEOUT;
    2ab8:	82 e0       	ldi	r24, 0x02	; 2
    2aba:	8e 83       	std	Y+6, r24	; 0x06
    2abc:	10 c0       	rjmp	.+32     	; 0x2ade <HTTP_Post+0x82>
	if(!status200)
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	91 e0       	ldi	r25, 0x01	; 1
    2ac2:	89 27       	eor	r24, r25
    2ac4:	88 23       	and	r24, r24
    2ac6:	19 f0       	breq	.+6      	; 0x2ace <HTTP_Post+0x72>
	return SIM900_RESPONSE_ERROR;
    2ac8:	85 e0       	ldi	r24, 0x05	; 5
    2aca:	8e 83       	std	Y+6, r24	; 0x06
    2acc:	08 c0       	rjmp	.+16     	; 0x2ade <HTTP_Post+0x82>

	HTTP_Read(0, ResponseLength);
    2ace:	2c 81       	ldd	r18, Y+4	; 0x04
    2ad0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	b9 01       	movw	r22, r18
    2ad6:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <HTTP_Read>
	return SIM900_RESPONSE_FINISHED;
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	8e 83       	std	Y+6, r24	; 0x06
    2ade:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2ae0:	26 96       	adiw	r28, 0x06	; 6
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	f8 94       	cli
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	cd bf       	out	0x3d, r28	; 61
    2aec:	cf 91       	pop	r28
    2aee:	df 91       	pop	r29
    2af0:	08 95       	ret

00002af2 <HTTP_get>:

uint8_t HTTP_get(char * _URL, uint16_t ResponseLength)
{
    2af2:	df 93       	push	r29
    2af4:	cf 93       	push	r28
    2af6:	00 d0       	rcall	.+0      	; 0x2af8 <HTTP_get+0x6>
    2af8:	00 d0       	rcall	.+0      	; 0x2afa <HTTP_get+0x8>
    2afa:	0f 92       	push	r0
    2afc:	cd b7       	in	r28, 0x3d	; 61
    2afe:	de b7       	in	r29, 0x3e	; 62
    2b00:	9a 83       	std	Y+2, r25	; 0x02
    2b02:	89 83       	std	Y+1, r24	; 0x01
    2b04:	7c 83       	std	Y+4, r23	; 0x04
    2b06:	6b 83       	std	Y+3, r22	; 0x03
	HTTP_Parameter("CID","1");			/* set Bearer profile identifier */
    2b08:	83 e9       	ldi	r24, 0x93	; 147
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	27 e9       	ldi	r18, 0x97	; 151
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	b9 01       	movw	r22, r18
    2b12:	0e 94 3f 13 	call	0x267e	; 0x267e <HTTP_Parameter>
	HTTP_Parameter("URL", _URL);
    2b16:	83 e4       	ldi	r24, 0x43	; 67
    2b18:	91 e0       	ldi	r25, 0x01	; 1
    2b1a:	29 81       	ldd	r18, Y+1	; 0x01
    2b1c:	3a 81       	ldd	r19, Y+2	; 0x02
    2b1e:	b9 01       	movw	r22, r18
    2b20:	0e 94 3f 13 	call	0x267e	; 0x267e <HTTP_Parameter>
	HTTP_Action(GET);
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	0e 94 bc 14 	call	0x2978	; 0x2978 <HTTP_Action>
	WaitForExpectedResponse("+HTTPACTION:0,");
    2b2a:	89 ee       	ldi	r24, 0xE9	; 233
    2b2c:	91 e0       	ldi	r25, 0x01	; 1
    2b2e:	0e 94 86 12 	call	0x250c	; 0x250c <WaitForExpectedResponse>
	if(Response_Status == SIM900_RESPONSE_TIMEOUT)
    2b32:	80 91 f7 06 	lds	r24, 0x06F7
    2b36:	82 30       	cpi	r24, 0x02	; 2
    2b38:	19 f4       	brne	.+6      	; 0x2b40 <HTTP_get+0x4e>
	return SIM900_RESPONSE_TIMEOUT;
    2b3a:	82 e0       	ldi	r24, 0x02	; 2
    2b3c:	8d 83       	std	Y+5, r24	; 0x05
    2b3e:	08 c0       	rjmp	.+16     	; 0x2b50 <HTTP_get+0x5e>

	HTTP_Read(0, ResponseLength);
    2b40:	2b 81       	ldd	r18, Y+3	; 0x03
    2b42:	3c 81       	ldd	r19, Y+4	; 0x04
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	b9 01       	movw	r22, r18
    2b48:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <HTTP_Read>
	return SIM900_RESPONSE_FINISHED;
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	8d 83       	std	Y+5, r24	; 0x05
    2b50:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	0f 90       	pop	r0
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	cf 91       	pop	r28
    2b5e:	df 91       	pop	r29
    2b60:	08 95       	ret

00002b62 <SIM900HTTP_Init>:

bool SIM900HTTP_Init()
{
    2b62:	df 93       	push	r29
    2b64:	cf 93       	push	r28
    2b66:	cd b7       	in	r28, 0x3d	; 61
    2b68:	de b7       	in	r29, 0x3e	; 62
	HTTP_Terminate();
    2b6a:	0e 94 19 14 	call	0x2832	; 0x2832 <HTTP_Terminate>
	return HTTP_Init();
    2b6e:	0e 94 0a 14 	call	0x2814	; 0x2814 <HTTP_Init>
}
    2b72:	cf 91       	pop	r28
    2b74:	df 91       	pop	r29
    2b76:	08 95       	ret

00002b78 <LCDByte>:
	#define LCD_TYPE_204
#endif


void LCDByte(uint8_t c,uint8_t isdata)
{
    2b78:	0f 93       	push	r16
    2b7a:	1f 93       	push	r17
    2b7c:	df 93       	push	r29
    2b7e:	cf 93       	push	r28
    2b80:	cd b7       	in	r28, 0x3d	; 61
    2b82:	de b7       	in	r29, 0x3e	; 62
    2b84:	cd 57       	subi	r28, 0x7D	; 125
    2b86:	d0 40       	sbci	r29, 0x00	; 0
    2b88:	0f b6       	in	r0, 0x3f	; 63
    2b8a:	f8 94       	cli
    2b8c:	de bf       	out	0x3e, r29	; 62
    2b8e:	0f be       	out	0x3f, r0	; 63
    2b90:	cd bf       	out	0x3d, r28	; 61
    2b92:	fe 01       	movw	r30, r28
    2b94:	e4 58       	subi	r30, 0x84	; 132
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	80 83       	st	Z, r24
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	e3 58       	subi	r30, 0x83	; 131
    2b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba0:	60 83       	st	Z, r22
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
    2ba2:	de 01       	movw	r26, r28
    2ba4:	a5 58       	subi	r26, 0x85	; 133
    2ba6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ba8:	fe 01       	movw	r30, r28
    2baa:	e4 58       	subi	r30, 0x84	; 132
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	80 81       	ld	r24, Z
    2bb0:	82 95       	swap	r24
    2bb2:	8f 70       	andi	r24, 0x0F	; 15
    2bb4:	8c 93       	st	X, r24
ln=(c & 0x0F);
    2bb6:	de 01       	movw	r26, r28
    2bb8:	a6 58       	subi	r26, 0x86	; 134
    2bba:	bf 4f       	sbci	r27, 0xFF	; 255
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e4 58       	subi	r30, 0x84	; 132
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	80 81       	ld	r24, Z
    2bc4:	8f 70       	andi	r24, 0x0F	; 15
    2bc6:	8c 93       	st	X, r24

if(isdata==0)
    2bc8:	fe 01       	movw	r30, r28
    2bca:	e3 58       	subi	r30, 0x83	; 131
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	80 81       	ld	r24, Z
    2bd0:	88 23       	and	r24, r24
    2bd2:	41 f4       	brne	.+16     	; 0x2be4 <LCDByte+0x6c>
	CLEAR_RS();
    2bd4:	ab e3       	ldi	r26, 0x3B	; 59
    2bd6:	b0 e0       	ldi	r27, 0x00	; 0
    2bd8:	eb e3       	ldi	r30, 0x3B	; 59
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
    2bde:	8e 7f       	andi	r24, 0xFE	; 254
    2be0:	8c 93       	st	X, r24
    2be2:	07 c0       	rjmp	.+14     	; 0x2bf2 <LCDByte+0x7a>
else
	SET_RS();
    2be4:	ab e3       	ldi	r26, 0x3B	; 59
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	eb e3       	ldi	r30, 0x3B	; 59
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	81 60       	ori	r24, 0x01	; 1
    2bf0:	8c 93       	st	X, r24
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	eb 58       	subi	r30, 0x8B	; 139
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	a0 ea       	ldi	r26, 0xA0	; 160
    2bfe:	b0 e4       	ldi	r27, 0x40	; 64
    2c00:	80 83       	st	Z, r24
    2c02:	91 83       	std	Z+1, r25	; 0x01
    2c04:	a2 83       	std	Z+2, r26	; 0x02
    2c06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c08:	8e 01       	movw	r16, r28
    2c0a:	0f 58       	subi	r16, 0x8F	; 143
    2c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0e:	fe 01       	movw	r30, r28
    2c10:	eb 58       	subi	r30, 0x8B	; 139
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	60 81       	ld	r22, Z
    2c16:	71 81       	ldd	r23, Z+1	; 0x01
    2c18:	82 81       	ldd	r24, Z+2	; 0x02
    2c1a:	93 81       	ldd	r25, Z+3	; 0x03
    2c1c:	2b ea       	ldi	r18, 0xAB	; 171
    2c1e:	3a ea       	ldi	r19, 0xAA	; 170
    2c20:	4a e2       	ldi	r20, 0x2A	; 42
    2c22:	50 e4       	ldi	r21, 0x40	; 64
    2c24:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	f8 01       	movw	r30, r16
    2c2e:	80 83       	st	Z, r24
    2c30:	91 83       	std	Z+1, r25	; 0x01
    2c32:	a2 83       	std	Z+2, r26	; 0x02
    2c34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c36:	fe 01       	movw	r30, r28
    2c38:	ef 58       	subi	r30, 0x8F	; 143
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	60 81       	ld	r22, Z
    2c3e:	71 81       	ldd	r23, Z+1	; 0x01
    2c40:	82 81       	ldd	r24, Z+2	; 0x02
    2c42:	93 81       	ldd	r25, Z+3	; 0x03
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 e8       	ldi	r20, 0x80	; 128
    2c4a:	5f e3       	ldi	r21, 0x3F	; 63
    2c4c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2c50:	88 23       	and	r24, r24
    2c52:	34 f4       	brge	.+12     	; 0x2c60 <LCDByte+0xe8>
		__ticks = 1;
    2c54:	fe 01       	movw	r30, r28
    2c56:	e0 59       	subi	r30, 0x90	; 144
    2c58:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	80 83       	st	Z, r24
    2c5e:	e0 c0       	rjmp	.+448    	; 0x2e20 <LCDByte+0x2a8>
	else if (__tmp > 255)
    2c60:	fe 01       	movw	r30, r28
    2c62:	ef 58       	subi	r30, 0x8F	; 143
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	60 81       	ld	r22, Z
    2c68:	71 81       	ldd	r23, Z+1	; 0x01
    2c6a:	82 81       	ldd	r24, Z+2	; 0x02
    2c6c:	93 81       	ldd	r25, Z+3	; 0x03
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	4f e7       	ldi	r20, 0x7F	; 127
    2c74:	53 e4       	ldi	r21, 0x43	; 67
    2c76:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2c7a:	18 16       	cp	r1, r24
    2c7c:	0c f0       	brlt	.+2      	; 0x2c80 <LCDByte+0x108>
    2c7e:	c0 c0       	rjmp	.+384    	; 0x2e00 <LCDByte+0x288>
	{
		_delay_ms(__us / 1000.0);
    2c80:	fe 01       	movw	r30, r28
    2c82:	eb 58       	subi	r30, 0x8B	; 139
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	60 81       	ld	r22, Z
    2c88:	71 81       	ldd	r23, Z+1	; 0x01
    2c8a:	82 81       	ldd	r24, Z+2	; 0x02
    2c8c:	93 81       	ldd	r25, Z+3	; 0x03
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	4a e7       	ldi	r20, 0x7A	; 122
    2c94:	54 e4       	ldi	r21, 0x44	; 68
    2c96:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	e4 59       	subi	r30, 0x94	; 148
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	80 83       	st	Z, r24
    2ca6:	91 83       	std	Z+1, r25	; 0x01
    2ca8:	a2 83       	std	Z+2, r26	; 0x02
    2caa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cac:	8e 01       	movw	r16, r28
    2cae:	08 59       	subi	r16, 0x98	; 152
    2cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb2:	fe 01       	movw	r30, r28
    2cb4:	e4 59       	subi	r30, 0x94	; 148
    2cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb8:	60 81       	ld	r22, Z
    2cba:	71 81       	ldd	r23, Z+1	; 0x01
    2cbc:	82 81       	ldd	r24, Z+2	; 0x02
    2cbe:	93 81       	ldd	r25, Z+3	; 0x03
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	4a ef       	ldi	r20, 0xFA	; 250
    2cc6:	54 e4       	ldi	r21, 0x44	; 68
    2cc8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	f8 01       	movw	r30, r16
    2cd2:	80 83       	st	Z, r24
    2cd4:	91 83       	std	Z+1, r25	; 0x01
    2cd6:	a2 83       	std	Z+2, r26	; 0x02
    2cd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cda:	fe 01       	movw	r30, r28
    2cdc:	e8 59       	subi	r30, 0x98	; 152
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	60 81       	ld	r22, Z
    2ce2:	71 81       	ldd	r23, Z+1	; 0x01
    2ce4:	82 81       	ldd	r24, Z+2	; 0x02
    2ce6:	93 81       	ldd	r25, Z+3	; 0x03
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	40 e8       	ldi	r20, 0x80	; 128
    2cee:	5f e3       	ldi	r21, 0x3F	; 63
    2cf0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2cf4:	88 23       	and	r24, r24
    2cf6:	44 f4       	brge	.+16     	; 0x2d08 <LCDByte+0x190>
		__ticks = 1;
    2cf8:	fe 01       	movw	r30, r28
    2cfa:	ea 59       	subi	r30, 0x9A	; 154
    2cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	91 83       	std	Z+1, r25	; 0x01
    2d04:	80 83       	st	Z, r24
    2d06:	64 c0       	rjmp	.+200    	; 0x2dd0 <LCDByte+0x258>
	else if (__tmp > 65535)
    2d08:	fe 01       	movw	r30, r28
    2d0a:	e8 59       	subi	r30, 0x98	; 152
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	60 81       	ld	r22, Z
    2d10:	71 81       	ldd	r23, Z+1	; 0x01
    2d12:	82 81       	ldd	r24, Z+2	; 0x02
    2d14:	93 81       	ldd	r25, Z+3	; 0x03
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	3f ef       	ldi	r19, 0xFF	; 255
    2d1a:	4f e7       	ldi	r20, 0x7F	; 127
    2d1c:	57 e4       	ldi	r21, 0x47	; 71
    2d1e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2d22:	18 16       	cp	r1, r24
    2d24:	0c f0       	brlt	.+2      	; 0x2d28 <LCDByte+0x1b0>
    2d26:	43 c0       	rjmp	.+134    	; 0x2dae <LCDByte+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d28:	fe 01       	movw	r30, r28
    2d2a:	e4 59       	subi	r30, 0x94	; 148
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	60 81       	ld	r22, Z
    2d30:	71 81       	ldd	r23, Z+1	; 0x01
    2d32:	82 81       	ldd	r24, Z+2	; 0x02
    2d34:	93 81       	ldd	r25, Z+3	; 0x03
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	40 e2       	ldi	r20, 0x20	; 32
    2d3c:	51 e4       	ldi	r21, 0x41	; 65
    2d3e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	8e 01       	movw	r16, r28
    2d48:	0a 59       	subi	r16, 0x9A	; 154
    2d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4c:	bc 01       	movw	r22, r24
    2d4e:	cd 01       	movw	r24, r26
    2d50:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	f8 01       	movw	r30, r16
    2d5a:	91 83       	std	Z+1, r25	; 0x01
    2d5c:	80 83       	st	Z, r24
    2d5e:	1f c0       	rjmp	.+62     	; 0x2d9e <LCDByte+0x226>
    2d60:	fe 01       	movw	r30, r28
    2d62:	ec 59       	subi	r30, 0x9C	; 156
    2d64:	ff 4f       	sbci	r31, 0xFF	; 255
    2d66:	88 ec       	ldi	r24, 0xC8	; 200
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	91 83       	std	Z+1, r25	; 0x01
    2d6c:	80 83       	st	Z, r24
    2d6e:	fe 01       	movw	r30, r28
    2d70:	ec 59       	subi	r30, 0x9C	; 156
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	80 81       	ld	r24, Z
    2d76:	91 81       	ldd	r25, Z+1	; 0x01
    2d78:	01 97       	sbiw	r24, 0x01	; 1
    2d7a:	f1 f7       	brne	.-4      	; 0x2d78 <LCDByte+0x200>
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	ec 59       	subi	r30, 0x9C	; 156
    2d80:	ff 4f       	sbci	r31, 0xFF	; 255
    2d82:	91 83       	std	Z+1, r25	; 0x01
    2d84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d86:	de 01       	movw	r26, r28
    2d88:	aa 59       	subi	r26, 0x9A	; 154
    2d8a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	ea 59       	subi	r30, 0x9A	; 154
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	80 81       	ld	r24, Z
    2d94:	91 81       	ldd	r25, Z+1	; 0x01
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	11 96       	adiw	r26, 0x01	; 1
    2d9a:	9c 93       	st	X, r25
    2d9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9e:	fe 01       	movw	r30, r28
    2da0:	ea 59       	subi	r30, 0x9A	; 154
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	80 81       	ld	r24, Z
    2da6:	91 81       	ldd	r25, Z+1	; 0x01
    2da8:	00 97       	sbiw	r24, 0x00	; 0
    2daa:	d1 f6       	brne	.-76     	; 0x2d60 <LCDByte+0x1e8>
    2dac:	4b c0       	rjmp	.+150    	; 0x2e44 <LCDByte+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dae:	8e 01       	movw	r16, r28
    2db0:	0a 59       	subi	r16, 0x9A	; 154
    2db2:	1f 4f       	sbci	r17, 0xFF	; 255
    2db4:	fe 01       	movw	r30, r28
    2db6:	e8 59       	subi	r30, 0x98	; 152
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	60 81       	ld	r22, Z
    2dbc:	71 81       	ldd	r23, Z+1	; 0x01
    2dbe:	82 81       	ldd	r24, Z+2	; 0x02
    2dc0:	93 81       	ldd	r25, Z+3	; 0x03
    2dc2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	f8 01       	movw	r30, r16
    2dcc:	91 83       	std	Z+1, r25	; 0x01
    2dce:	80 83       	st	Z, r24
    2dd0:	de 01       	movw	r26, r28
    2dd2:	ae 59       	subi	r26, 0x9E	; 158
    2dd4:	bf 4f       	sbci	r27, 0xFF	; 255
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	ea 59       	subi	r30, 0x9A	; 154
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	80 81       	ld	r24, Z
    2dde:	91 81       	ldd	r25, Z+1	; 0x01
    2de0:	11 96       	adiw	r26, 0x01	; 1
    2de2:	9c 93       	st	X, r25
    2de4:	8e 93       	st	-X, r24
    2de6:	fe 01       	movw	r30, r28
    2de8:	ee 59       	subi	r30, 0x9E	; 158
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	80 81       	ld	r24, Z
    2dee:	91 81       	ldd	r25, Z+1	; 0x01
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	f1 f7       	brne	.-4      	; 0x2df0 <LCDByte+0x278>
    2df4:	fe 01       	movw	r30, r28
    2df6:	ee 59       	subi	r30, 0x9E	; 158
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	91 83       	std	Z+1, r25	; 0x01
    2dfc:	80 83       	st	Z, r24
    2dfe:	22 c0       	rjmp	.+68     	; 0x2e44 <LCDByte+0x2cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e00:	8e 01       	movw	r16, r28
    2e02:	00 59       	subi	r16, 0x90	; 144
    2e04:	1f 4f       	sbci	r17, 0xFF	; 255
    2e06:	fe 01       	movw	r30, r28
    2e08:	ef 58       	subi	r30, 0x8F	; 143
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	60 81       	ld	r22, Z
    2e0e:	71 81       	ldd	r23, Z+1	; 0x01
    2e10:	82 81       	ldd	r24, Z+2	; 0x02
    2e12:	93 81       	ldd	r25, Z+3	; 0x03
    2e14:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	f8 01       	movw	r30, r16
    2e1e:	80 83       	st	Z, r24
    2e20:	de 01       	movw	r26, r28
    2e22:	af 59       	subi	r26, 0x9F	; 159
    2e24:	bf 4f       	sbci	r27, 0xFF	; 255
    2e26:	fe 01       	movw	r30, r28
    2e28:	e0 59       	subi	r30, 0x90	; 144
    2e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2c:	80 81       	ld	r24, Z
    2e2e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e30:	fe 01       	movw	r30, r28
    2e32:	ef 59       	subi	r30, 0x9F	; 159
    2e34:	ff 4f       	sbci	r31, 0xFF	; 255
    2e36:	80 81       	ld	r24, Z
    2e38:	8a 95       	dec	r24
    2e3a:	f1 f7       	brne	.-4      	; 0x2e38 <LCDByte+0x2c0>
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	ef 59       	subi	r30, 0x9F	; 159
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	80 83       	st	Z, r24

//  _delay_us(0.500);		//tAS old setting
_delay_us(5);		//tASnew setting

SET_E();
    2e44:	ab e3       	ldi	r26, 0x3B	; 59
    2e46:	b0 e0       	ldi	r27, 0x00	; 0
    2e48:	eb e3       	ldi	r30, 0x3B	; 59
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	80 81       	ld	r24, Z
    2e4e:	84 60       	ori	r24, 0x04	; 4
    2e50:	8c 93       	st	X, r24

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
    2e52:	eb e3       	ldi	r30, 0x3B	; 59
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 81       	ld	r24, Z
    2e58:	28 2f       	mov	r18, r24
    2e5a:	2f 70       	andi	r18, 0x0F	; 15
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	e5 58       	subi	r30, 0x85	; 133
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	80 81       	ld	r24, Z
    2e64:	88 2f       	mov	r24, r24
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	82 95       	swap	r24
    2e6a:	92 95       	swap	r25
    2e6c:	90 7f       	andi	r25, 0xF0	; 240
    2e6e:	98 27       	eor	r25, r24
    2e70:	80 7f       	andi	r24, 0xF0	; 240
    2e72:	98 27       	eor	r25, r24
    2e74:	82 2b       	or	r24, r18
    2e76:	fe 01       	movw	r30, r28
    2e78:	e7 58       	subi	r30, 0x87	; 135
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	80 83       	st	Z, r24
LCD_DATA_PORT=temp;
    2e7e:	ab e3       	ldi	r26, 0x3B	; 59
    2e80:	b0 e0       	ldi	r27, 0x00	; 0
    2e82:	fe 01       	movw	r30, r28
    2e84:	e7 58       	subi	r30, 0x87	; 135
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	80 81       	ld	r24, Z
    2e8a:	8c 93       	st	X, r24
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	e3 5a       	subi	r30, 0xA3	; 163
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	a0 ea       	ldi	r26, 0xA0	; 160
    2e98:	b0 e4       	ldi	r27, 0x40	; 64
    2e9a:	80 83       	st	Z, r24
    2e9c:	91 83       	std	Z+1, r25	; 0x01
    2e9e:	a2 83       	std	Z+2, r26	; 0x02
    2ea0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ea2:	8e 01       	movw	r16, r28
    2ea4:	07 5a       	subi	r16, 0xA7	; 167
    2ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	e3 5a       	subi	r30, 0xA3	; 163
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	60 81       	ld	r22, Z
    2eb0:	71 81       	ldd	r23, Z+1	; 0x01
    2eb2:	82 81       	ldd	r24, Z+2	; 0x02
    2eb4:	93 81       	ldd	r25, Z+3	; 0x03
    2eb6:	2b ea       	ldi	r18, 0xAB	; 171
    2eb8:	3a ea       	ldi	r19, 0xAA	; 170
    2eba:	4a e2       	ldi	r20, 0x2A	; 42
    2ebc:	50 e4       	ldi	r21, 0x40	; 64
    2ebe:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	f8 01       	movw	r30, r16
    2ec8:	80 83       	st	Z, r24
    2eca:	91 83       	std	Z+1, r25	; 0x01
    2ecc:	a2 83       	std	Z+2, r26	; 0x02
    2ece:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	e7 5a       	subi	r30, 0xA7	; 167
    2ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed6:	60 81       	ld	r22, Z
    2ed8:	71 81       	ldd	r23, Z+1	; 0x01
    2eda:	82 81       	ldd	r24, Z+2	; 0x02
    2edc:	93 81       	ldd	r25, Z+3	; 0x03
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	40 e8       	ldi	r20, 0x80	; 128
    2ee4:	5f e3       	ldi	r21, 0x3F	; 63
    2ee6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2eea:	88 23       	and	r24, r24
    2eec:	34 f4       	brge	.+12     	; 0x2efa <LCDByte+0x382>
		__ticks = 1;
    2eee:	fe 01       	movw	r30, r28
    2ef0:	e8 5a       	subi	r30, 0xA8	; 168
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
    2ef6:	80 83       	st	Z, r24
    2ef8:	e0 c0       	rjmp	.+448    	; 0x30ba <LCDByte+0x542>
	else if (__tmp > 255)
    2efa:	fe 01       	movw	r30, r28
    2efc:	e7 5a       	subi	r30, 0xA7	; 167
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	60 81       	ld	r22, Z
    2f02:	71 81       	ldd	r23, Z+1	; 0x01
    2f04:	82 81       	ldd	r24, Z+2	; 0x02
    2f06:	93 81       	ldd	r25, Z+3	; 0x03
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	4f e7       	ldi	r20, 0x7F	; 127
    2f0e:	53 e4       	ldi	r21, 0x43	; 67
    2f10:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2f14:	18 16       	cp	r1, r24
    2f16:	0c f0       	brlt	.+2      	; 0x2f1a <LCDByte+0x3a2>
    2f18:	c0 c0       	rjmp	.+384    	; 0x309a <LCDByte+0x522>
	{
		_delay_ms(__us / 1000.0);
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	e3 5a       	subi	r30, 0xA3	; 163
    2f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f20:	60 81       	ld	r22, Z
    2f22:	71 81       	ldd	r23, Z+1	; 0x01
    2f24:	82 81       	ldd	r24, Z+2	; 0x02
    2f26:	93 81       	ldd	r25, Z+3	; 0x03
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	4a e7       	ldi	r20, 0x7A	; 122
    2f2e:	54 e4       	ldi	r21, 0x44	; 68
    2f30:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	fe 01       	movw	r30, r28
    2f3a:	ec 5a       	subi	r30, 0xAC	; 172
    2f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3e:	80 83       	st	Z, r24
    2f40:	91 83       	std	Z+1, r25	; 0x01
    2f42:	a2 83       	std	Z+2, r26	; 0x02
    2f44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f46:	8e 01       	movw	r16, r28
    2f48:	00 5b       	subi	r16, 0xB0	; 176
    2f4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4c:	fe 01       	movw	r30, r28
    2f4e:	ec 5a       	subi	r30, 0xAC	; 172
    2f50:	ff 4f       	sbci	r31, 0xFF	; 255
    2f52:	60 81       	ld	r22, Z
    2f54:	71 81       	ldd	r23, Z+1	; 0x01
    2f56:	82 81       	ldd	r24, Z+2	; 0x02
    2f58:	93 81       	ldd	r25, Z+3	; 0x03
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	4a ef       	ldi	r20, 0xFA	; 250
    2f60:	54 e4       	ldi	r21, 0x44	; 68
    2f62:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	f8 01       	movw	r30, r16
    2f6c:	80 83       	st	Z, r24
    2f6e:	91 83       	std	Z+1, r25	; 0x01
    2f70:	a2 83       	std	Z+2, r26	; 0x02
    2f72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f74:	fe 01       	movw	r30, r28
    2f76:	e0 5b       	subi	r30, 0xB0	; 176
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	60 81       	ld	r22, Z
    2f7c:	71 81       	ldd	r23, Z+1	; 0x01
    2f7e:	82 81       	ldd	r24, Z+2	; 0x02
    2f80:	93 81       	ldd	r25, Z+3	; 0x03
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e8       	ldi	r20, 0x80	; 128
    2f88:	5f e3       	ldi	r21, 0x3F	; 63
    2f8a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2f8e:	88 23       	and	r24, r24
    2f90:	44 f4       	brge	.+16     	; 0x2fa2 <LCDByte+0x42a>
		__ticks = 1;
    2f92:	fe 01       	movw	r30, r28
    2f94:	e2 5b       	subi	r30, 0xB2	; 178
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	91 83       	std	Z+1, r25	; 0x01
    2f9e:	80 83       	st	Z, r24
    2fa0:	64 c0       	rjmp	.+200    	; 0x306a <LCDByte+0x4f2>
	else if (__tmp > 65535)
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	e0 5b       	subi	r30, 0xB0	; 176
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	60 81       	ld	r22, Z
    2faa:	71 81       	ldd	r23, Z+1	; 0x01
    2fac:	82 81       	ldd	r24, Z+2	; 0x02
    2fae:	93 81       	ldd	r25, Z+3	; 0x03
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	3f ef       	ldi	r19, 0xFF	; 255
    2fb4:	4f e7       	ldi	r20, 0x7F	; 127
    2fb6:	57 e4       	ldi	r21, 0x47	; 71
    2fb8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2fbc:	18 16       	cp	r1, r24
    2fbe:	0c f0       	brlt	.+2      	; 0x2fc2 <LCDByte+0x44a>
    2fc0:	43 c0       	rjmp	.+134    	; 0x3048 <LCDByte+0x4d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	ec 5a       	subi	r30, 0xAC	; 172
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	60 81       	ld	r22, Z
    2fca:	71 81       	ldd	r23, Z+1	; 0x01
    2fcc:	82 81       	ldd	r24, Z+2	; 0x02
    2fce:	93 81       	ldd	r25, Z+3	; 0x03
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	40 e2       	ldi	r20, 0x20	; 32
    2fd6:	51 e4       	ldi	r21, 0x41	; 65
    2fd8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	8e 01       	movw	r16, r28
    2fe2:	02 5b       	subi	r16, 0xB2	; 178
    2fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe6:	bc 01       	movw	r22, r24
    2fe8:	cd 01       	movw	r24, r26
    2fea:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	f8 01       	movw	r30, r16
    2ff4:	91 83       	std	Z+1, r25	; 0x01
    2ff6:	80 83       	st	Z, r24
    2ff8:	1f c0       	rjmp	.+62     	; 0x3038 <LCDByte+0x4c0>
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	e4 5b       	subi	r30, 0xB4	; 180
    2ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    3000:	88 ec       	ldi	r24, 0xC8	; 200
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	91 83       	std	Z+1, r25	; 0x01
    3006:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3008:	fe 01       	movw	r30, r28
    300a:	e4 5b       	subi	r30, 0xB4	; 180
    300c:	ff 4f       	sbci	r31, 0xFF	; 255
    300e:	80 81       	ld	r24, Z
    3010:	91 81       	ldd	r25, Z+1	; 0x01
    3012:	01 97       	sbiw	r24, 0x01	; 1
    3014:	f1 f7       	brne	.-4      	; 0x3012 <LCDByte+0x49a>
    3016:	fe 01       	movw	r30, r28
    3018:	e4 5b       	subi	r30, 0xB4	; 180
    301a:	ff 4f       	sbci	r31, 0xFF	; 255
    301c:	91 83       	std	Z+1, r25	; 0x01
    301e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3020:	de 01       	movw	r26, r28
    3022:	a2 5b       	subi	r26, 0xB2	; 178
    3024:	bf 4f       	sbci	r27, 0xFF	; 255
    3026:	fe 01       	movw	r30, r28
    3028:	e2 5b       	subi	r30, 0xB2	; 178
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	80 81       	ld	r24, Z
    302e:	91 81       	ldd	r25, Z+1	; 0x01
    3030:	01 97       	sbiw	r24, 0x01	; 1
    3032:	11 96       	adiw	r26, 0x01	; 1
    3034:	9c 93       	st	X, r25
    3036:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3038:	fe 01       	movw	r30, r28
    303a:	e2 5b       	subi	r30, 0xB2	; 178
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	80 81       	ld	r24, Z
    3040:	91 81       	ldd	r25, Z+1	; 0x01
    3042:	00 97       	sbiw	r24, 0x00	; 0
    3044:	d1 f6       	brne	.-76     	; 0x2ffa <LCDByte+0x482>
    3046:	4b c0       	rjmp	.+150    	; 0x30de <LCDByte+0x566>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3048:	8e 01       	movw	r16, r28
    304a:	02 5b       	subi	r16, 0xB2	; 178
    304c:	1f 4f       	sbci	r17, 0xFF	; 255
    304e:	fe 01       	movw	r30, r28
    3050:	e0 5b       	subi	r30, 0xB0	; 176
    3052:	ff 4f       	sbci	r31, 0xFF	; 255
    3054:	60 81       	ld	r22, Z
    3056:	71 81       	ldd	r23, Z+1	; 0x01
    3058:	82 81       	ldd	r24, Z+2	; 0x02
    305a:	93 81       	ldd	r25, Z+3	; 0x03
    305c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	f8 01       	movw	r30, r16
    3066:	91 83       	std	Z+1, r25	; 0x01
    3068:	80 83       	st	Z, r24
    306a:	de 01       	movw	r26, r28
    306c:	a6 5b       	subi	r26, 0xB6	; 182
    306e:	bf 4f       	sbci	r27, 0xFF	; 255
    3070:	fe 01       	movw	r30, r28
    3072:	e2 5b       	subi	r30, 0xB2	; 178
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	80 81       	ld	r24, Z
    3078:	91 81       	ldd	r25, Z+1	; 0x01
    307a:	11 96       	adiw	r26, 0x01	; 1
    307c:	9c 93       	st	X, r25
    307e:	8e 93       	st	-X, r24
    3080:	fe 01       	movw	r30, r28
    3082:	e6 5b       	subi	r30, 0xB6	; 182
    3084:	ff 4f       	sbci	r31, 0xFF	; 255
    3086:	80 81       	ld	r24, Z
    3088:	91 81       	ldd	r25, Z+1	; 0x01
    308a:	01 97       	sbiw	r24, 0x01	; 1
    308c:	f1 f7       	brne	.-4      	; 0x308a <LCDByte+0x512>
    308e:	fe 01       	movw	r30, r28
    3090:	e6 5b       	subi	r30, 0xB6	; 182
    3092:	ff 4f       	sbci	r31, 0xFF	; 255
    3094:	91 83       	std	Z+1, r25	; 0x01
    3096:	80 83       	st	Z, r24
    3098:	22 c0       	rjmp	.+68     	; 0x30de <LCDByte+0x566>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    309a:	8e 01       	movw	r16, r28
    309c:	08 5a       	subi	r16, 0xA8	; 168
    309e:	1f 4f       	sbci	r17, 0xFF	; 255
    30a0:	fe 01       	movw	r30, r28
    30a2:	e7 5a       	subi	r30, 0xA7	; 167
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	60 81       	ld	r22, Z
    30a8:	71 81       	ldd	r23, Z+1	; 0x01
    30aa:	82 81       	ldd	r24, Z+2	; 0x02
    30ac:	93 81       	ldd	r25, Z+3	; 0x03
    30ae:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	f8 01       	movw	r30, r16
    30b8:	80 83       	st	Z, r24
    30ba:	de 01       	movw	r26, r28
    30bc:	a7 5b       	subi	r26, 0xB7	; 183
    30be:	bf 4f       	sbci	r27, 0xFF	; 255
    30c0:	fe 01       	movw	r30, r28
    30c2:	e8 5a       	subi	r30, 0xA8	; 168
    30c4:	ff 4f       	sbci	r31, 0xFF	; 255
    30c6:	80 81       	ld	r24, Z
    30c8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    30ca:	fe 01       	movw	r30, r28
    30cc:	e7 5b       	subi	r30, 0xB7	; 183
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	80 81       	ld	r24, Z
    30d2:	8a 95       	dec	r24
    30d4:	f1 f7       	brne	.-4      	; 0x30d2 <LCDByte+0x55a>
    30d6:	fe 01       	movw	r30, r28
    30d8:	e7 5b       	subi	r30, 0xB7	; 183
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	80 83       	st	Z, r24
//  _delay_us(1);			//tEH old setting
_delay_us(5);			//tEH   new setting

//Now data lines are stable pull E low for transmission

CLEAR_E();
    30de:	ab e3       	ldi	r26, 0x3B	; 59
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	eb e3       	ldi	r30, 0x3B	; 59
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	80 81       	ld	r24, Z
    30e8:	8b 7f       	andi	r24, 0xFB	; 251
    30ea:	8c 93       	st	X, r24
    30ec:	fe 01       	movw	r30, r28
    30ee:	eb 5b       	subi	r30, 0xBB	; 187
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	a0 ea       	ldi	r26, 0xA0	; 160
    30f8:	b0 e4       	ldi	r27, 0x40	; 64
    30fa:	80 83       	st	Z, r24
    30fc:	91 83       	std	Z+1, r25	; 0x01
    30fe:	a2 83       	std	Z+2, r26	; 0x02
    3100:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3102:	8e 01       	movw	r16, r28
    3104:	0f 5b       	subi	r16, 0xBF	; 191
    3106:	1f 4f       	sbci	r17, 0xFF	; 255
    3108:	fe 01       	movw	r30, r28
    310a:	eb 5b       	subi	r30, 0xBB	; 187
    310c:	ff 4f       	sbci	r31, 0xFF	; 255
    310e:	60 81       	ld	r22, Z
    3110:	71 81       	ldd	r23, Z+1	; 0x01
    3112:	82 81       	ldd	r24, Z+2	; 0x02
    3114:	93 81       	ldd	r25, Z+3	; 0x03
    3116:	2b ea       	ldi	r18, 0xAB	; 171
    3118:	3a ea       	ldi	r19, 0xAA	; 170
    311a:	4a e2       	ldi	r20, 0x2A	; 42
    311c:	50 e4       	ldi	r21, 0x40	; 64
    311e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	f8 01       	movw	r30, r16
    3128:	80 83       	st	Z, r24
    312a:	91 83       	std	Z+1, r25	; 0x01
    312c:	a2 83       	std	Z+2, r26	; 0x02
    312e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3130:	fe 01       	movw	r30, r28
    3132:	ef 5b       	subi	r30, 0xBF	; 191
    3134:	ff 4f       	sbci	r31, 0xFF	; 255
    3136:	60 81       	ld	r22, Z
    3138:	71 81       	ldd	r23, Z+1	; 0x01
    313a:	82 81       	ldd	r24, Z+2	; 0x02
    313c:	93 81       	ldd	r25, Z+3	; 0x03
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	40 e8       	ldi	r20, 0x80	; 128
    3144:	5f e3       	ldi	r21, 0x3F	; 63
    3146:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    314a:	88 23       	and	r24, r24
    314c:	34 f4       	brge	.+12     	; 0x315a <LCDByte+0x5e2>
		__ticks = 1;
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	fe 01       	movw	r30, r28
    3152:	e0 5c       	subi	r30, 0xC0	; 192
    3154:	ff 4f       	sbci	r31, 0xFF	; 255
    3156:	80 83       	st	Z, r24
    3158:	9d c0       	rjmp	.+314    	; 0x3294 <LCDByte+0x71c>
	else if (__tmp > 255)
    315a:	fe 01       	movw	r30, r28
    315c:	ef 5b       	subi	r30, 0xBF	; 191
    315e:	ff 4f       	sbci	r31, 0xFF	; 255
    3160:	60 81       	ld	r22, Z
    3162:	71 81       	ldd	r23, Z+1	; 0x01
    3164:	82 81       	ldd	r24, Z+2	; 0x02
    3166:	93 81       	ldd	r25, Z+3	; 0x03
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	4f e7       	ldi	r20, 0x7F	; 127
    316e:	53 e4       	ldi	r21, 0x43	; 67
    3170:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3174:	18 16       	cp	r1, r24
    3176:	0c f0       	brlt	.+2      	; 0x317a <LCDByte+0x602>
    3178:	7e c0       	rjmp	.+252    	; 0x3276 <LCDByte+0x6fe>
	{
		_delay_ms(__us / 1000.0);
    317a:	fe 01       	movw	r30, r28
    317c:	eb 5b       	subi	r30, 0xBB	; 187
    317e:	ff 4f       	sbci	r31, 0xFF	; 255
    3180:	60 81       	ld	r22, Z
    3182:	71 81       	ldd	r23, Z+1	; 0x01
    3184:	82 81       	ldd	r24, Z+2	; 0x02
    3186:	93 81       	ldd	r25, Z+3	; 0x03
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	4a e7       	ldi	r20, 0x7A	; 122
    318e:	54 e4       	ldi	r21, 0x44	; 68
    3190:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	8c af       	std	Y+60, r24	; 0x3c
    319a:	9d af       	std	Y+61, r25	; 0x3d
    319c:	ae af       	std	Y+62, r26	; 0x3e
    319e:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a0:	6c ad       	ldd	r22, Y+60	; 0x3c
    31a2:	7d ad       	ldd	r23, Y+61	; 0x3d
    31a4:	8e ad       	ldd	r24, Y+62	; 0x3e
    31a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	4a ef       	ldi	r20, 0xFA	; 250
    31ae:	54 e4       	ldi	r21, 0x44	; 68
    31b0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	88 af       	std	Y+56, r24	; 0x38
    31ba:	99 af       	std	Y+57, r25	; 0x39
    31bc:	aa af       	std	Y+58, r26	; 0x3a
    31be:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    31c0:	68 ad       	ldd	r22, Y+56	; 0x38
    31c2:	79 ad       	ldd	r23, Y+57	; 0x39
    31c4:	8a ad       	ldd	r24, Y+58	; 0x3a
    31c6:	9b ad       	ldd	r25, Y+59	; 0x3b
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	40 e8       	ldi	r20, 0x80	; 128
    31ce:	5f e3       	ldi	r21, 0x3F	; 63
    31d0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    31d4:	88 23       	and	r24, r24
    31d6:	2c f4       	brge	.+10     	; 0x31e2 <LCDByte+0x66a>
		__ticks = 1;
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	9f ab       	std	Y+55, r25	; 0x37
    31de:	8e ab       	std	Y+54, r24	; 0x36
    31e0:	3f c0       	rjmp	.+126    	; 0x3260 <LCDByte+0x6e8>
	else if (__tmp > 65535)
    31e2:	68 ad       	ldd	r22, Y+56	; 0x38
    31e4:	79 ad       	ldd	r23, Y+57	; 0x39
    31e6:	8a ad       	ldd	r24, Y+58	; 0x3a
    31e8:	9b ad       	ldd	r25, Y+59	; 0x3b
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	3f ef       	ldi	r19, 0xFF	; 255
    31ee:	4f e7       	ldi	r20, 0x7F	; 127
    31f0:	57 e4       	ldi	r21, 0x47	; 71
    31f2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    31f6:	18 16       	cp	r1, r24
    31f8:	4c f5       	brge	.+82     	; 0x324c <LCDByte+0x6d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31fa:	6c ad       	ldd	r22, Y+60	; 0x3c
    31fc:	7d ad       	ldd	r23, Y+61	; 0x3d
    31fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    3200:	9f ad       	ldd	r25, Y+63	; 0x3f
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	40 e2       	ldi	r20, 0x20	; 32
    3208:	51 e4       	ldi	r21, 0x41	; 65
    320a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	bc 01       	movw	r22, r24
    3214:	cd 01       	movw	r24, r26
    3216:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	9f ab       	std	Y+55, r25	; 0x37
    3220:	8e ab       	std	Y+54, r24	; 0x36
    3222:	0f c0       	rjmp	.+30     	; 0x3242 <LCDByte+0x6ca>
    3224:	88 ec       	ldi	r24, 0xC8	; 200
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	9d ab       	std	Y+53, r25	; 0x35
    322a:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    322c:	8c a9       	ldd	r24, Y+52	; 0x34
    322e:	9d a9       	ldd	r25, Y+53	; 0x35
    3230:	01 97       	sbiw	r24, 0x01	; 1
    3232:	f1 f7       	brne	.-4      	; 0x3230 <LCDByte+0x6b8>
    3234:	9d ab       	std	Y+53, r25	; 0x35
    3236:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3238:	8e a9       	ldd	r24, Y+54	; 0x36
    323a:	9f a9       	ldd	r25, Y+55	; 0x37
    323c:	01 97       	sbiw	r24, 0x01	; 1
    323e:	9f ab       	std	Y+55, r25	; 0x37
    3240:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3242:	8e a9       	ldd	r24, Y+54	; 0x36
    3244:	9f a9       	ldd	r25, Y+55	; 0x37
    3246:	00 97       	sbiw	r24, 0x00	; 0
    3248:	69 f7       	brne	.-38     	; 0x3224 <LCDByte+0x6ac>
    324a:	2d c0       	rjmp	.+90     	; 0x32a6 <LCDByte+0x72e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    324c:	68 ad       	ldd	r22, Y+56	; 0x38
    324e:	79 ad       	ldd	r23, Y+57	; 0x39
    3250:	8a ad       	ldd	r24, Y+58	; 0x3a
    3252:	9b ad       	ldd	r25, Y+59	; 0x3b
    3254:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	9f ab       	std	Y+55, r25	; 0x37
    325e:	8e ab       	std	Y+54, r24	; 0x36
    3260:	8e a9       	ldd	r24, Y+54	; 0x36
    3262:	9f a9       	ldd	r25, Y+55	; 0x37
    3264:	9b ab       	std	Y+51, r25	; 0x33
    3266:	8a ab       	std	Y+50, r24	; 0x32
    3268:	8a a9       	ldd	r24, Y+50	; 0x32
    326a:	9b a9       	ldd	r25, Y+51	; 0x33
    326c:	01 97       	sbiw	r24, 0x01	; 1
    326e:	f1 f7       	brne	.-4      	; 0x326c <LCDByte+0x6f4>
    3270:	9b ab       	std	Y+51, r25	; 0x33
    3272:	8a ab       	std	Y+50, r24	; 0x32
    3274:	18 c0       	rjmp	.+48     	; 0x32a6 <LCDByte+0x72e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3276:	fe 01       	movw	r30, r28
    3278:	ef 5b       	subi	r30, 0xBF	; 191
    327a:	ff 4f       	sbci	r31, 0xFF	; 255
    327c:	60 81       	ld	r22, Z
    327e:	71 81       	ldd	r23, Z+1	; 0x01
    3280:	82 81       	ldd	r24, Z+2	; 0x02
    3282:	93 81       	ldd	r25, Z+3	; 0x03
    3284:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	fe 01       	movw	r30, r28
    328e:	e0 5c       	subi	r30, 0xC0	; 192
    3290:	ff 4f       	sbci	r31, 0xFF	; 255
    3292:	80 83       	st	Z, r24
    3294:	fe 01       	movw	r30, r28
    3296:	e0 5c       	subi	r30, 0xC0	; 192
    3298:	ff 4f       	sbci	r31, 0xFF	; 255
    329a:	80 81       	ld	r24, Z
    329c:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    329e:	89 a9       	ldd	r24, Y+49	; 0x31
    32a0:	8a 95       	dec	r24
    32a2:	f1 f7       	brne	.-4      	; 0x32a0 <LCDByte+0x728>
    32a4:	89 ab       	std	Y+49, r24	; 0x31

//  _delay_us(1);   // old setting
_delay_us(5);       // new setting

//Send the lower nibble
SET_E();
    32a6:	ab e3       	ldi	r26, 0x3B	; 59
    32a8:	b0 e0       	ldi	r27, 0x00	; 0
    32aa:	eb e3       	ldi	r30, 0x3B	; 59
    32ac:	f0 e0       	ldi	r31, 0x00	; 0
    32ae:	80 81       	ld	r24, Z
    32b0:	84 60       	ori	r24, 0x04	; 4
    32b2:	8c 93       	st	X, r24

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
    32b4:	eb e3       	ldi	r30, 0x3B	; 59
    32b6:	f0 e0       	ldi	r31, 0x00	; 0
    32b8:	80 81       	ld	r24, Z
    32ba:	28 2f       	mov	r18, r24
    32bc:	2f 70       	andi	r18, 0x0F	; 15
    32be:	fe 01       	movw	r30, r28
    32c0:	e6 58       	subi	r30, 0x86	; 134
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	80 81       	ld	r24, Z
    32c6:	88 2f       	mov	r24, r24
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	82 95       	swap	r24
    32cc:	92 95       	swap	r25
    32ce:	90 7f       	andi	r25, 0xF0	; 240
    32d0:	98 27       	eor	r25, r24
    32d2:	80 7f       	andi	r24, 0xF0	; 240
    32d4:	98 27       	eor	r25, r24
    32d6:	82 2b       	or	r24, r18
    32d8:	fe 01       	movw	r30, r28
    32da:	e7 58       	subi	r30, 0x87	; 135
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	80 83       	st	Z, r24

LCD_DATA_PORT=temp;
    32e0:	ab e3       	ldi	r26, 0x3B	; 59
    32e2:	b0 e0       	ldi	r27, 0x00	; 0
    32e4:	fe 01       	movw	r30, r28
    32e6:	e7 58       	subi	r30, 0x87	; 135
    32e8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ea:	80 81       	ld	r24, Z
    32ec:	8c 93       	st	X, r24
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	a0 ea       	ldi	r26, 0xA0	; 160
    32f4:	b0 e4       	ldi	r27, 0x40	; 64
    32f6:	8d a7       	std	Y+45, r24	; 0x2d
    32f8:	9e a7       	std	Y+46, r25	; 0x2e
    32fa:	af a7       	std	Y+47, r26	; 0x2f
    32fc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    32fe:	6d a5       	ldd	r22, Y+45	; 0x2d
    3300:	7e a5       	ldd	r23, Y+46	; 0x2e
    3302:	8f a5       	ldd	r24, Y+47	; 0x2f
    3304:	98 a9       	ldd	r25, Y+48	; 0x30
    3306:	2b ea       	ldi	r18, 0xAB	; 171
    3308:	3a ea       	ldi	r19, 0xAA	; 170
    330a:	4a e2       	ldi	r20, 0x2A	; 42
    330c:	50 e4       	ldi	r21, 0x40	; 64
    330e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	89 a7       	std	Y+41, r24	; 0x29
    3318:	9a a7       	std	Y+42, r25	; 0x2a
    331a:	ab a7       	std	Y+43, r26	; 0x2b
    331c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    331e:	69 a5       	ldd	r22, Y+41	; 0x29
    3320:	7a a5       	ldd	r23, Y+42	; 0x2a
    3322:	8b a5       	ldd	r24, Y+43	; 0x2b
    3324:	9c a5       	ldd	r25, Y+44	; 0x2c
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e8       	ldi	r20, 0x80	; 128
    332c:	5f e3       	ldi	r21, 0x3F	; 63
    332e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3332:	88 23       	and	r24, r24
    3334:	1c f4       	brge	.+6      	; 0x333c <LCDByte+0x7c4>
		__ticks = 1;
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	88 a7       	std	Y+40, r24	; 0x28
    333a:	91 c0       	rjmp	.+290    	; 0x345e <LCDByte+0x8e6>
	else if (__tmp > 255)
    333c:	69 a5       	ldd	r22, Y+41	; 0x29
    333e:	7a a5       	ldd	r23, Y+42	; 0x2a
    3340:	8b a5       	ldd	r24, Y+43	; 0x2b
    3342:	9c a5       	ldd	r25, Y+44	; 0x2c
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	4f e7       	ldi	r20, 0x7F	; 127
    334a:	53 e4       	ldi	r21, 0x43	; 67
    334c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3350:	18 16       	cp	r1, r24
    3352:	0c f0       	brlt	.+2      	; 0x3356 <LCDByte+0x7de>
    3354:	7b c0       	rjmp	.+246    	; 0x344c <LCDByte+0x8d4>
	{
		_delay_ms(__us / 1000.0);
    3356:	6d a5       	ldd	r22, Y+45	; 0x2d
    3358:	7e a5       	ldd	r23, Y+46	; 0x2e
    335a:	8f a5       	ldd	r24, Y+47	; 0x2f
    335c:	98 a9       	ldd	r25, Y+48	; 0x30
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	4a e7       	ldi	r20, 0x7A	; 122
    3364:	54 e4       	ldi	r21, 0x44	; 68
    3366:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	8c a3       	std	Y+36, r24	; 0x24
    3370:	9d a3       	std	Y+37, r25	; 0x25
    3372:	ae a3       	std	Y+38, r26	; 0x26
    3374:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3376:	6c a1       	ldd	r22, Y+36	; 0x24
    3378:	7d a1       	ldd	r23, Y+37	; 0x25
    337a:	8e a1       	ldd	r24, Y+38	; 0x26
    337c:	9f a1       	ldd	r25, Y+39	; 0x27
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	4a ef       	ldi	r20, 0xFA	; 250
    3384:	54 e4       	ldi	r21, 0x44	; 68
    3386:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	88 a3       	std	Y+32, r24	; 0x20
    3390:	99 a3       	std	Y+33, r25	; 0x21
    3392:	aa a3       	std	Y+34, r26	; 0x22
    3394:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3396:	68 a1       	ldd	r22, Y+32	; 0x20
    3398:	79 a1       	ldd	r23, Y+33	; 0x21
    339a:	8a a1       	ldd	r24, Y+34	; 0x22
    339c:	9b a1       	ldd	r25, Y+35	; 0x23
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	40 e8       	ldi	r20, 0x80	; 128
    33a4:	5f e3       	ldi	r21, 0x3F	; 63
    33a6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    33aa:	88 23       	and	r24, r24
    33ac:	2c f4       	brge	.+10     	; 0x33b8 <LCDByte+0x840>
		__ticks = 1;
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	9f 8f       	std	Y+31, r25	; 0x1f
    33b4:	8e 8f       	std	Y+30, r24	; 0x1e
    33b6:	3f c0       	rjmp	.+126    	; 0x3436 <LCDByte+0x8be>
	else if (__tmp > 65535)
    33b8:	68 a1       	ldd	r22, Y+32	; 0x20
    33ba:	79 a1       	ldd	r23, Y+33	; 0x21
    33bc:	8a a1       	ldd	r24, Y+34	; 0x22
    33be:	9b a1       	ldd	r25, Y+35	; 0x23
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	3f ef       	ldi	r19, 0xFF	; 255
    33c4:	4f e7       	ldi	r20, 0x7F	; 127
    33c6:	57 e4       	ldi	r21, 0x47	; 71
    33c8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    33cc:	18 16       	cp	r1, r24
    33ce:	4c f5       	brge	.+82     	; 0x3422 <LCDByte+0x8aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d0:	6c a1       	ldd	r22, Y+36	; 0x24
    33d2:	7d a1       	ldd	r23, Y+37	; 0x25
    33d4:	8e a1       	ldd	r24, Y+38	; 0x26
    33d6:	9f a1       	ldd	r25, Y+39	; 0x27
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	40 e2       	ldi	r20, 0x20	; 32
    33de:	51 e4       	ldi	r21, 0x41	; 65
    33e0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	bc 01       	movw	r22, r24
    33ea:	cd 01       	movw	r24, r26
    33ec:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	9f 8f       	std	Y+31, r25	; 0x1f
    33f6:	8e 8f       	std	Y+30, r24	; 0x1e
    33f8:	0f c0       	rjmp	.+30     	; 0x3418 <LCDByte+0x8a0>
    33fa:	88 ec       	ldi	r24, 0xC8	; 200
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	9d 8f       	std	Y+29, r25	; 0x1d
    3400:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3402:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3404:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3406:	01 97       	sbiw	r24, 0x01	; 1
    3408:	f1 f7       	brne	.-4      	; 0x3406 <LCDByte+0x88e>
    340a:	9d 8f       	std	Y+29, r25	; 0x1d
    340c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    340e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3410:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	9f 8f       	std	Y+31, r25	; 0x1f
    3416:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3418:	8e 8d       	ldd	r24, Y+30	; 0x1e
    341a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    341c:	00 97       	sbiw	r24, 0x00	; 0
    341e:	69 f7       	brne	.-38     	; 0x33fa <LCDByte+0x882>
    3420:	24 c0       	rjmp	.+72     	; 0x346a <LCDByte+0x8f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3422:	68 a1       	ldd	r22, Y+32	; 0x20
    3424:	79 a1       	ldd	r23, Y+33	; 0x21
    3426:	8a a1       	ldd	r24, Y+34	; 0x22
    3428:	9b a1       	ldd	r25, Y+35	; 0x23
    342a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	9f 8f       	std	Y+31, r25	; 0x1f
    3434:	8e 8f       	std	Y+30, r24	; 0x1e
    3436:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3438:	9f 8d       	ldd	r25, Y+31	; 0x1f
    343a:	9b 8f       	std	Y+27, r25	; 0x1b
    343c:	8a 8f       	std	Y+26, r24	; 0x1a
    343e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3440:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3442:	01 97       	sbiw	r24, 0x01	; 1
    3444:	f1 f7       	brne	.-4      	; 0x3442 <LCDByte+0x8ca>
    3446:	9b 8f       	std	Y+27, r25	; 0x1b
    3448:	8a 8f       	std	Y+26, r24	; 0x1a
    344a:	0f c0       	rjmp	.+30     	; 0x346a <LCDByte+0x8f2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    344c:	69 a5       	ldd	r22, Y+41	; 0x29
    344e:	7a a5       	ldd	r23, Y+42	; 0x2a
    3450:	8b a5       	ldd	r24, Y+43	; 0x2b
    3452:	9c a5       	ldd	r25, Y+44	; 0x2c
    3454:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3458:	dc 01       	movw	r26, r24
    345a:	cb 01       	movw	r24, r22
    345c:	88 a7       	std	Y+40, r24	; 0x28
    345e:	88 a5       	ldd	r24, Y+40	; 0x28
    3460:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3462:	89 8d       	ldd	r24, Y+25	; 0x19
    3464:	8a 95       	dec	r24
    3466:	f1 f7       	brne	.-4      	; 0x3464 <LCDByte+0x8ec>
    3468:	89 8f       	std	Y+25, r24	; 0x19
//  _delay_us(1);			//tEH old setting
_delay_us(5);			//tEH   new settimng

//SEND

CLEAR_E();
    346a:	ab e3       	ldi	r26, 0x3B	; 59
    346c:	b0 e0       	ldi	r27, 0x00	; 0
    346e:	eb e3       	ldi	r30, 0x3B	; 59
    3470:	f0 e0       	ldi	r31, 0x00	; 0
    3472:	80 81       	ld	r24, Z
    3474:	8b 7f       	andi	r24, 0xFB	; 251
    3476:	8c 93       	st	X, r24
    3478:	80 e0       	ldi	r24, 0x00	; 0
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	a0 ea       	ldi	r26, 0xA0	; 160
    347e:	b0 e4       	ldi	r27, 0x40	; 64
    3480:	8d 8b       	std	Y+21, r24	; 0x15
    3482:	9e 8b       	std	Y+22, r25	; 0x16
    3484:	af 8b       	std	Y+23, r26	; 0x17
    3486:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3488:	6d 89       	ldd	r22, Y+21	; 0x15
    348a:	7e 89       	ldd	r23, Y+22	; 0x16
    348c:	8f 89       	ldd	r24, Y+23	; 0x17
    348e:	98 8d       	ldd	r25, Y+24	; 0x18
    3490:	2b ea       	ldi	r18, 0xAB	; 171
    3492:	3a ea       	ldi	r19, 0xAA	; 170
    3494:	4a e2       	ldi	r20, 0x2A	; 42
    3496:	50 e4       	ldi	r21, 0x40	; 64
    3498:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    349c:	dc 01       	movw	r26, r24
    349e:	cb 01       	movw	r24, r22
    34a0:	89 8b       	std	Y+17, r24	; 0x11
    34a2:	9a 8b       	std	Y+18, r25	; 0x12
    34a4:	ab 8b       	std	Y+19, r26	; 0x13
    34a6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    34a8:	69 89       	ldd	r22, Y+17	; 0x11
    34aa:	7a 89       	ldd	r23, Y+18	; 0x12
    34ac:	8b 89       	ldd	r24, Y+19	; 0x13
    34ae:	9c 89       	ldd	r25, Y+20	; 0x14
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	40 e8       	ldi	r20, 0x80	; 128
    34b6:	5f e3       	ldi	r21, 0x3F	; 63
    34b8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    34bc:	88 23       	and	r24, r24
    34be:	1c f4       	brge	.+6      	; 0x34c6 <LCDByte+0x94e>
		__ticks = 1;
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	88 8b       	std	Y+16, r24	; 0x10
    34c4:	91 c0       	rjmp	.+290    	; 0x35e8 <LCDByte+0xa70>
	else if (__tmp > 255)
    34c6:	69 89       	ldd	r22, Y+17	; 0x11
    34c8:	7a 89       	ldd	r23, Y+18	; 0x12
    34ca:	8b 89       	ldd	r24, Y+19	; 0x13
    34cc:	9c 89       	ldd	r25, Y+20	; 0x14
    34ce:	20 e0       	ldi	r18, 0x00	; 0
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	4f e7       	ldi	r20, 0x7F	; 127
    34d4:	53 e4       	ldi	r21, 0x43	; 67
    34d6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    34da:	18 16       	cp	r1, r24
    34dc:	0c f0       	brlt	.+2      	; 0x34e0 <LCDByte+0x968>
    34de:	7b c0       	rjmp	.+246    	; 0x35d6 <LCDByte+0xa5e>
	{
		_delay_ms(__us / 1000.0);
    34e0:	6d 89       	ldd	r22, Y+21	; 0x15
    34e2:	7e 89       	ldd	r23, Y+22	; 0x16
    34e4:	8f 89       	ldd	r24, Y+23	; 0x17
    34e6:	98 8d       	ldd	r25, Y+24	; 0x18
    34e8:	20 e0       	ldi	r18, 0x00	; 0
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	4a e7       	ldi	r20, 0x7A	; 122
    34ee:	54 e4       	ldi	r21, 0x44	; 68
    34f0:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    34f4:	dc 01       	movw	r26, r24
    34f6:	cb 01       	movw	r24, r22
    34f8:	8c 87       	std	Y+12, r24	; 0x0c
    34fa:	9d 87       	std	Y+13, r25	; 0x0d
    34fc:	ae 87       	std	Y+14, r26	; 0x0e
    34fe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3500:	6c 85       	ldd	r22, Y+12	; 0x0c
    3502:	7d 85       	ldd	r23, Y+13	; 0x0d
    3504:	8e 85       	ldd	r24, Y+14	; 0x0e
    3506:	9f 85       	ldd	r25, Y+15	; 0x0f
    3508:	20 e0       	ldi	r18, 0x00	; 0
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	4a ef       	ldi	r20, 0xFA	; 250
    350e:	54 e4       	ldi	r21, 0x44	; 68
    3510:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3514:	dc 01       	movw	r26, r24
    3516:	cb 01       	movw	r24, r22
    3518:	88 87       	std	Y+8, r24	; 0x08
    351a:	99 87       	std	Y+9, r25	; 0x09
    351c:	aa 87       	std	Y+10, r26	; 0x0a
    351e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3520:	68 85       	ldd	r22, Y+8	; 0x08
    3522:	79 85       	ldd	r23, Y+9	; 0x09
    3524:	8a 85       	ldd	r24, Y+10	; 0x0a
    3526:	9b 85       	ldd	r25, Y+11	; 0x0b
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	40 e8       	ldi	r20, 0x80	; 128
    352e:	5f e3       	ldi	r21, 0x3F	; 63
    3530:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3534:	88 23       	and	r24, r24
    3536:	2c f4       	brge	.+10     	; 0x3542 <LCDByte+0x9ca>
		__ticks = 1;
    3538:	81 e0       	ldi	r24, 0x01	; 1
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	9f 83       	std	Y+7, r25	; 0x07
    353e:	8e 83       	std	Y+6, r24	; 0x06
    3540:	3f c0       	rjmp	.+126    	; 0x35c0 <LCDByte+0xa48>
	else if (__tmp > 65535)
    3542:	68 85       	ldd	r22, Y+8	; 0x08
    3544:	79 85       	ldd	r23, Y+9	; 0x09
    3546:	8a 85       	ldd	r24, Y+10	; 0x0a
    3548:	9b 85       	ldd	r25, Y+11	; 0x0b
    354a:	20 e0       	ldi	r18, 0x00	; 0
    354c:	3f ef       	ldi	r19, 0xFF	; 255
    354e:	4f e7       	ldi	r20, 0x7F	; 127
    3550:	57 e4       	ldi	r21, 0x47	; 71
    3552:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3556:	18 16       	cp	r1, r24
    3558:	4c f5       	brge	.+82     	; 0x35ac <LCDByte+0xa34>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    355a:	6c 85       	ldd	r22, Y+12	; 0x0c
    355c:	7d 85       	ldd	r23, Y+13	; 0x0d
    355e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3560:	9f 85       	ldd	r25, Y+15	; 0x0f
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	40 e2       	ldi	r20, 0x20	; 32
    3568:	51 e4       	ldi	r21, 0x41	; 65
    356a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    356e:	dc 01       	movw	r26, r24
    3570:	cb 01       	movw	r24, r22
    3572:	bc 01       	movw	r22, r24
    3574:	cd 01       	movw	r24, r26
    3576:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	9f 83       	std	Y+7, r25	; 0x07
    3580:	8e 83       	std	Y+6, r24	; 0x06
    3582:	0f c0       	rjmp	.+30     	; 0x35a2 <LCDByte+0xa2a>
    3584:	88 ec       	ldi	r24, 0xC8	; 200
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	9d 83       	std	Y+5, r25	; 0x05
    358a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    358c:	8c 81       	ldd	r24, Y+4	; 0x04
    358e:	9d 81       	ldd	r25, Y+5	; 0x05
    3590:	01 97       	sbiw	r24, 0x01	; 1
    3592:	f1 f7       	brne	.-4      	; 0x3590 <LCDByte+0xa18>
    3594:	9d 83       	std	Y+5, r25	; 0x05
    3596:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3598:	8e 81       	ldd	r24, Y+6	; 0x06
    359a:	9f 81       	ldd	r25, Y+7	; 0x07
    359c:	01 97       	sbiw	r24, 0x01	; 1
    359e:	9f 83       	std	Y+7, r25	; 0x07
    35a0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a2:	8e 81       	ldd	r24, Y+6	; 0x06
    35a4:	9f 81       	ldd	r25, Y+7	; 0x07
    35a6:	00 97       	sbiw	r24, 0x00	; 0
    35a8:	69 f7       	brne	.-38     	; 0x3584 <LCDByte+0xa0c>
    35aa:	24 c0       	rjmp	.+72     	; 0x35f4 <LCDByte+0xa7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ac:	68 85       	ldd	r22, Y+8	; 0x08
    35ae:	79 85       	ldd	r23, Y+9	; 0x09
    35b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    35b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    35b4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	9f 83       	std	Y+7, r25	; 0x07
    35be:	8e 83       	std	Y+6, r24	; 0x06
    35c0:	8e 81       	ldd	r24, Y+6	; 0x06
    35c2:	9f 81       	ldd	r25, Y+7	; 0x07
    35c4:	9b 83       	std	Y+3, r25	; 0x03
    35c6:	8a 83       	std	Y+2, r24	; 0x02
    35c8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ca:	9b 81       	ldd	r25, Y+3	; 0x03
    35cc:	01 97       	sbiw	r24, 0x01	; 1
    35ce:	f1 f7       	brne	.-4      	; 0x35cc <LCDByte+0xa54>
    35d0:	9b 83       	std	Y+3, r25	; 0x03
    35d2:	8a 83       	std	Y+2, r24	; 0x02
    35d4:	0f c0       	rjmp	.+30     	; 0x35f4 <LCDByte+0xa7c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    35d6:	69 89       	ldd	r22, Y+17	; 0x11
    35d8:	7a 89       	ldd	r23, Y+18	; 0x12
    35da:	8b 89       	ldd	r24, Y+19	; 0x13
    35dc:	9c 89       	ldd	r25, Y+20	; 0x14
    35de:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    35e2:	dc 01       	movw	r26, r24
    35e4:	cb 01       	movw	r24, r22
    35e6:	88 8b       	std	Y+16, r24	; 0x10
    35e8:	88 89       	ldd	r24, Y+16	; 0x10
    35ea:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    35ec:	89 81       	ldd	r24, Y+1	; 0x01
    35ee:	8a 95       	dec	r24
    35f0:	f1 f7       	brne	.-4      	; 0x35ee <LCDByte+0xa76>
    35f2:	89 83       	std	Y+1, r24	; 0x01

//  _delay_us(1);			//tELold setting
_delay_us(5);			//tEL new setting

LCDBusyLoop();
    35f4:	0e 94 08 1b 	call	0x3610	; 0x3610 <LCDBusyLoop>
}
    35f8:	c3 58       	subi	r28, 0x83	; 131
    35fa:	df 4f       	sbci	r29, 0xFF	; 255
    35fc:	0f b6       	in	r0, 0x3f	; 63
    35fe:	f8 94       	cli
    3600:	de bf       	out	0x3e, r29	; 62
    3602:	0f be       	out	0x3f, r0	; 63
    3604:	cd bf       	out	0x3d, r28	; 61
    3606:	cf 91       	pop	r28
    3608:	df 91       	pop	r29
    360a:	1f 91       	pop	r17
    360c:	0f 91       	pop	r16
    360e:	08 95       	ret

00003610 <LCDBusyLoop>:

void LCDBusyLoop()
{
    3610:	0f 93       	push	r16
    3612:	1f 93       	push	r17
    3614:	df 93       	push	r29
    3616:	cf 93       	push	r28
    3618:	cd b7       	in	r28, 0x3d	; 61
    361a:	de b7       	in	r29, 0x3e	; 62
    361c:	cb 5a       	subi	r28, 0xAB	; 171
    361e:	d0 40       	sbci	r29, 0x00	; 0
    3620:	0f b6       	in	r0, 0x3f	; 63
    3622:	f8 94       	cli
    3624:	de bf       	out	0x3e, r29	; 62
    3626:	0f be       	out	0x3f, r0	; 63
    3628:	cd bf       	out	0x3d, r28	; 61
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;
    362a:	fe 01       	movw	r30, r28
    362c:	e6 55       	subi	r30, 0x56	; 86
    362e:	ff 4f       	sbci	r31, 0xFF	; 255
    3630:	10 82       	st	Z, r1

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
    3632:	aa e3       	ldi	r26, 0x3A	; 58
    3634:	b0 e0       	ldi	r27, 0x00	; 0
    3636:	ea e3       	ldi	r30, 0x3A	; 58
    3638:	f0 e0       	ldi	r31, 0x00	; 0
    363a:	80 81       	ld	r24, Z
    363c:	8f 70       	andi	r24, 0x0F	; 15
    363e:	8c 93       	st	X, r24

	//change LCD mode
	SET_RW();		//Read mode
    3640:	ab e3       	ldi	r26, 0x3B	; 59
    3642:	b0 e0       	ldi	r27, 0x00	; 0
    3644:	eb e3       	ldi	r30, 0x3B	; 59
    3646:	f0 e0       	ldi	r31, 0x00	; 0
    3648:	80 81       	ld	r24, Z
    364a:	82 60       	ori	r24, 0x02	; 2
    364c:	8c 93       	st	X, r24
	CLEAR_RS();		//Read status
    364e:	ab e3       	ldi	r26, 0x3B	; 59
    3650:	b0 e0       	ldi	r27, 0x00	; 0
    3652:	eb e3       	ldi	r30, 0x3B	; 59
    3654:	f0 e0       	ldi	r31, 0x00	; 0
    3656:	80 81       	ld	r24, Z
    3658:	8e 7f       	andi	r24, 0xFE	; 254
    365a:	8c 93       	st	X, r24
    365c:	fe 01       	movw	r30, r28
    365e:	eb 55       	subi	r30, 0x5B	; 91
    3660:	ff 4f       	sbci	r31, 0xFF	; 255
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	a0 e0       	ldi	r26, 0x00	; 0
    3668:	bf e3       	ldi	r27, 0x3F	; 63
    366a:	80 83       	st	Z, r24
    366c:	91 83       	std	Z+1, r25	; 0x01
    366e:	a2 83       	std	Z+2, r26	; 0x02
    3670:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3672:	8e 01       	movw	r16, r28
    3674:	0f 55       	subi	r16, 0x5F	; 95
    3676:	1f 4f       	sbci	r17, 0xFF	; 255
    3678:	fe 01       	movw	r30, r28
    367a:	eb 55       	subi	r30, 0x5B	; 91
    367c:	ff 4f       	sbci	r31, 0xFF	; 255
    367e:	60 81       	ld	r22, Z
    3680:	71 81       	ldd	r23, Z+1	; 0x01
    3682:	82 81       	ldd	r24, Z+2	; 0x02
    3684:	93 81       	ldd	r25, Z+3	; 0x03
    3686:	2b ea       	ldi	r18, 0xAB	; 171
    3688:	3a ea       	ldi	r19, 0xAA	; 170
    368a:	4a e2       	ldi	r20, 0x2A	; 42
    368c:	50 e4       	ldi	r21, 0x40	; 64
    368e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	f8 01       	movw	r30, r16
    3698:	80 83       	st	Z, r24
    369a:	91 83       	std	Z+1, r25	; 0x01
    369c:	a2 83       	std	Z+2, r26	; 0x02
    369e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36a0:	fe 01       	movw	r30, r28
    36a2:	ef 55       	subi	r30, 0x5F	; 95
    36a4:	ff 4f       	sbci	r31, 0xFF	; 255
    36a6:	60 81       	ld	r22, Z
    36a8:	71 81       	ldd	r23, Z+1	; 0x01
    36aa:	82 81       	ldd	r24, Z+2	; 0x02
    36ac:	93 81       	ldd	r25, Z+3	; 0x03
    36ae:	20 e0       	ldi	r18, 0x00	; 0
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	40 e8       	ldi	r20, 0x80	; 128
    36b4:	5f e3       	ldi	r21, 0x3F	; 63
    36b6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    36ba:	88 23       	and	r24, r24
    36bc:	34 f4       	brge	.+12     	; 0x36ca <LCDBusyLoop+0xba>
		__ticks = 1;
    36be:	fe 01       	movw	r30, r28
    36c0:	e0 56       	subi	r30, 0x60	; 96
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	81 e0       	ldi	r24, 0x01	; 1
    36c6:	80 83       	st	Z, r24
    36c8:	e0 c0       	rjmp	.+448    	; 0x388a <LCDBusyLoop+0x27a>
	else if (__tmp > 255)
    36ca:	fe 01       	movw	r30, r28
    36cc:	ef 55       	subi	r30, 0x5F	; 95
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	60 81       	ld	r22, Z
    36d2:	71 81       	ldd	r23, Z+1	; 0x01
    36d4:	82 81       	ldd	r24, Z+2	; 0x02
    36d6:	93 81       	ldd	r25, Z+3	; 0x03
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	4f e7       	ldi	r20, 0x7F	; 127
    36de:	53 e4       	ldi	r21, 0x43	; 67
    36e0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    36e4:	18 16       	cp	r1, r24
    36e6:	0c f0       	brlt	.+2      	; 0x36ea <LCDBusyLoop+0xda>
    36e8:	c0 c0       	rjmp	.+384    	; 0x386a <LCDBusyLoop+0x25a>
	{
		_delay_ms(__us / 1000.0);
    36ea:	fe 01       	movw	r30, r28
    36ec:	eb 55       	subi	r30, 0x5B	; 91
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	60 81       	ld	r22, Z
    36f2:	71 81       	ldd	r23, Z+1	; 0x01
    36f4:	82 81       	ldd	r24, Z+2	; 0x02
    36f6:	93 81       	ldd	r25, Z+3	; 0x03
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	4a e7       	ldi	r20, 0x7A	; 122
    36fe:	54 e4       	ldi	r21, 0x44	; 68
    3700:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    3704:	dc 01       	movw	r26, r24
    3706:	cb 01       	movw	r24, r22
    3708:	fe 01       	movw	r30, r28
    370a:	e4 56       	subi	r30, 0x64	; 100
    370c:	ff 4f       	sbci	r31, 0xFF	; 255
    370e:	80 83       	st	Z, r24
    3710:	91 83       	std	Z+1, r25	; 0x01
    3712:	a2 83       	std	Z+2, r26	; 0x02
    3714:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3716:	8e 01       	movw	r16, r28
    3718:	08 56       	subi	r16, 0x68	; 104
    371a:	1f 4f       	sbci	r17, 0xFF	; 255
    371c:	fe 01       	movw	r30, r28
    371e:	e4 56       	subi	r30, 0x64	; 100
    3720:	ff 4f       	sbci	r31, 0xFF	; 255
    3722:	60 81       	ld	r22, Z
    3724:	71 81       	ldd	r23, Z+1	; 0x01
    3726:	82 81       	ldd	r24, Z+2	; 0x02
    3728:	93 81       	ldd	r25, Z+3	; 0x03
    372a:	20 e0       	ldi	r18, 0x00	; 0
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	4a ef       	ldi	r20, 0xFA	; 250
    3730:	54 e4       	ldi	r21, 0x44	; 68
    3732:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3736:	dc 01       	movw	r26, r24
    3738:	cb 01       	movw	r24, r22
    373a:	f8 01       	movw	r30, r16
    373c:	80 83       	st	Z, r24
    373e:	91 83       	std	Z+1, r25	; 0x01
    3740:	a2 83       	std	Z+2, r26	; 0x02
    3742:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3744:	fe 01       	movw	r30, r28
    3746:	e8 56       	subi	r30, 0x68	; 104
    3748:	ff 4f       	sbci	r31, 0xFF	; 255
    374a:	60 81       	ld	r22, Z
    374c:	71 81       	ldd	r23, Z+1	; 0x01
    374e:	82 81       	ldd	r24, Z+2	; 0x02
    3750:	93 81       	ldd	r25, Z+3	; 0x03
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	40 e8       	ldi	r20, 0x80	; 128
    3758:	5f e3       	ldi	r21, 0x3F	; 63
    375a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    375e:	88 23       	and	r24, r24
    3760:	44 f4       	brge	.+16     	; 0x3772 <LCDBusyLoop+0x162>
		__ticks = 1;
    3762:	fe 01       	movw	r30, r28
    3764:	ea 56       	subi	r30, 0x6A	; 106
    3766:	ff 4f       	sbci	r31, 0xFF	; 255
    3768:	81 e0       	ldi	r24, 0x01	; 1
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	91 83       	std	Z+1, r25	; 0x01
    376e:	80 83       	st	Z, r24
    3770:	64 c0       	rjmp	.+200    	; 0x383a <LCDBusyLoop+0x22a>
	else if (__tmp > 65535)
    3772:	fe 01       	movw	r30, r28
    3774:	e8 56       	subi	r30, 0x68	; 104
    3776:	ff 4f       	sbci	r31, 0xFF	; 255
    3778:	60 81       	ld	r22, Z
    377a:	71 81       	ldd	r23, Z+1	; 0x01
    377c:	82 81       	ldd	r24, Z+2	; 0x02
    377e:	93 81       	ldd	r25, Z+3	; 0x03
    3780:	20 e0       	ldi	r18, 0x00	; 0
    3782:	3f ef       	ldi	r19, 0xFF	; 255
    3784:	4f e7       	ldi	r20, 0x7F	; 127
    3786:	57 e4       	ldi	r21, 0x47	; 71
    3788:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    378c:	18 16       	cp	r1, r24
    378e:	0c f0       	brlt	.+2      	; 0x3792 <LCDBusyLoop+0x182>
    3790:	43 c0       	rjmp	.+134    	; 0x3818 <LCDBusyLoop+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3792:	fe 01       	movw	r30, r28
    3794:	e4 56       	subi	r30, 0x64	; 100
    3796:	ff 4f       	sbci	r31, 0xFF	; 255
    3798:	60 81       	ld	r22, Z
    379a:	71 81       	ldd	r23, Z+1	; 0x01
    379c:	82 81       	ldd	r24, Z+2	; 0x02
    379e:	93 81       	ldd	r25, Z+3	; 0x03
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	40 e2       	ldi	r20, 0x20	; 32
    37a6:	51 e4       	ldi	r21, 0x41	; 65
    37a8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    37ac:	dc 01       	movw	r26, r24
    37ae:	cb 01       	movw	r24, r22
    37b0:	8e 01       	movw	r16, r28
    37b2:	0a 56       	subi	r16, 0x6A	; 106
    37b4:	1f 4f       	sbci	r17, 0xFF	; 255
    37b6:	bc 01       	movw	r22, r24
    37b8:	cd 01       	movw	r24, r26
    37ba:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    37be:	dc 01       	movw	r26, r24
    37c0:	cb 01       	movw	r24, r22
    37c2:	f8 01       	movw	r30, r16
    37c4:	91 83       	std	Z+1, r25	; 0x01
    37c6:	80 83       	st	Z, r24
    37c8:	1f c0       	rjmp	.+62     	; 0x3808 <LCDBusyLoop+0x1f8>
    37ca:	fe 01       	movw	r30, r28
    37cc:	ec 56       	subi	r30, 0x6C	; 108
    37ce:	ff 4f       	sbci	r31, 0xFF	; 255
    37d0:	88 ec       	ldi	r24, 0xC8	; 200
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	91 83       	std	Z+1, r25	; 0x01
    37d6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    37d8:	fe 01       	movw	r30, r28
    37da:	ec 56       	subi	r30, 0x6C	; 108
    37dc:	ff 4f       	sbci	r31, 0xFF	; 255
    37de:	80 81       	ld	r24, Z
    37e0:	91 81       	ldd	r25, Z+1	; 0x01
    37e2:	01 97       	sbiw	r24, 0x01	; 1
    37e4:	f1 f7       	brne	.-4      	; 0x37e2 <LCDBusyLoop+0x1d2>
    37e6:	fe 01       	movw	r30, r28
    37e8:	ec 56       	subi	r30, 0x6C	; 108
    37ea:	ff 4f       	sbci	r31, 0xFF	; 255
    37ec:	91 83       	std	Z+1, r25	; 0x01
    37ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37f0:	de 01       	movw	r26, r28
    37f2:	aa 56       	subi	r26, 0x6A	; 106
    37f4:	bf 4f       	sbci	r27, 0xFF	; 255
    37f6:	fe 01       	movw	r30, r28
    37f8:	ea 56       	subi	r30, 0x6A	; 106
    37fa:	ff 4f       	sbci	r31, 0xFF	; 255
    37fc:	80 81       	ld	r24, Z
    37fe:	91 81       	ldd	r25, Z+1	; 0x01
    3800:	01 97       	sbiw	r24, 0x01	; 1
    3802:	11 96       	adiw	r26, 0x01	; 1
    3804:	9c 93       	st	X, r25
    3806:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3808:	fe 01       	movw	r30, r28
    380a:	ea 56       	subi	r30, 0x6A	; 106
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	80 81       	ld	r24, Z
    3810:	91 81       	ldd	r25, Z+1	; 0x01
    3812:	00 97       	sbiw	r24, 0x00	; 0
    3814:	d1 f6       	brne	.-76     	; 0x37ca <LCDBusyLoop+0x1ba>
    3816:	4b c0       	rjmp	.+150    	; 0x38ae <LCDBusyLoop+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3818:	8e 01       	movw	r16, r28
    381a:	0a 56       	subi	r16, 0x6A	; 106
    381c:	1f 4f       	sbci	r17, 0xFF	; 255
    381e:	fe 01       	movw	r30, r28
    3820:	e8 56       	subi	r30, 0x68	; 104
    3822:	ff 4f       	sbci	r31, 0xFF	; 255
    3824:	60 81       	ld	r22, Z
    3826:	71 81       	ldd	r23, Z+1	; 0x01
    3828:	82 81       	ldd	r24, Z+2	; 0x02
    382a:	93 81       	ldd	r25, Z+3	; 0x03
    382c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3830:	dc 01       	movw	r26, r24
    3832:	cb 01       	movw	r24, r22
    3834:	f8 01       	movw	r30, r16
    3836:	91 83       	std	Z+1, r25	; 0x01
    3838:	80 83       	st	Z, r24
    383a:	de 01       	movw	r26, r28
    383c:	ae 56       	subi	r26, 0x6E	; 110
    383e:	bf 4f       	sbci	r27, 0xFF	; 255
    3840:	fe 01       	movw	r30, r28
    3842:	ea 56       	subi	r30, 0x6A	; 106
    3844:	ff 4f       	sbci	r31, 0xFF	; 255
    3846:	80 81       	ld	r24, Z
    3848:	91 81       	ldd	r25, Z+1	; 0x01
    384a:	11 96       	adiw	r26, 0x01	; 1
    384c:	9c 93       	st	X, r25
    384e:	8e 93       	st	-X, r24
    3850:	fe 01       	movw	r30, r28
    3852:	ee 56       	subi	r30, 0x6E	; 110
    3854:	ff 4f       	sbci	r31, 0xFF	; 255
    3856:	80 81       	ld	r24, Z
    3858:	91 81       	ldd	r25, Z+1	; 0x01
    385a:	01 97       	sbiw	r24, 0x01	; 1
    385c:	f1 f7       	brne	.-4      	; 0x385a <LCDBusyLoop+0x24a>
    385e:	fe 01       	movw	r30, r28
    3860:	ee 56       	subi	r30, 0x6E	; 110
    3862:	ff 4f       	sbci	r31, 0xFF	; 255
    3864:	91 83       	std	Z+1, r25	; 0x01
    3866:	80 83       	st	Z, r24
    3868:	22 c0       	rjmp	.+68     	; 0x38ae <LCDBusyLoop+0x29e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    386a:	8e 01       	movw	r16, r28
    386c:	00 56       	subi	r16, 0x60	; 96
    386e:	1f 4f       	sbci	r17, 0xFF	; 255
    3870:	fe 01       	movw	r30, r28
    3872:	ef 55       	subi	r30, 0x5F	; 95
    3874:	ff 4f       	sbci	r31, 0xFF	; 255
    3876:	60 81       	ld	r22, Z
    3878:	71 81       	ldd	r23, Z+1	; 0x01
    387a:	82 81       	ldd	r24, Z+2	; 0x02
    387c:	93 81       	ldd	r25, Z+3	; 0x03
    387e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3882:	dc 01       	movw	r26, r24
    3884:	cb 01       	movw	r24, r22
    3886:	f8 01       	movw	r30, r16
    3888:	80 83       	st	Z, r24
    388a:	de 01       	movw	r26, r28
    388c:	af 56       	subi	r26, 0x6F	; 111
    388e:	bf 4f       	sbci	r27, 0xFF	; 255
    3890:	fe 01       	movw	r30, r28
    3892:	e0 56       	subi	r30, 0x60	; 96
    3894:	ff 4f       	sbci	r31, 0xFF	; 255
    3896:	80 81       	ld	r24, Z
    3898:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    389a:	fe 01       	movw	r30, r28
    389c:	ef 56       	subi	r30, 0x6F	; 111
    389e:	ff 4f       	sbci	r31, 0xFF	; 255
    38a0:	80 81       	ld	r24, Z
    38a2:	8a 95       	dec	r24
    38a4:	f1 f7       	brne	.-4      	; 0x38a2 <LCDBusyLoop+0x292>
    38a6:	fe 01       	movw	r30, r28
    38a8:	ef 56       	subi	r30, 0x6F	; 111
    38aa:	ff 4f       	sbci	r31, 0xFF	; 255
    38ac:	80 83       	st	Z, r24


	do
	{

		SET_E();
    38ae:	ab e3       	ldi	r26, 0x3B	; 59
    38b0:	b0 e0       	ldi	r27, 0x00	; 0
    38b2:	eb e3       	ldi	r30, 0x3B	; 59
    38b4:	f0 e0       	ldi	r31, 0x00	; 0
    38b6:	80 81       	ld	r24, Z
    38b8:	84 60       	ori	r24, 0x04	; 4
    38ba:	8c 93       	st	X, r24
    38bc:	fe 01       	movw	r30, r28
    38be:	e3 57       	subi	r30, 0x73	; 115
    38c0:	ff 4f       	sbci	r31, 0xFF	; 255
    38c2:	80 e0       	ldi	r24, 0x00	; 0
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	a0 e0       	ldi	r26, 0x00	; 0
    38c8:	bf e3       	ldi	r27, 0x3F	; 63
    38ca:	80 83       	st	Z, r24
    38cc:	91 83       	std	Z+1, r25	; 0x01
    38ce:	a2 83       	std	Z+2, r26	; 0x02
    38d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    38d2:	8e 01       	movw	r16, r28
    38d4:	07 57       	subi	r16, 0x77	; 119
    38d6:	1f 4f       	sbci	r17, 0xFF	; 255
    38d8:	fe 01       	movw	r30, r28
    38da:	e3 57       	subi	r30, 0x73	; 115
    38dc:	ff 4f       	sbci	r31, 0xFF	; 255
    38de:	60 81       	ld	r22, Z
    38e0:	71 81       	ldd	r23, Z+1	; 0x01
    38e2:	82 81       	ldd	r24, Z+2	; 0x02
    38e4:	93 81       	ldd	r25, Z+3	; 0x03
    38e6:	2b ea       	ldi	r18, 0xAB	; 171
    38e8:	3a ea       	ldi	r19, 0xAA	; 170
    38ea:	4a e2       	ldi	r20, 0x2A	; 42
    38ec:	50 e4       	ldi	r21, 0x40	; 64
    38ee:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    38f2:	dc 01       	movw	r26, r24
    38f4:	cb 01       	movw	r24, r22
    38f6:	f8 01       	movw	r30, r16
    38f8:	80 83       	st	Z, r24
    38fa:	91 83       	std	Z+1, r25	; 0x01
    38fc:	a2 83       	std	Z+2, r26	; 0x02
    38fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3900:	fe 01       	movw	r30, r28
    3902:	e7 57       	subi	r30, 0x77	; 119
    3904:	ff 4f       	sbci	r31, 0xFF	; 255
    3906:	60 81       	ld	r22, Z
    3908:	71 81       	ldd	r23, Z+1	; 0x01
    390a:	82 81       	ldd	r24, Z+2	; 0x02
    390c:	93 81       	ldd	r25, Z+3	; 0x03
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	40 e8       	ldi	r20, 0x80	; 128
    3914:	5f e3       	ldi	r21, 0x3F	; 63
    3916:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    391a:	88 23       	and	r24, r24
    391c:	34 f4       	brge	.+12     	; 0x392a <LCDBusyLoop+0x31a>
		__ticks = 1;
    391e:	fe 01       	movw	r30, r28
    3920:	e8 57       	subi	r30, 0x78	; 120
    3922:	ff 4f       	sbci	r31, 0xFF	; 255
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	80 83       	st	Z, r24
    3928:	e0 c0       	rjmp	.+448    	; 0x3aea <LCDBusyLoop+0x4da>
	else if (__tmp > 255)
    392a:	fe 01       	movw	r30, r28
    392c:	e7 57       	subi	r30, 0x77	; 119
    392e:	ff 4f       	sbci	r31, 0xFF	; 255
    3930:	60 81       	ld	r22, Z
    3932:	71 81       	ldd	r23, Z+1	; 0x01
    3934:	82 81       	ldd	r24, Z+2	; 0x02
    3936:	93 81       	ldd	r25, Z+3	; 0x03
    3938:	20 e0       	ldi	r18, 0x00	; 0
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	4f e7       	ldi	r20, 0x7F	; 127
    393e:	53 e4       	ldi	r21, 0x43	; 67
    3940:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3944:	18 16       	cp	r1, r24
    3946:	0c f0       	brlt	.+2      	; 0x394a <LCDBusyLoop+0x33a>
    3948:	c0 c0       	rjmp	.+384    	; 0x3aca <LCDBusyLoop+0x4ba>
	{
		_delay_ms(__us / 1000.0);
    394a:	fe 01       	movw	r30, r28
    394c:	e3 57       	subi	r30, 0x73	; 115
    394e:	ff 4f       	sbci	r31, 0xFF	; 255
    3950:	60 81       	ld	r22, Z
    3952:	71 81       	ldd	r23, Z+1	; 0x01
    3954:	82 81       	ldd	r24, Z+2	; 0x02
    3956:	93 81       	ldd	r25, Z+3	; 0x03
    3958:	20 e0       	ldi	r18, 0x00	; 0
    395a:	30 e0       	ldi	r19, 0x00	; 0
    395c:	4a e7       	ldi	r20, 0x7A	; 122
    395e:	54 e4       	ldi	r21, 0x44	; 68
    3960:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    3964:	dc 01       	movw	r26, r24
    3966:	cb 01       	movw	r24, r22
    3968:	fe 01       	movw	r30, r28
    396a:	ec 57       	subi	r30, 0x7C	; 124
    396c:	ff 4f       	sbci	r31, 0xFF	; 255
    396e:	80 83       	st	Z, r24
    3970:	91 83       	std	Z+1, r25	; 0x01
    3972:	a2 83       	std	Z+2, r26	; 0x02
    3974:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3976:	8e 01       	movw	r16, r28
    3978:	00 58       	subi	r16, 0x80	; 128
    397a:	1f 4f       	sbci	r17, 0xFF	; 255
    397c:	fe 01       	movw	r30, r28
    397e:	ec 57       	subi	r30, 0x7C	; 124
    3980:	ff 4f       	sbci	r31, 0xFF	; 255
    3982:	60 81       	ld	r22, Z
    3984:	71 81       	ldd	r23, Z+1	; 0x01
    3986:	82 81       	ldd	r24, Z+2	; 0x02
    3988:	93 81       	ldd	r25, Z+3	; 0x03
    398a:	20 e0       	ldi	r18, 0x00	; 0
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	4a ef       	ldi	r20, 0xFA	; 250
    3990:	54 e4       	ldi	r21, 0x44	; 68
    3992:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3996:	dc 01       	movw	r26, r24
    3998:	cb 01       	movw	r24, r22
    399a:	f8 01       	movw	r30, r16
    399c:	80 83       	st	Z, r24
    399e:	91 83       	std	Z+1, r25	; 0x01
    39a0:	a2 83       	std	Z+2, r26	; 0x02
    39a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39a4:	fe 01       	movw	r30, r28
    39a6:	e0 58       	subi	r30, 0x80	; 128
    39a8:	ff 4f       	sbci	r31, 0xFF	; 255
    39aa:	60 81       	ld	r22, Z
    39ac:	71 81       	ldd	r23, Z+1	; 0x01
    39ae:	82 81       	ldd	r24, Z+2	; 0x02
    39b0:	93 81       	ldd	r25, Z+3	; 0x03
    39b2:	20 e0       	ldi	r18, 0x00	; 0
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	40 e8       	ldi	r20, 0x80	; 128
    39b8:	5f e3       	ldi	r21, 0x3F	; 63
    39ba:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    39be:	88 23       	and	r24, r24
    39c0:	44 f4       	brge	.+16     	; 0x39d2 <LCDBusyLoop+0x3c2>
		__ticks = 1;
    39c2:	fe 01       	movw	r30, r28
    39c4:	e2 58       	subi	r30, 0x82	; 130
    39c6:	ff 4f       	sbci	r31, 0xFF	; 255
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	91 83       	std	Z+1, r25	; 0x01
    39ce:	80 83       	st	Z, r24
    39d0:	64 c0       	rjmp	.+200    	; 0x3a9a <LCDBusyLoop+0x48a>
	else if (__tmp > 65535)
    39d2:	fe 01       	movw	r30, r28
    39d4:	e0 58       	subi	r30, 0x80	; 128
    39d6:	ff 4f       	sbci	r31, 0xFF	; 255
    39d8:	60 81       	ld	r22, Z
    39da:	71 81       	ldd	r23, Z+1	; 0x01
    39dc:	82 81       	ldd	r24, Z+2	; 0x02
    39de:	93 81       	ldd	r25, Z+3	; 0x03
    39e0:	20 e0       	ldi	r18, 0x00	; 0
    39e2:	3f ef       	ldi	r19, 0xFF	; 255
    39e4:	4f e7       	ldi	r20, 0x7F	; 127
    39e6:	57 e4       	ldi	r21, 0x47	; 71
    39e8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    39ec:	18 16       	cp	r1, r24
    39ee:	0c f0       	brlt	.+2      	; 0x39f2 <LCDBusyLoop+0x3e2>
    39f0:	43 c0       	rjmp	.+134    	; 0x3a78 <LCDBusyLoop+0x468>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f2:	fe 01       	movw	r30, r28
    39f4:	ec 57       	subi	r30, 0x7C	; 124
    39f6:	ff 4f       	sbci	r31, 0xFF	; 255
    39f8:	60 81       	ld	r22, Z
    39fa:	71 81       	ldd	r23, Z+1	; 0x01
    39fc:	82 81       	ldd	r24, Z+2	; 0x02
    39fe:	93 81       	ldd	r25, Z+3	; 0x03
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	40 e2       	ldi	r20, 0x20	; 32
    3a06:	51 e4       	ldi	r21, 0x41	; 65
    3a08:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	8e 01       	movw	r16, r28
    3a12:	02 58       	subi	r16, 0x82	; 130
    3a14:	1f 4f       	sbci	r17, 0xFF	; 255
    3a16:	bc 01       	movw	r22, r24
    3a18:	cd 01       	movw	r24, r26
    3a1a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	cb 01       	movw	r24, r22
    3a22:	f8 01       	movw	r30, r16
    3a24:	91 83       	std	Z+1, r25	; 0x01
    3a26:	80 83       	st	Z, r24
    3a28:	1f c0       	rjmp	.+62     	; 0x3a68 <LCDBusyLoop+0x458>
    3a2a:	fe 01       	movw	r30, r28
    3a2c:	e4 58       	subi	r30, 0x84	; 132
    3a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a30:	88 ec       	ldi	r24, 0xC8	; 200
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	91 83       	std	Z+1, r25	; 0x01
    3a36:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a38:	fe 01       	movw	r30, r28
    3a3a:	e4 58       	subi	r30, 0x84	; 132
    3a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3e:	80 81       	ld	r24, Z
    3a40:	91 81       	ldd	r25, Z+1	; 0x01
    3a42:	01 97       	sbiw	r24, 0x01	; 1
    3a44:	f1 f7       	brne	.-4      	; 0x3a42 <LCDBusyLoop+0x432>
    3a46:	fe 01       	movw	r30, r28
    3a48:	e4 58       	subi	r30, 0x84	; 132
    3a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4c:	91 83       	std	Z+1, r25	; 0x01
    3a4e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a50:	de 01       	movw	r26, r28
    3a52:	a2 58       	subi	r26, 0x82	; 130
    3a54:	bf 4f       	sbci	r27, 0xFF	; 255
    3a56:	fe 01       	movw	r30, r28
    3a58:	e2 58       	subi	r30, 0x82	; 130
    3a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5c:	80 81       	ld	r24, Z
    3a5e:	91 81       	ldd	r25, Z+1	; 0x01
    3a60:	01 97       	sbiw	r24, 0x01	; 1
    3a62:	11 96       	adiw	r26, 0x01	; 1
    3a64:	9c 93       	st	X, r25
    3a66:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a68:	fe 01       	movw	r30, r28
    3a6a:	e2 58       	subi	r30, 0x82	; 130
    3a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6e:	80 81       	ld	r24, Z
    3a70:	91 81       	ldd	r25, Z+1	; 0x01
    3a72:	00 97       	sbiw	r24, 0x00	; 0
    3a74:	d1 f6       	brne	.-76     	; 0x3a2a <LCDBusyLoop+0x41a>
    3a76:	4b c0       	rjmp	.+150    	; 0x3b0e <LCDBusyLoop+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a78:	8e 01       	movw	r16, r28
    3a7a:	02 58       	subi	r16, 0x82	; 130
    3a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a7e:	fe 01       	movw	r30, r28
    3a80:	e0 58       	subi	r30, 0x80	; 128
    3a82:	ff 4f       	sbci	r31, 0xFF	; 255
    3a84:	60 81       	ld	r22, Z
    3a86:	71 81       	ldd	r23, Z+1	; 0x01
    3a88:	82 81       	ldd	r24, Z+2	; 0x02
    3a8a:	93 81       	ldd	r25, Z+3	; 0x03
    3a8c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3a90:	dc 01       	movw	r26, r24
    3a92:	cb 01       	movw	r24, r22
    3a94:	f8 01       	movw	r30, r16
    3a96:	91 83       	std	Z+1, r25	; 0x01
    3a98:	80 83       	st	Z, r24
    3a9a:	de 01       	movw	r26, r28
    3a9c:	a6 58       	subi	r26, 0x86	; 134
    3a9e:	bf 4f       	sbci	r27, 0xFF	; 255
    3aa0:	fe 01       	movw	r30, r28
    3aa2:	e2 58       	subi	r30, 0x82	; 130
    3aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa6:	80 81       	ld	r24, Z
    3aa8:	91 81       	ldd	r25, Z+1	; 0x01
    3aaa:	11 96       	adiw	r26, 0x01	; 1
    3aac:	9c 93       	st	X, r25
    3aae:	8e 93       	st	-X, r24
    3ab0:	fe 01       	movw	r30, r28
    3ab2:	e6 58       	subi	r30, 0x86	; 134
    3ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab6:	80 81       	ld	r24, Z
    3ab8:	91 81       	ldd	r25, Z+1	; 0x01
    3aba:	01 97       	sbiw	r24, 0x01	; 1
    3abc:	f1 f7       	brne	.-4      	; 0x3aba <LCDBusyLoop+0x4aa>
    3abe:	fe 01       	movw	r30, r28
    3ac0:	e6 58       	subi	r30, 0x86	; 134
    3ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac4:	91 83       	std	Z+1, r25	; 0x01
    3ac6:	80 83       	st	Z, r24
    3ac8:	22 c0       	rjmp	.+68     	; 0x3b0e <LCDBusyLoop+0x4fe>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3aca:	8e 01       	movw	r16, r28
    3acc:	08 57       	subi	r16, 0x78	; 120
    3ace:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad0:	fe 01       	movw	r30, r28
    3ad2:	e7 57       	subi	r30, 0x77	; 119
    3ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad6:	60 81       	ld	r22, Z
    3ad8:	71 81       	ldd	r23, Z+1	; 0x01
    3ada:	82 81       	ldd	r24, Z+2	; 0x02
    3adc:	93 81       	ldd	r25, Z+3	; 0x03
    3ade:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	f8 01       	movw	r30, r16
    3ae8:	80 83       	st	Z, r24
    3aea:	de 01       	movw	r26, r28
    3aec:	a7 58       	subi	r26, 0x87	; 135
    3aee:	bf 4f       	sbci	r27, 0xFF	; 255
    3af0:	fe 01       	movw	r30, r28
    3af2:	e8 57       	subi	r30, 0x78	; 120
    3af4:	ff 4f       	sbci	r31, 0xFF	; 255
    3af6:	80 81       	ld	r24, Z
    3af8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3afa:	fe 01       	movw	r30, r28
    3afc:	e7 58       	subi	r30, 0x87	; 135
    3afe:	ff 4f       	sbci	r31, 0xFF	; 255
    3b00:	80 81       	ld	r24, Z
    3b02:	8a 95       	dec	r24
    3b04:	f1 f7       	brne	.-4      	; 0x3b02 <LCDBusyLoop+0x4f2>
    3b06:	fe 01       	movw	r30, r28
    3b08:	e7 58       	subi	r30, 0x87	; 135
    3b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0c:	80 83       	st	Z, r24

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
    3b0e:	e9 e3       	ldi	r30, 0x39	; 57
    3b10:	f0 e0       	ldi	r31, 0x00	; 0
    3b12:	80 81       	ld	r24, Z
    3b14:	fe 01       	movw	r30, r28
    3b16:	e6 55       	subi	r30, 0x56	; 86
    3b18:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1a:	82 95       	swap	r24
    3b1c:	8f 70       	andi	r24, 0x0F	; 15
    3b1e:	80 83       	st	Z, r24
		status=status<<4;
    3b20:	de 01       	movw	r26, r28
    3b22:	a6 55       	subi	r26, 0x56	; 86
    3b24:	bf 4f       	sbci	r27, 0xFF	; 255
    3b26:	fe 01       	movw	r30, r28
    3b28:	e6 55       	subi	r30, 0x56	; 86
    3b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2c:	80 81       	ld	r24, Z
    3b2e:	82 95       	swap	r24
    3b30:	80 7f       	andi	r24, 0xF0	; 240
    3b32:	8c 93       	st	X, r24
    3b34:	fe 01       	movw	r30, r28
    3b36:	eb 58       	subi	r30, 0x8B	; 139
    3b38:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3a:	80 e0       	ldi	r24, 0x00	; 0
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	a0 e0       	ldi	r26, 0x00	; 0
    3b40:	bf e3       	ldi	r27, 0x3F	; 63
    3b42:	80 83       	st	Z, r24
    3b44:	91 83       	std	Z+1, r25	; 0x01
    3b46:	a2 83       	std	Z+2, r26	; 0x02
    3b48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3b4a:	8e 01       	movw	r16, r28
    3b4c:	0f 58       	subi	r16, 0x8F	; 143
    3b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b50:	fe 01       	movw	r30, r28
    3b52:	eb 58       	subi	r30, 0x8B	; 139
    3b54:	ff 4f       	sbci	r31, 0xFF	; 255
    3b56:	60 81       	ld	r22, Z
    3b58:	71 81       	ldd	r23, Z+1	; 0x01
    3b5a:	82 81       	ldd	r24, Z+2	; 0x02
    3b5c:	93 81       	ldd	r25, Z+3	; 0x03
    3b5e:	2b ea       	ldi	r18, 0xAB	; 171
    3b60:	3a ea       	ldi	r19, 0xAA	; 170
    3b62:	4a e2       	ldi	r20, 0x2A	; 42
    3b64:	50 e4       	ldi	r21, 0x40	; 64
    3b66:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	f8 01       	movw	r30, r16
    3b70:	80 83       	st	Z, r24
    3b72:	91 83       	std	Z+1, r25	; 0x01
    3b74:	a2 83       	std	Z+2, r26	; 0x02
    3b76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b78:	fe 01       	movw	r30, r28
    3b7a:	ef 58       	subi	r30, 0x8F	; 143
    3b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7e:	60 81       	ld	r22, Z
    3b80:	71 81       	ldd	r23, Z+1	; 0x01
    3b82:	82 81       	ldd	r24, Z+2	; 0x02
    3b84:	93 81       	ldd	r25, Z+3	; 0x03
    3b86:	20 e0       	ldi	r18, 0x00	; 0
    3b88:	30 e0       	ldi	r19, 0x00	; 0
    3b8a:	40 e8       	ldi	r20, 0x80	; 128
    3b8c:	5f e3       	ldi	r21, 0x3F	; 63
    3b8e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3b92:	88 23       	and	r24, r24
    3b94:	34 f4       	brge	.+12     	; 0x3ba2 <LCDBusyLoop+0x592>
		__ticks = 1;
    3b96:	fe 01       	movw	r30, r28
    3b98:	e0 59       	subi	r30, 0x90	; 144
    3b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9c:	81 e0       	ldi	r24, 0x01	; 1
    3b9e:	80 83       	st	Z, r24
    3ba0:	e0 c0       	rjmp	.+448    	; 0x3d62 <LCDBusyLoop+0x752>
	else if (__tmp > 255)
    3ba2:	fe 01       	movw	r30, r28
    3ba4:	ef 58       	subi	r30, 0x8F	; 143
    3ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba8:	60 81       	ld	r22, Z
    3baa:	71 81       	ldd	r23, Z+1	; 0x01
    3bac:	82 81       	ldd	r24, Z+2	; 0x02
    3bae:	93 81       	ldd	r25, Z+3	; 0x03
    3bb0:	20 e0       	ldi	r18, 0x00	; 0
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	4f e7       	ldi	r20, 0x7F	; 127
    3bb6:	53 e4       	ldi	r21, 0x43	; 67
    3bb8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3bbc:	18 16       	cp	r1, r24
    3bbe:	0c f0       	brlt	.+2      	; 0x3bc2 <LCDBusyLoop+0x5b2>
    3bc0:	c0 c0       	rjmp	.+384    	; 0x3d42 <LCDBusyLoop+0x732>
	{
		_delay_ms(__us / 1000.0);
    3bc2:	fe 01       	movw	r30, r28
    3bc4:	eb 58       	subi	r30, 0x8B	; 139
    3bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc8:	60 81       	ld	r22, Z
    3bca:	71 81       	ldd	r23, Z+1	; 0x01
    3bcc:	82 81       	ldd	r24, Z+2	; 0x02
    3bce:	93 81       	ldd	r25, Z+3	; 0x03
    3bd0:	20 e0       	ldi	r18, 0x00	; 0
    3bd2:	30 e0       	ldi	r19, 0x00	; 0
    3bd4:	4a e7       	ldi	r20, 0x7A	; 122
    3bd6:	54 e4       	ldi	r21, 0x44	; 68
    3bd8:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    3bdc:	dc 01       	movw	r26, r24
    3bde:	cb 01       	movw	r24, r22
    3be0:	fe 01       	movw	r30, r28
    3be2:	e4 59       	subi	r30, 0x94	; 148
    3be4:	ff 4f       	sbci	r31, 0xFF	; 255
    3be6:	80 83       	st	Z, r24
    3be8:	91 83       	std	Z+1, r25	; 0x01
    3bea:	a2 83       	std	Z+2, r26	; 0x02
    3bec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bee:	8e 01       	movw	r16, r28
    3bf0:	08 59       	subi	r16, 0x98	; 152
    3bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bf4:	fe 01       	movw	r30, r28
    3bf6:	e4 59       	subi	r30, 0x94	; 148
    3bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfa:	60 81       	ld	r22, Z
    3bfc:	71 81       	ldd	r23, Z+1	; 0x01
    3bfe:	82 81       	ldd	r24, Z+2	; 0x02
    3c00:	93 81       	ldd	r25, Z+3	; 0x03
    3c02:	20 e0       	ldi	r18, 0x00	; 0
    3c04:	30 e0       	ldi	r19, 0x00	; 0
    3c06:	4a ef       	ldi	r20, 0xFA	; 250
    3c08:	54 e4       	ldi	r21, 0x44	; 68
    3c0a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3c0e:	dc 01       	movw	r26, r24
    3c10:	cb 01       	movw	r24, r22
    3c12:	f8 01       	movw	r30, r16
    3c14:	80 83       	st	Z, r24
    3c16:	91 83       	std	Z+1, r25	; 0x01
    3c18:	a2 83       	std	Z+2, r26	; 0x02
    3c1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c1c:	fe 01       	movw	r30, r28
    3c1e:	e8 59       	subi	r30, 0x98	; 152
    3c20:	ff 4f       	sbci	r31, 0xFF	; 255
    3c22:	60 81       	ld	r22, Z
    3c24:	71 81       	ldd	r23, Z+1	; 0x01
    3c26:	82 81       	ldd	r24, Z+2	; 0x02
    3c28:	93 81       	ldd	r25, Z+3	; 0x03
    3c2a:	20 e0       	ldi	r18, 0x00	; 0
    3c2c:	30 e0       	ldi	r19, 0x00	; 0
    3c2e:	40 e8       	ldi	r20, 0x80	; 128
    3c30:	5f e3       	ldi	r21, 0x3F	; 63
    3c32:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3c36:	88 23       	and	r24, r24
    3c38:	44 f4       	brge	.+16     	; 0x3c4a <LCDBusyLoop+0x63a>
		__ticks = 1;
    3c3a:	fe 01       	movw	r30, r28
    3c3c:	ea 59       	subi	r30, 0x9A	; 154
    3c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c40:	81 e0       	ldi	r24, 0x01	; 1
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	91 83       	std	Z+1, r25	; 0x01
    3c46:	80 83       	st	Z, r24
    3c48:	64 c0       	rjmp	.+200    	; 0x3d12 <LCDBusyLoop+0x702>
	else if (__tmp > 65535)
    3c4a:	fe 01       	movw	r30, r28
    3c4c:	e8 59       	subi	r30, 0x98	; 152
    3c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c50:	60 81       	ld	r22, Z
    3c52:	71 81       	ldd	r23, Z+1	; 0x01
    3c54:	82 81       	ldd	r24, Z+2	; 0x02
    3c56:	93 81       	ldd	r25, Z+3	; 0x03
    3c58:	20 e0       	ldi	r18, 0x00	; 0
    3c5a:	3f ef       	ldi	r19, 0xFF	; 255
    3c5c:	4f e7       	ldi	r20, 0x7F	; 127
    3c5e:	57 e4       	ldi	r21, 0x47	; 71
    3c60:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3c64:	18 16       	cp	r1, r24
    3c66:	0c f0       	brlt	.+2      	; 0x3c6a <LCDBusyLoop+0x65a>
    3c68:	43 c0       	rjmp	.+134    	; 0x3cf0 <LCDBusyLoop+0x6e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c6a:	fe 01       	movw	r30, r28
    3c6c:	e4 59       	subi	r30, 0x94	; 148
    3c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c70:	60 81       	ld	r22, Z
    3c72:	71 81       	ldd	r23, Z+1	; 0x01
    3c74:	82 81       	ldd	r24, Z+2	; 0x02
    3c76:	93 81       	ldd	r25, Z+3	; 0x03
    3c78:	20 e0       	ldi	r18, 0x00	; 0
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	40 e2       	ldi	r20, 0x20	; 32
    3c7e:	51 e4       	ldi	r21, 0x41	; 65
    3c80:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3c84:	dc 01       	movw	r26, r24
    3c86:	cb 01       	movw	r24, r22
    3c88:	8e 01       	movw	r16, r28
    3c8a:	0a 59       	subi	r16, 0x9A	; 154
    3c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c8e:	bc 01       	movw	r22, r24
    3c90:	cd 01       	movw	r24, r26
    3c92:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3c96:	dc 01       	movw	r26, r24
    3c98:	cb 01       	movw	r24, r22
    3c9a:	f8 01       	movw	r30, r16
    3c9c:	91 83       	std	Z+1, r25	; 0x01
    3c9e:	80 83       	st	Z, r24
    3ca0:	1f c0       	rjmp	.+62     	; 0x3ce0 <LCDBusyLoop+0x6d0>
    3ca2:	fe 01       	movw	r30, r28
    3ca4:	ec 59       	subi	r30, 0x9C	; 156
    3ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca8:	88 ec       	ldi	r24, 0xC8	; 200
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	91 83       	std	Z+1, r25	; 0x01
    3cae:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3cb0:	fe 01       	movw	r30, r28
    3cb2:	ec 59       	subi	r30, 0x9C	; 156
    3cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb6:	80 81       	ld	r24, Z
    3cb8:	91 81       	ldd	r25, Z+1	; 0x01
    3cba:	01 97       	sbiw	r24, 0x01	; 1
    3cbc:	f1 f7       	brne	.-4      	; 0x3cba <LCDBusyLoop+0x6aa>
    3cbe:	fe 01       	movw	r30, r28
    3cc0:	ec 59       	subi	r30, 0x9C	; 156
    3cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc4:	91 83       	std	Z+1, r25	; 0x01
    3cc6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cc8:	de 01       	movw	r26, r28
    3cca:	aa 59       	subi	r26, 0x9A	; 154
    3ccc:	bf 4f       	sbci	r27, 0xFF	; 255
    3cce:	fe 01       	movw	r30, r28
    3cd0:	ea 59       	subi	r30, 0x9A	; 154
    3cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd4:	80 81       	ld	r24, Z
    3cd6:	91 81       	ldd	r25, Z+1	; 0x01
    3cd8:	01 97       	sbiw	r24, 0x01	; 1
    3cda:	11 96       	adiw	r26, 0x01	; 1
    3cdc:	9c 93       	st	X, r25
    3cde:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ce0:	fe 01       	movw	r30, r28
    3ce2:	ea 59       	subi	r30, 0x9A	; 154
    3ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce6:	80 81       	ld	r24, Z
    3ce8:	91 81       	ldd	r25, Z+1	; 0x01
    3cea:	00 97       	sbiw	r24, 0x00	; 0
    3cec:	d1 f6       	brne	.-76     	; 0x3ca2 <LCDBusyLoop+0x692>
    3cee:	4b c0       	rjmp	.+150    	; 0x3d86 <LCDBusyLoop+0x776>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cf0:	8e 01       	movw	r16, r28
    3cf2:	0a 59       	subi	r16, 0x9A	; 154
    3cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    3cf6:	fe 01       	movw	r30, r28
    3cf8:	e8 59       	subi	r30, 0x98	; 152
    3cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfc:	60 81       	ld	r22, Z
    3cfe:	71 81       	ldd	r23, Z+1	; 0x01
    3d00:	82 81       	ldd	r24, Z+2	; 0x02
    3d02:	93 81       	ldd	r25, Z+3	; 0x03
    3d04:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3d08:	dc 01       	movw	r26, r24
    3d0a:	cb 01       	movw	r24, r22
    3d0c:	f8 01       	movw	r30, r16
    3d0e:	91 83       	std	Z+1, r25	; 0x01
    3d10:	80 83       	st	Z, r24
    3d12:	de 01       	movw	r26, r28
    3d14:	ae 59       	subi	r26, 0x9E	; 158
    3d16:	bf 4f       	sbci	r27, 0xFF	; 255
    3d18:	fe 01       	movw	r30, r28
    3d1a:	ea 59       	subi	r30, 0x9A	; 154
    3d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1e:	80 81       	ld	r24, Z
    3d20:	91 81       	ldd	r25, Z+1	; 0x01
    3d22:	11 96       	adiw	r26, 0x01	; 1
    3d24:	9c 93       	st	X, r25
    3d26:	8e 93       	st	-X, r24
    3d28:	fe 01       	movw	r30, r28
    3d2a:	ee 59       	subi	r30, 0x9E	; 158
    3d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2e:	80 81       	ld	r24, Z
    3d30:	91 81       	ldd	r25, Z+1	; 0x01
    3d32:	01 97       	sbiw	r24, 0x01	; 1
    3d34:	f1 f7       	brne	.-4      	; 0x3d32 <LCDBusyLoop+0x722>
    3d36:	fe 01       	movw	r30, r28
    3d38:	ee 59       	subi	r30, 0x9E	; 158
    3d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3c:	91 83       	std	Z+1, r25	; 0x01
    3d3e:	80 83       	st	Z, r24
    3d40:	22 c0       	rjmp	.+68     	; 0x3d86 <LCDBusyLoop+0x776>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3d42:	8e 01       	movw	r16, r28
    3d44:	00 59       	subi	r16, 0x90	; 144
    3d46:	1f 4f       	sbci	r17, 0xFF	; 255
    3d48:	fe 01       	movw	r30, r28
    3d4a:	ef 58       	subi	r30, 0x8F	; 143
    3d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4e:	60 81       	ld	r22, Z
    3d50:	71 81       	ldd	r23, Z+1	; 0x01
    3d52:	82 81       	ldd	r24, Z+2	; 0x02
    3d54:	93 81       	ldd	r25, Z+3	; 0x03
    3d56:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	cb 01       	movw	r24, r22
    3d5e:	f8 01       	movw	r30, r16
    3d60:	80 83       	st	Z, r24
    3d62:	de 01       	movw	r26, r28
    3d64:	af 59       	subi	r26, 0x9F	; 159
    3d66:	bf 4f       	sbci	r27, 0xFF	; 255
    3d68:	fe 01       	movw	r30, r28
    3d6a:	e0 59       	subi	r30, 0x90	; 144
    3d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6e:	80 81       	ld	r24, Z
    3d70:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3d72:	fe 01       	movw	r30, r28
    3d74:	ef 59       	subi	r30, 0x9F	; 159
    3d76:	ff 4f       	sbci	r31, 0xFF	; 255
    3d78:	80 81       	ld	r24, Z
    3d7a:	8a 95       	dec	r24
    3d7c:	f1 f7       	brne	.-4      	; 0x3d7a <LCDBusyLoop+0x76a>
    3d7e:	fe 01       	movw	r30, r28
    3d80:	ef 59       	subi	r30, 0x9F	; 159
    3d82:	ff 4f       	sbci	r31, 0xFF	; 255
    3d84:	80 83       	st	Z, r24

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
    3d86:	ab e3       	ldi	r26, 0x3B	; 59
    3d88:	b0 e0       	ldi	r27, 0x00	; 0
    3d8a:	eb e3       	ldi	r30, 0x3B	; 59
    3d8c:	f0 e0       	ldi	r31, 0x00	; 0
    3d8e:	80 81       	ld	r24, Z
    3d90:	8b 7f       	andi	r24, 0xFB	; 251
    3d92:	8c 93       	st	X, r24
    3d94:	fe 01       	movw	r30, r28
    3d96:	e3 5a       	subi	r30, 0xA3	; 163
    3d98:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9a:	80 e0       	ldi	r24, 0x00	; 0
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	a0 e8       	ldi	r26, 0x80	; 128
    3da0:	bf e3       	ldi	r27, 0x3F	; 63
    3da2:	80 83       	st	Z, r24
    3da4:	91 83       	std	Z+1, r25	; 0x01
    3da6:	a2 83       	std	Z+2, r26	; 0x02
    3da8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3daa:	8e 01       	movw	r16, r28
    3dac:	07 5a       	subi	r16, 0xA7	; 167
    3dae:	1f 4f       	sbci	r17, 0xFF	; 255
    3db0:	fe 01       	movw	r30, r28
    3db2:	e3 5a       	subi	r30, 0xA3	; 163
    3db4:	ff 4f       	sbci	r31, 0xFF	; 255
    3db6:	60 81       	ld	r22, Z
    3db8:	71 81       	ldd	r23, Z+1	; 0x01
    3dba:	82 81       	ldd	r24, Z+2	; 0x02
    3dbc:	93 81       	ldd	r25, Z+3	; 0x03
    3dbe:	2b ea       	ldi	r18, 0xAB	; 171
    3dc0:	3a ea       	ldi	r19, 0xAA	; 170
    3dc2:	4a e2       	ldi	r20, 0x2A	; 42
    3dc4:	50 e4       	ldi	r21, 0x40	; 64
    3dc6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3dca:	dc 01       	movw	r26, r24
    3dcc:	cb 01       	movw	r24, r22
    3dce:	f8 01       	movw	r30, r16
    3dd0:	80 83       	st	Z, r24
    3dd2:	91 83       	std	Z+1, r25	; 0x01
    3dd4:	a2 83       	std	Z+2, r26	; 0x02
    3dd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dd8:	fe 01       	movw	r30, r28
    3dda:	e7 5a       	subi	r30, 0xA7	; 167
    3ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dde:	60 81       	ld	r22, Z
    3de0:	71 81       	ldd	r23, Z+1	; 0x01
    3de2:	82 81       	ldd	r24, Z+2	; 0x02
    3de4:	93 81       	ldd	r25, Z+3	; 0x03
    3de6:	20 e0       	ldi	r18, 0x00	; 0
    3de8:	30 e0       	ldi	r19, 0x00	; 0
    3dea:	40 e8       	ldi	r20, 0x80	; 128
    3dec:	5f e3       	ldi	r21, 0x3F	; 63
    3dee:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3df2:	88 23       	and	r24, r24
    3df4:	34 f4       	brge	.+12     	; 0x3e02 <LCDBusyLoop+0x7f2>
		__ticks = 1;
    3df6:	fe 01       	movw	r30, r28
    3df8:	e8 5a       	subi	r30, 0xA8	; 168
    3dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	80 83       	st	Z, r24
    3e00:	e0 c0       	rjmp	.+448    	; 0x3fc2 <LCDBusyLoop+0x9b2>
	else if (__tmp > 255)
    3e02:	fe 01       	movw	r30, r28
    3e04:	e7 5a       	subi	r30, 0xA7	; 167
    3e06:	ff 4f       	sbci	r31, 0xFF	; 255
    3e08:	60 81       	ld	r22, Z
    3e0a:	71 81       	ldd	r23, Z+1	; 0x01
    3e0c:	82 81       	ldd	r24, Z+2	; 0x02
    3e0e:	93 81       	ldd	r25, Z+3	; 0x03
    3e10:	20 e0       	ldi	r18, 0x00	; 0
    3e12:	30 e0       	ldi	r19, 0x00	; 0
    3e14:	4f e7       	ldi	r20, 0x7F	; 127
    3e16:	53 e4       	ldi	r21, 0x43	; 67
    3e18:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3e1c:	18 16       	cp	r1, r24
    3e1e:	0c f0       	brlt	.+2      	; 0x3e22 <LCDBusyLoop+0x812>
    3e20:	c0 c0       	rjmp	.+384    	; 0x3fa2 <LCDBusyLoop+0x992>
	{
		_delay_ms(__us / 1000.0);
    3e22:	fe 01       	movw	r30, r28
    3e24:	e3 5a       	subi	r30, 0xA3	; 163
    3e26:	ff 4f       	sbci	r31, 0xFF	; 255
    3e28:	60 81       	ld	r22, Z
    3e2a:	71 81       	ldd	r23, Z+1	; 0x01
    3e2c:	82 81       	ldd	r24, Z+2	; 0x02
    3e2e:	93 81       	ldd	r25, Z+3	; 0x03
    3e30:	20 e0       	ldi	r18, 0x00	; 0
    3e32:	30 e0       	ldi	r19, 0x00	; 0
    3e34:	4a e7       	ldi	r20, 0x7A	; 122
    3e36:	54 e4       	ldi	r21, 0x44	; 68
    3e38:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    3e3c:	dc 01       	movw	r26, r24
    3e3e:	cb 01       	movw	r24, r22
    3e40:	fe 01       	movw	r30, r28
    3e42:	ec 5a       	subi	r30, 0xAC	; 172
    3e44:	ff 4f       	sbci	r31, 0xFF	; 255
    3e46:	80 83       	st	Z, r24
    3e48:	91 83       	std	Z+1, r25	; 0x01
    3e4a:	a2 83       	std	Z+2, r26	; 0x02
    3e4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e4e:	8e 01       	movw	r16, r28
    3e50:	00 5b       	subi	r16, 0xB0	; 176
    3e52:	1f 4f       	sbci	r17, 0xFF	; 255
    3e54:	fe 01       	movw	r30, r28
    3e56:	ec 5a       	subi	r30, 0xAC	; 172
    3e58:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5a:	60 81       	ld	r22, Z
    3e5c:	71 81       	ldd	r23, Z+1	; 0x01
    3e5e:	82 81       	ldd	r24, Z+2	; 0x02
    3e60:	93 81       	ldd	r25, Z+3	; 0x03
    3e62:	20 e0       	ldi	r18, 0x00	; 0
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	4a ef       	ldi	r20, 0xFA	; 250
    3e68:	54 e4       	ldi	r21, 0x44	; 68
    3e6a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3e6e:	dc 01       	movw	r26, r24
    3e70:	cb 01       	movw	r24, r22
    3e72:	f8 01       	movw	r30, r16
    3e74:	80 83       	st	Z, r24
    3e76:	91 83       	std	Z+1, r25	; 0x01
    3e78:	a2 83       	std	Z+2, r26	; 0x02
    3e7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	e0 5b       	subi	r30, 0xB0	; 176
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	60 81       	ld	r22, Z
    3e84:	71 81       	ldd	r23, Z+1	; 0x01
    3e86:	82 81       	ldd	r24, Z+2	; 0x02
    3e88:	93 81       	ldd	r25, Z+3	; 0x03
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	40 e8       	ldi	r20, 0x80	; 128
    3e90:	5f e3       	ldi	r21, 0x3F	; 63
    3e92:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3e96:	88 23       	and	r24, r24
    3e98:	44 f4       	brge	.+16     	; 0x3eaa <LCDBusyLoop+0x89a>
		__ticks = 1;
    3e9a:	fe 01       	movw	r30, r28
    3e9c:	e2 5b       	subi	r30, 0xB2	; 178
    3e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea0:	81 e0       	ldi	r24, 0x01	; 1
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	91 83       	std	Z+1, r25	; 0x01
    3ea6:	80 83       	st	Z, r24
    3ea8:	64 c0       	rjmp	.+200    	; 0x3f72 <LCDBusyLoop+0x962>
	else if (__tmp > 65535)
    3eaa:	fe 01       	movw	r30, r28
    3eac:	e0 5b       	subi	r30, 0xB0	; 176
    3eae:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb0:	60 81       	ld	r22, Z
    3eb2:	71 81       	ldd	r23, Z+1	; 0x01
    3eb4:	82 81       	ldd	r24, Z+2	; 0x02
    3eb6:	93 81       	ldd	r25, Z+3	; 0x03
    3eb8:	20 e0       	ldi	r18, 0x00	; 0
    3eba:	3f ef       	ldi	r19, 0xFF	; 255
    3ebc:	4f e7       	ldi	r20, 0x7F	; 127
    3ebe:	57 e4       	ldi	r21, 0x47	; 71
    3ec0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3ec4:	18 16       	cp	r1, r24
    3ec6:	0c f0       	brlt	.+2      	; 0x3eca <LCDBusyLoop+0x8ba>
    3ec8:	43 c0       	rjmp	.+134    	; 0x3f50 <LCDBusyLoop+0x940>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eca:	fe 01       	movw	r30, r28
    3ecc:	ec 5a       	subi	r30, 0xAC	; 172
    3ece:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed0:	60 81       	ld	r22, Z
    3ed2:	71 81       	ldd	r23, Z+1	; 0x01
    3ed4:	82 81       	ldd	r24, Z+2	; 0x02
    3ed6:	93 81       	ldd	r25, Z+3	; 0x03
    3ed8:	20 e0       	ldi	r18, 0x00	; 0
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	40 e2       	ldi	r20, 0x20	; 32
    3ede:	51 e4       	ldi	r21, 0x41	; 65
    3ee0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3ee4:	dc 01       	movw	r26, r24
    3ee6:	cb 01       	movw	r24, r22
    3ee8:	8e 01       	movw	r16, r28
    3eea:	02 5b       	subi	r16, 0xB2	; 178
    3eec:	1f 4f       	sbci	r17, 0xFF	; 255
    3eee:	bc 01       	movw	r22, r24
    3ef0:	cd 01       	movw	r24, r26
    3ef2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3ef6:	dc 01       	movw	r26, r24
    3ef8:	cb 01       	movw	r24, r22
    3efa:	f8 01       	movw	r30, r16
    3efc:	91 83       	std	Z+1, r25	; 0x01
    3efe:	80 83       	st	Z, r24
    3f00:	1f c0       	rjmp	.+62     	; 0x3f40 <LCDBusyLoop+0x930>
    3f02:	fe 01       	movw	r30, r28
    3f04:	e4 5b       	subi	r30, 0xB4	; 180
    3f06:	ff 4f       	sbci	r31, 0xFF	; 255
    3f08:	88 ec       	ldi	r24, 0xC8	; 200
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	91 83       	std	Z+1, r25	; 0x01
    3f0e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f10:	fe 01       	movw	r30, r28
    3f12:	e4 5b       	subi	r30, 0xB4	; 180
    3f14:	ff 4f       	sbci	r31, 0xFF	; 255
    3f16:	80 81       	ld	r24, Z
    3f18:	91 81       	ldd	r25, Z+1	; 0x01
    3f1a:	01 97       	sbiw	r24, 0x01	; 1
    3f1c:	f1 f7       	brne	.-4      	; 0x3f1a <LCDBusyLoop+0x90a>
    3f1e:	fe 01       	movw	r30, r28
    3f20:	e4 5b       	subi	r30, 0xB4	; 180
    3f22:	ff 4f       	sbci	r31, 0xFF	; 255
    3f24:	91 83       	std	Z+1, r25	; 0x01
    3f26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f28:	de 01       	movw	r26, r28
    3f2a:	a2 5b       	subi	r26, 0xB2	; 178
    3f2c:	bf 4f       	sbci	r27, 0xFF	; 255
    3f2e:	fe 01       	movw	r30, r28
    3f30:	e2 5b       	subi	r30, 0xB2	; 178
    3f32:	ff 4f       	sbci	r31, 0xFF	; 255
    3f34:	80 81       	ld	r24, Z
    3f36:	91 81       	ldd	r25, Z+1	; 0x01
    3f38:	01 97       	sbiw	r24, 0x01	; 1
    3f3a:	11 96       	adiw	r26, 0x01	; 1
    3f3c:	9c 93       	st	X, r25
    3f3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f40:	fe 01       	movw	r30, r28
    3f42:	e2 5b       	subi	r30, 0xB2	; 178
    3f44:	ff 4f       	sbci	r31, 0xFF	; 255
    3f46:	80 81       	ld	r24, Z
    3f48:	91 81       	ldd	r25, Z+1	; 0x01
    3f4a:	00 97       	sbiw	r24, 0x00	; 0
    3f4c:	d1 f6       	brne	.-76     	; 0x3f02 <LCDBusyLoop+0x8f2>
    3f4e:	4b c0       	rjmp	.+150    	; 0x3fe6 <LCDBusyLoop+0x9d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f50:	8e 01       	movw	r16, r28
    3f52:	02 5b       	subi	r16, 0xB2	; 178
    3f54:	1f 4f       	sbci	r17, 0xFF	; 255
    3f56:	fe 01       	movw	r30, r28
    3f58:	e0 5b       	subi	r30, 0xB0	; 176
    3f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5c:	60 81       	ld	r22, Z
    3f5e:	71 81       	ldd	r23, Z+1	; 0x01
    3f60:	82 81       	ldd	r24, Z+2	; 0x02
    3f62:	93 81       	ldd	r25, Z+3	; 0x03
    3f64:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3f68:	dc 01       	movw	r26, r24
    3f6a:	cb 01       	movw	r24, r22
    3f6c:	f8 01       	movw	r30, r16
    3f6e:	91 83       	std	Z+1, r25	; 0x01
    3f70:	80 83       	st	Z, r24
    3f72:	de 01       	movw	r26, r28
    3f74:	a6 5b       	subi	r26, 0xB6	; 182
    3f76:	bf 4f       	sbci	r27, 0xFF	; 255
    3f78:	fe 01       	movw	r30, r28
    3f7a:	e2 5b       	subi	r30, 0xB2	; 178
    3f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7e:	80 81       	ld	r24, Z
    3f80:	91 81       	ldd	r25, Z+1	; 0x01
    3f82:	11 96       	adiw	r26, 0x01	; 1
    3f84:	9c 93       	st	X, r25
    3f86:	8e 93       	st	-X, r24
    3f88:	fe 01       	movw	r30, r28
    3f8a:	e6 5b       	subi	r30, 0xB6	; 182
    3f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8e:	80 81       	ld	r24, Z
    3f90:	91 81       	ldd	r25, Z+1	; 0x01
    3f92:	01 97       	sbiw	r24, 0x01	; 1
    3f94:	f1 f7       	brne	.-4      	; 0x3f92 <LCDBusyLoop+0x982>
    3f96:	fe 01       	movw	r30, r28
    3f98:	e6 5b       	subi	r30, 0xB6	; 182
    3f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9c:	91 83       	std	Z+1, r25	; 0x01
    3f9e:	80 83       	st	Z, r24
    3fa0:	22 c0       	rjmp	.+68     	; 0x3fe6 <LCDBusyLoop+0x9d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3fa2:	8e 01       	movw	r16, r28
    3fa4:	08 5a       	subi	r16, 0xA8	; 168
    3fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fa8:	fe 01       	movw	r30, r28
    3faa:	e7 5a       	subi	r30, 0xA7	; 167
    3fac:	ff 4f       	sbci	r31, 0xFF	; 255
    3fae:	60 81       	ld	r22, Z
    3fb0:	71 81       	ldd	r23, Z+1	; 0x01
    3fb2:	82 81       	ldd	r24, Z+2	; 0x02
    3fb4:	93 81       	ldd	r25, Z+3	; 0x03
    3fb6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3fba:	dc 01       	movw	r26, r24
    3fbc:	cb 01       	movw	r24, r22
    3fbe:	f8 01       	movw	r30, r16
    3fc0:	80 83       	st	Z, r24
    3fc2:	de 01       	movw	r26, r28
    3fc4:	a7 5b       	subi	r26, 0xB7	; 183
    3fc6:	bf 4f       	sbci	r27, 0xFF	; 255
    3fc8:	fe 01       	movw	r30, r28
    3fca:	e8 5a       	subi	r30, 0xA8	; 168
    3fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fce:	80 81       	ld	r24, Z
    3fd0:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3fd2:	fe 01       	movw	r30, r28
    3fd4:	e7 5b       	subi	r30, 0xB7	; 183
    3fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd8:	80 81       	ld	r24, Z
    3fda:	8a 95       	dec	r24
    3fdc:	f1 f7       	brne	.-4      	; 0x3fda <LCDBusyLoop+0x9ca>
    3fde:	fe 01       	movw	r30, r28
    3fe0:	e7 5b       	subi	r30, 0xB7	; 183
    3fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe4:	80 83       	st	Z, r24
		_delay_us(1);	//tEL

		SET_E();
    3fe6:	ab e3       	ldi	r26, 0x3B	; 59
    3fe8:	b0 e0       	ldi	r27, 0x00	; 0
    3fea:	eb e3       	ldi	r30, 0x3B	; 59
    3fec:	f0 e0       	ldi	r31, 0x00	; 0
    3fee:	80 81       	ld	r24, Z
    3ff0:	84 60       	ori	r24, 0x04	; 4
    3ff2:	8c 93       	st	X, r24
    3ff4:	fe 01       	movw	r30, r28
    3ff6:	eb 5b       	subi	r30, 0xBB	; 187
    3ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffa:	80 e0       	ldi	r24, 0x00	; 0
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
    3ffe:	a0 e0       	ldi	r26, 0x00	; 0
    4000:	bf e3       	ldi	r27, 0x3F	; 63
    4002:	80 83       	st	Z, r24
    4004:	91 83       	std	Z+1, r25	; 0x01
    4006:	a2 83       	std	Z+2, r26	; 0x02
    4008:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    400a:	8e 01       	movw	r16, r28
    400c:	0f 5b       	subi	r16, 0xBF	; 191
    400e:	1f 4f       	sbci	r17, 0xFF	; 255
    4010:	fe 01       	movw	r30, r28
    4012:	eb 5b       	subi	r30, 0xBB	; 187
    4014:	ff 4f       	sbci	r31, 0xFF	; 255
    4016:	60 81       	ld	r22, Z
    4018:	71 81       	ldd	r23, Z+1	; 0x01
    401a:	82 81       	ldd	r24, Z+2	; 0x02
    401c:	93 81       	ldd	r25, Z+3	; 0x03
    401e:	2b ea       	ldi	r18, 0xAB	; 171
    4020:	3a ea       	ldi	r19, 0xAA	; 170
    4022:	4a e2       	ldi	r20, 0x2A	; 42
    4024:	50 e4       	ldi	r21, 0x40	; 64
    4026:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    402a:	dc 01       	movw	r26, r24
    402c:	cb 01       	movw	r24, r22
    402e:	f8 01       	movw	r30, r16
    4030:	80 83       	st	Z, r24
    4032:	91 83       	std	Z+1, r25	; 0x01
    4034:	a2 83       	std	Z+2, r26	; 0x02
    4036:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4038:	fe 01       	movw	r30, r28
    403a:	ef 5b       	subi	r30, 0xBF	; 191
    403c:	ff 4f       	sbci	r31, 0xFF	; 255
    403e:	60 81       	ld	r22, Z
    4040:	71 81       	ldd	r23, Z+1	; 0x01
    4042:	82 81       	ldd	r24, Z+2	; 0x02
    4044:	93 81       	ldd	r25, Z+3	; 0x03
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	30 e0       	ldi	r19, 0x00	; 0
    404a:	40 e8       	ldi	r20, 0x80	; 128
    404c:	5f e3       	ldi	r21, 0x3F	; 63
    404e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4052:	88 23       	and	r24, r24
    4054:	34 f4       	brge	.+12     	; 0x4062 <LCDBusyLoop+0xa52>
		__ticks = 1;
    4056:	81 e0       	ldi	r24, 0x01	; 1
    4058:	fe 01       	movw	r30, r28
    405a:	e0 5c       	subi	r30, 0xC0	; 192
    405c:	ff 4f       	sbci	r31, 0xFF	; 255
    405e:	80 83       	st	Z, r24
    4060:	9d c0       	rjmp	.+314    	; 0x419c <LCDBusyLoop+0xb8c>
	else if (__tmp > 255)
    4062:	fe 01       	movw	r30, r28
    4064:	ef 5b       	subi	r30, 0xBF	; 191
    4066:	ff 4f       	sbci	r31, 0xFF	; 255
    4068:	60 81       	ld	r22, Z
    406a:	71 81       	ldd	r23, Z+1	; 0x01
    406c:	82 81       	ldd	r24, Z+2	; 0x02
    406e:	93 81       	ldd	r25, Z+3	; 0x03
    4070:	20 e0       	ldi	r18, 0x00	; 0
    4072:	30 e0       	ldi	r19, 0x00	; 0
    4074:	4f e7       	ldi	r20, 0x7F	; 127
    4076:	53 e4       	ldi	r21, 0x43	; 67
    4078:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    407c:	18 16       	cp	r1, r24
    407e:	0c f0       	brlt	.+2      	; 0x4082 <LCDBusyLoop+0xa72>
    4080:	7e c0       	rjmp	.+252    	; 0x417e <LCDBusyLoop+0xb6e>
	{
		_delay_ms(__us / 1000.0);
    4082:	fe 01       	movw	r30, r28
    4084:	eb 5b       	subi	r30, 0xBB	; 187
    4086:	ff 4f       	sbci	r31, 0xFF	; 255
    4088:	60 81       	ld	r22, Z
    408a:	71 81       	ldd	r23, Z+1	; 0x01
    408c:	82 81       	ldd	r24, Z+2	; 0x02
    408e:	93 81       	ldd	r25, Z+3	; 0x03
    4090:	20 e0       	ldi	r18, 0x00	; 0
    4092:	30 e0       	ldi	r19, 0x00	; 0
    4094:	4a e7       	ldi	r20, 0x7A	; 122
    4096:	54 e4       	ldi	r21, 0x44	; 68
    4098:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    409c:	dc 01       	movw	r26, r24
    409e:	cb 01       	movw	r24, r22
    40a0:	8c af       	std	Y+60, r24	; 0x3c
    40a2:	9d af       	std	Y+61, r25	; 0x3d
    40a4:	ae af       	std	Y+62, r26	; 0x3e
    40a6:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40a8:	6c ad       	ldd	r22, Y+60	; 0x3c
    40aa:	7d ad       	ldd	r23, Y+61	; 0x3d
    40ac:	8e ad       	ldd	r24, Y+62	; 0x3e
    40ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    40b0:	20 e0       	ldi	r18, 0x00	; 0
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	4a ef       	ldi	r20, 0xFA	; 250
    40b6:	54 e4       	ldi	r21, 0x44	; 68
    40b8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    40bc:	dc 01       	movw	r26, r24
    40be:	cb 01       	movw	r24, r22
    40c0:	88 af       	std	Y+56, r24	; 0x38
    40c2:	99 af       	std	Y+57, r25	; 0x39
    40c4:	aa af       	std	Y+58, r26	; 0x3a
    40c6:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    40c8:	68 ad       	ldd	r22, Y+56	; 0x38
    40ca:	79 ad       	ldd	r23, Y+57	; 0x39
    40cc:	8a ad       	ldd	r24, Y+58	; 0x3a
    40ce:	9b ad       	ldd	r25, Y+59	; 0x3b
    40d0:	20 e0       	ldi	r18, 0x00	; 0
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	40 e8       	ldi	r20, 0x80	; 128
    40d6:	5f e3       	ldi	r21, 0x3F	; 63
    40d8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    40dc:	88 23       	and	r24, r24
    40de:	2c f4       	brge	.+10     	; 0x40ea <LCDBusyLoop+0xada>
		__ticks = 1;
    40e0:	81 e0       	ldi	r24, 0x01	; 1
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	9f ab       	std	Y+55, r25	; 0x37
    40e6:	8e ab       	std	Y+54, r24	; 0x36
    40e8:	3f c0       	rjmp	.+126    	; 0x4168 <LCDBusyLoop+0xb58>
	else if (__tmp > 65535)
    40ea:	68 ad       	ldd	r22, Y+56	; 0x38
    40ec:	79 ad       	ldd	r23, Y+57	; 0x39
    40ee:	8a ad       	ldd	r24, Y+58	; 0x3a
    40f0:	9b ad       	ldd	r25, Y+59	; 0x3b
    40f2:	20 e0       	ldi	r18, 0x00	; 0
    40f4:	3f ef       	ldi	r19, 0xFF	; 255
    40f6:	4f e7       	ldi	r20, 0x7F	; 127
    40f8:	57 e4       	ldi	r21, 0x47	; 71
    40fa:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    40fe:	18 16       	cp	r1, r24
    4100:	4c f5       	brge	.+82     	; 0x4154 <LCDBusyLoop+0xb44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4102:	6c ad       	ldd	r22, Y+60	; 0x3c
    4104:	7d ad       	ldd	r23, Y+61	; 0x3d
    4106:	8e ad       	ldd	r24, Y+62	; 0x3e
    4108:	9f ad       	ldd	r25, Y+63	; 0x3f
    410a:	20 e0       	ldi	r18, 0x00	; 0
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	40 e2       	ldi	r20, 0x20	; 32
    4110:	51 e4       	ldi	r21, 0x41	; 65
    4112:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4116:	dc 01       	movw	r26, r24
    4118:	cb 01       	movw	r24, r22
    411a:	bc 01       	movw	r22, r24
    411c:	cd 01       	movw	r24, r26
    411e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4122:	dc 01       	movw	r26, r24
    4124:	cb 01       	movw	r24, r22
    4126:	9f ab       	std	Y+55, r25	; 0x37
    4128:	8e ab       	std	Y+54, r24	; 0x36
    412a:	0f c0       	rjmp	.+30     	; 0x414a <LCDBusyLoop+0xb3a>
    412c:	88 ec       	ldi	r24, 0xC8	; 200
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	9d ab       	std	Y+53, r25	; 0x35
    4132:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4134:	8c a9       	ldd	r24, Y+52	; 0x34
    4136:	9d a9       	ldd	r25, Y+53	; 0x35
    4138:	01 97       	sbiw	r24, 0x01	; 1
    413a:	f1 f7       	brne	.-4      	; 0x4138 <LCDBusyLoop+0xb28>
    413c:	9d ab       	std	Y+53, r25	; 0x35
    413e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4140:	8e a9       	ldd	r24, Y+54	; 0x36
    4142:	9f a9       	ldd	r25, Y+55	; 0x37
    4144:	01 97       	sbiw	r24, 0x01	; 1
    4146:	9f ab       	std	Y+55, r25	; 0x37
    4148:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    414a:	8e a9       	ldd	r24, Y+54	; 0x36
    414c:	9f a9       	ldd	r25, Y+55	; 0x37
    414e:	00 97       	sbiw	r24, 0x00	; 0
    4150:	69 f7       	brne	.-38     	; 0x412c <LCDBusyLoop+0xb1c>
    4152:	2d c0       	rjmp	.+90     	; 0x41ae <LCDBusyLoop+0xb9e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4154:	68 ad       	ldd	r22, Y+56	; 0x38
    4156:	79 ad       	ldd	r23, Y+57	; 0x39
    4158:	8a ad       	ldd	r24, Y+58	; 0x3a
    415a:	9b ad       	ldd	r25, Y+59	; 0x3b
    415c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4160:	dc 01       	movw	r26, r24
    4162:	cb 01       	movw	r24, r22
    4164:	9f ab       	std	Y+55, r25	; 0x37
    4166:	8e ab       	std	Y+54, r24	; 0x36
    4168:	8e a9       	ldd	r24, Y+54	; 0x36
    416a:	9f a9       	ldd	r25, Y+55	; 0x37
    416c:	9b ab       	std	Y+51, r25	; 0x33
    416e:	8a ab       	std	Y+50, r24	; 0x32
    4170:	8a a9       	ldd	r24, Y+50	; 0x32
    4172:	9b a9       	ldd	r25, Y+51	; 0x33
    4174:	01 97       	sbiw	r24, 0x01	; 1
    4176:	f1 f7       	brne	.-4      	; 0x4174 <LCDBusyLoop+0xb64>
    4178:	9b ab       	std	Y+51, r25	; 0x33
    417a:	8a ab       	std	Y+50, r24	; 0x32
    417c:	18 c0       	rjmp	.+48     	; 0x41ae <LCDBusyLoop+0xb9e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    417e:	fe 01       	movw	r30, r28
    4180:	ef 5b       	subi	r30, 0xBF	; 191
    4182:	ff 4f       	sbci	r31, 0xFF	; 255
    4184:	60 81       	ld	r22, Z
    4186:	71 81       	ldd	r23, Z+1	; 0x01
    4188:	82 81       	ldd	r24, Z+2	; 0x02
    418a:	93 81       	ldd	r25, Z+3	; 0x03
    418c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4190:	dc 01       	movw	r26, r24
    4192:	cb 01       	movw	r24, r22
    4194:	fe 01       	movw	r30, r28
    4196:	e0 5c       	subi	r30, 0xC0	; 192
    4198:	ff 4f       	sbci	r31, 0xFF	; 255
    419a:	80 83       	st	Z, r24
    419c:	fe 01       	movw	r30, r28
    419e:	e0 5c       	subi	r30, 0xC0	; 192
    41a0:	ff 4f       	sbci	r31, 0xFF	; 255
    41a2:	80 81       	ld	r24, Z
    41a4:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    41a6:	89 a9       	ldd	r24, Y+49	; 0x31
    41a8:	8a 95       	dec	r24
    41aa:	f1 f7       	brne	.-4      	; 0x41a8 <LCDBusyLoop+0xb98>
    41ac:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
    41ae:	e9 e3       	ldi	r30, 0x39	; 57
    41b0:	f0 e0       	ldi	r31, 0x00	; 0
    41b2:	80 81       	ld	r24, Z
    41b4:	fe 01       	movw	r30, r28
    41b6:	e7 55       	subi	r30, 0x57	; 87
    41b8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ba:	82 95       	swap	r24
    41bc:	8f 70       	andi	r24, 0x0F	; 15
    41be:	80 83       	st	Z, r24
		temp&=0x0F;
    41c0:	de 01       	movw	r26, r28
    41c2:	a7 55       	subi	r26, 0x57	; 87
    41c4:	bf 4f       	sbci	r27, 0xFF	; 255
    41c6:	fe 01       	movw	r30, r28
    41c8:	e7 55       	subi	r30, 0x57	; 87
    41ca:	ff 4f       	sbci	r31, 0xFF	; 255
    41cc:	80 81       	ld	r24, Z
    41ce:	8f 70       	andi	r24, 0x0F	; 15
    41d0:	8c 93       	st	X, r24

		status=status|temp;
    41d2:	9e 01       	movw	r18, r28
    41d4:	26 55       	subi	r18, 0x56	; 86
    41d6:	3f 4f       	sbci	r19, 0xFF	; 255
    41d8:	fe 01       	movw	r30, r28
    41da:	e6 55       	subi	r30, 0x56	; 86
    41dc:	ff 4f       	sbci	r31, 0xFF	; 255
    41de:	de 01       	movw	r26, r28
    41e0:	a7 55       	subi	r26, 0x57	; 87
    41e2:	bf 4f       	sbci	r27, 0xFF	; 255
    41e4:	90 81       	ld	r25, Z
    41e6:	8c 91       	ld	r24, X
    41e8:	89 2b       	or	r24, r25
    41ea:	f9 01       	movw	r30, r18
    41ec:	80 83       	st	Z, r24

		busy=status & 0b10000000;
    41ee:	de 01       	movw	r26, r28
    41f0:	a5 55       	subi	r26, 0x55	; 85
    41f2:	bf 4f       	sbci	r27, 0xFF	; 255
    41f4:	fe 01       	movw	r30, r28
    41f6:	e6 55       	subi	r30, 0x56	; 86
    41f8:	ff 4f       	sbci	r31, 0xFF	; 255
    41fa:	80 81       	ld	r24, Z
    41fc:	80 78       	andi	r24, 0x80	; 128
    41fe:	8c 93       	st	X, r24
    4200:	80 e0       	ldi	r24, 0x00	; 0
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	a0 e0       	ldi	r26, 0x00	; 0
    4206:	bf e3       	ldi	r27, 0x3F	; 63
    4208:	8d a7       	std	Y+45, r24	; 0x2d
    420a:	9e a7       	std	Y+46, r25	; 0x2e
    420c:	af a7       	std	Y+47, r26	; 0x2f
    420e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4210:	6d a5       	ldd	r22, Y+45	; 0x2d
    4212:	7e a5       	ldd	r23, Y+46	; 0x2e
    4214:	8f a5       	ldd	r24, Y+47	; 0x2f
    4216:	98 a9       	ldd	r25, Y+48	; 0x30
    4218:	2b ea       	ldi	r18, 0xAB	; 171
    421a:	3a ea       	ldi	r19, 0xAA	; 170
    421c:	4a e2       	ldi	r20, 0x2A	; 42
    421e:	50 e4       	ldi	r21, 0x40	; 64
    4220:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4224:	dc 01       	movw	r26, r24
    4226:	cb 01       	movw	r24, r22
    4228:	89 a7       	std	Y+41, r24	; 0x29
    422a:	9a a7       	std	Y+42, r25	; 0x2a
    422c:	ab a7       	std	Y+43, r26	; 0x2b
    422e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4230:	69 a5       	ldd	r22, Y+41	; 0x29
    4232:	7a a5       	ldd	r23, Y+42	; 0x2a
    4234:	8b a5       	ldd	r24, Y+43	; 0x2b
    4236:	9c a5       	ldd	r25, Y+44	; 0x2c
    4238:	20 e0       	ldi	r18, 0x00	; 0
    423a:	30 e0       	ldi	r19, 0x00	; 0
    423c:	40 e8       	ldi	r20, 0x80	; 128
    423e:	5f e3       	ldi	r21, 0x3F	; 63
    4240:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4244:	88 23       	and	r24, r24
    4246:	1c f4       	brge	.+6      	; 0x424e <LCDBusyLoop+0xc3e>
		__ticks = 1;
    4248:	81 e0       	ldi	r24, 0x01	; 1
    424a:	88 a7       	std	Y+40, r24	; 0x28
    424c:	91 c0       	rjmp	.+290    	; 0x4370 <LCDBusyLoop+0xd60>
	else if (__tmp > 255)
    424e:	69 a5       	ldd	r22, Y+41	; 0x29
    4250:	7a a5       	ldd	r23, Y+42	; 0x2a
    4252:	8b a5       	ldd	r24, Y+43	; 0x2b
    4254:	9c a5       	ldd	r25, Y+44	; 0x2c
    4256:	20 e0       	ldi	r18, 0x00	; 0
    4258:	30 e0       	ldi	r19, 0x00	; 0
    425a:	4f e7       	ldi	r20, 0x7F	; 127
    425c:	53 e4       	ldi	r21, 0x43	; 67
    425e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4262:	18 16       	cp	r1, r24
    4264:	0c f0       	brlt	.+2      	; 0x4268 <LCDBusyLoop+0xc58>
    4266:	7b c0       	rjmp	.+246    	; 0x435e <LCDBusyLoop+0xd4e>
	{
		_delay_ms(__us / 1000.0);
    4268:	6d a5       	ldd	r22, Y+45	; 0x2d
    426a:	7e a5       	ldd	r23, Y+46	; 0x2e
    426c:	8f a5       	ldd	r24, Y+47	; 0x2f
    426e:	98 a9       	ldd	r25, Y+48	; 0x30
    4270:	20 e0       	ldi	r18, 0x00	; 0
    4272:	30 e0       	ldi	r19, 0x00	; 0
    4274:	4a e7       	ldi	r20, 0x7A	; 122
    4276:	54 e4       	ldi	r21, 0x44	; 68
    4278:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    427c:	dc 01       	movw	r26, r24
    427e:	cb 01       	movw	r24, r22
    4280:	8c a3       	std	Y+36, r24	; 0x24
    4282:	9d a3       	std	Y+37, r25	; 0x25
    4284:	ae a3       	std	Y+38, r26	; 0x26
    4286:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4288:	6c a1       	ldd	r22, Y+36	; 0x24
    428a:	7d a1       	ldd	r23, Y+37	; 0x25
    428c:	8e a1       	ldd	r24, Y+38	; 0x26
    428e:	9f a1       	ldd	r25, Y+39	; 0x27
    4290:	20 e0       	ldi	r18, 0x00	; 0
    4292:	30 e0       	ldi	r19, 0x00	; 0
    4294:	4a ef       	ldi	r20, 0xFA	; 250
    4296:	54 e4       	ldi	r21, 0x44	; 68
    4298:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    429c:	dc 01       	movw	r26, r24
    429e:	cb 01       	movw	r24, r22
    42a0:	88 a3       	std	Y+32, r24	; 0x20
    42a2:	99 a3       	std	Y+33, r25	; 0x21
    42a4:	aa a3       	std	Y+34, r26	; 0x22
    42a6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    42a8:	68 a1       	ldd	r22, Y+32	; 0x20
    42aa:	79 a1       	ldd	r23, Y+33	; 0x21
    42ac:	8a a1       	ldd	r24, Y+34	; 0x22
    42ae:	9b a1       	ldd	r25, Y+35	; 0x23
    42b0:	20 e0       	ldi	r18, 0x00	; 0
    42b2:	30 e0       	ldi	r19, 0x00	; 0
    42b4:	40 e8       	ldi	r20, 0x80	; 128
    42b6:	5f e3       	ldi	r21, 0x3F	; 63
    42b8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    42bc:	88 23       	and	r24, r24
    42be:	2c f4       	brge	.+10     	; 0x42ca <LCDBusyLoop+0xcba>
		__ticks = 1;
    42c0:	81 e0       	ldi	r24, 0x01	; 1
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	9f 8f       	std	Y+31, r25	; 0x1f
    42c6:	8e 8f       	std	Y+30, r24	; 0x1e
    42c8:	3f c0       	rjmp	.+126    	; 0x4348 <LCDBusyLoop+0xd38>
	else if (__tmp > 65535)
    42ca:	68 a1       	ldd	r22, Y+32	; 0x20
    42cc:	79 a1       	ldd	r23, Y+33	; 0x21
    42ce:	8a a1       	ldd	r24, Y+34	; 0x22
    42d0:	9b a1       	ldd	r25, Y+35	; 0x23
    42d2:	20 e0       	ldi	r18, 0x00	; 0
    42d4:	3f ef       	ldi	r19, 0xFF	; 255
    42d6:	4f e7       	ldi	r20, 0x7F	; 127
    42d8:	57 e4       	ldi	r21, 0x47	; 71
    42da:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    42de:	18 16       	cp	r1, r24
    42e0:	4c f5       	brge	.+82     	; 0x4334 <LCDBusyLoop+0xd24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42e2:	6c a1       	ldd	r22, Y+36	; 0x24
    42e4:	7d a1       	ldd	r23, Y+37	; 0x25
    42e6:	8e a1       	ldd	r24, Y+38	; 0x26
    42e8:	9f a1       	ldd	r25, Y+39	; 0x27
    42ea:	20 e0       	ldi	r18, 0x00	; 0
    42ec:	30 e0       	ldi	r19, 0x00	; 0
    42ee:	40 e2       	ldi	r20, 0x20	; 32
    42f0:	51 e4       	ldi	r21, 0x41	; 65
    42f2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    42f6:	dc 01       	movw	r26, r24
    42f8:	cb 01       	movw	r24, r22
    42fa:	bc 01       	movw	r22, r24
    42fc:	cd 01       	movw	r24, r26
    42fe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4302:	dc 01       	movw	r26, r24
    4304:	cb 01       	movw	r24, r22
    4306:	9f 8f       	std	Y+31, r25	; 0x1f
    4308:	8e 8f       	std	Y+30, r24	; 0x1e
    430a:	0f c0       	rjmp	.+30     	; 0x432a <LCDBusyLoop+0xd1a>
    430c:	88 ec       	ldi	r24, 0xC8	; 200
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	9d 8f       	std	Y+29, r25	; 0x1d
    4312:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4314:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4316:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4318:	01 97       	sbiw	r24, 0x01	; 1
    431a:	f1 f7       	brne	.-4      	; 0x4318 <LCDBusyLoop+0xd08>
    431c:	9d 8f       	std	Y+29, r25	; 0x1d
    431e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4320:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4322:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4324:	01 97       	sbiw	r24, 0x01	; 1
    4326:	9f 8f       	std	Y+31, r25	; 0x1f
    4328:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    432a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    432c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    432e:	00 97       	sbiw	r24, 0x00	; 0
    4330:	69 f7       	brne	.-38     	; 0x430c <LCDBusyLoop+0xcfc>
    4332:	24 c0       	rjmp	.+72     	; 0x437c <LCDBusyLoop+0xd6c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4334:	68 a1       	ldd	r22, Y+32	; 0x20
    4336:	79 a1       	ldd	r23, Y+33	; 0x21
    4338:	8a a1       	ldd	r24, Y+34	; 0x22
    433a:	9b a1       	ldd	r25, Y+35	; 0x23
    433c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4340:	dc 01       	movw	r26, r24
    4342:	cb 01       	movw	r24, r22
    4344:	9f 8f       	std	Y+31, r25	; 0x1f
    4346:	8e 8f       	std	Y+30, r24	; 0x1e
    4348:	8e 8d       	ldd	r24, Y+30	; 0x1e
    434a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    434c:	9b 8f       	std	Y+27, r25	; 0x1b
    434e:	8a 8f       	std	Y+26, r24	; 0x1a
    4350:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4352:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4354:	01 97       	sbiw	r24, 0x01	; 1
    4356:	f1 f7       	brne	.-4      	; 0x4354 <LCDBusyLoop+0xd44>
    4358:	9b 8f       	std	Y+27, r25	; 0x1b
    435a:	8a 8f       	std	Y+26, r24	; 0x1a
    435c:	0f c0       	rjmp	.+30     	; 0x437c <LCDBusyLoop+0xd6c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    435e:	69 a5       	ldd	r22, Y+41	; 0x29
    4360:	7a a5       	ldd	r23, Y+42	; 0x2a
    4362:	8b a5       	ldd	r24, Y+43	; 0x2b
    4364:	9c a5       	ldd	r25, Y+44	; 0x2c
    4366:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    436a:	dc 01       	movw	r26, r24
    436c:	cb 01       	movw	r24, r22
    436e:	88 a7       	std	Y+40, r24	; 0x28
    4370:	88 a5       	ldd	r24, Y+40	; 0x28
    4372:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4374:	89 8d       	ldd	r24, Y+25	; 0x19
    4376:	8a 95       	dec	r24
    4378:	f1 f7       	brne	.-4      	; 0x4376 <LCDBusyLoop+0xd66>
    437a:	89 8f       	std	Y+25, r24	; 0x19

		_delay_us(0.5);
		CLEAR_E();
    437c:	ab e3       	ldi	r26, 0x3B	; 59
    437e:	b0 e0       	ldi	r27, 0x00	; 0
    4380:	eb e3       	ldi	r30, 0x3B	; 59
    4382:	f0 e0       	ldi	r31, 0x00	; 0
    4384:	80 81       	ld	r24, Z
    4386:	8b 7f       	andi	r24, 0xFB	; 251
    4388:	8c 93       	st	X, r24
    438a:	80 e0       	ldi	r24, 0x00	; 0
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	a0 e8       	ldi	r26, 0x80	; 128
    4390:	bf e3       	ldi	r27, 0x3F	; 63
    4392:	8d 8b       	std	Y+21, r24	; 0x15
    4394:	9e 8b       	std	Y+22, r25	; 0x16
    4396:	af 8b       	std	Y+23, r26	; 0x17
    4398:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    439a:	6d 89       	ldd	r22, Y+21	; 0x15
    439c:	7e 89       	ldd	r23, Y+22	; 0x16
    439e:	8f 89       	ldd	r24, Y+23	; 0x17
    43a0:	98 8d       	ldd	r25, Y+24	; 0x18
    43a2:	2b ea       	ldi	r18, 0xAB	; 171
    43a4:	3a ea       	ldi	r19, 0xAA	; 170
    43a6:	4a e2       	ldi	r20, 0x2A	; 42
    43a8:	50 e4       	ldi	r21, 0x40	; 64
    43aa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    43ae:	dc 01       	movw	r26, r24
    43b0:	cb 01       	movw	r24, r22
    43b2:	89 8b       	std	Y+17, r24	; 0x11
    43b4:	9a 8b       	std	Y+18, r25	; 0x12
    43b6:	ab 8b       	std	Y+19, r26	; 0x13
    43b8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    43ba:	69 89       	ldd	r22, Y+17	; 0x11
    43bc:	7a 89       	ldd	r23, Y+18	; 0x12
    43be:	8b 89       	ldd	r24, Y+19	; 0x13
    43c0:	9c 89       	ldd	r25, Y+20	; 0x14
    43c2:	20 e0       	ldi	r18, 0x00	; 0
    43c4:	30 e0       	ldi	r19, 0x00	; 0
    43c6:	40 e8       	ldi	r20, 0x80	; 128
    43c8:	5f e3       	ldi	r21, 0x3F	; 63
    43ca:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    43ce:	88 23       	and	r24, r24
    43d0:	1c f4       	brge	.+6      	; 0x43d8 <LCDBusyLoop+0xdc8>
		__ticks = 1;
    43d2:	81 e0       	ldi	r24, 0x01	; 1
    43d4:	88 8b       	std	Y+16, r24	; 0x10
    43d6:	91 c0       	rjmp	.+290    	; 0x44fa <LCDBusyLoop+0xeea>
	else if (__tmp > 255)
    43d8:	69 89       	ldd	r22, Y+17	; 0x11
    43da:	7a 89       	ldd	r23, Y+18	; 0x12
    43dc:	8b 89       	ldd	r24, Y+19	; 0x13
    43de:	9c 89       	ldd	r25, Y+20	; 0x14
    43e0:	20 e0       	ldi	r18, 0x00	; 0
    43e2:	30 e0       	ldi	r19, 0x00	; 0
    43e4:	4f e7       	ldi	r20, 0x7F	; 127
    43e6:	53 e4       	ldi	r21, 0x43	; 67
    43e8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    43ec:	18 16       	cp	r1, r24
    43ee:	0c f0       	brlt	.+2      	; 0x43f2 <LCDBusyLoop+0xde2>
    43f0:	7b c0       	rjmp	.+246    	; 0x44e8 <LCDBusyLoop+0xed8>
	{
		_delay_ms(__us / 1000.0);
    43f2:	6d 89       	ldd	r22, Y+21	; 0x15
    43f4:	7e 89       	ldd	r23, Y+22	; 0x16
    43f6:	8f 89       	ldd	r24, Y+23	; 0x17
    43f8:	98 8d       	ldd	r25, Y+24	; 0x18
    43fa:	20 e0       	ldi	r18, 0x00	; 0
    43fc:	30 e0       	ldi	r19, 0x00	; 0
    43fe:	4a e7       	ldi	r20, 0x7A	; 122
    4400:	54 e4       	ldi	r21, 0x44	; 68
    4402:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    4406:	dc 01       	movw	r26, r24
    4408:	cb 01       	movw	r24, r22
    440a:	8c 87       	std	Y+12, r24	; 0x0c
    440c:	9d 87       	std	Y+13, r25	; 0x0d
    440e:	ae 87       	std	Y+14, r26	; 0x0e
    4410:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4412:	6c 85       	ldd	r22, Y+12	; 0x0c
    4414:	7d 85       	ldd	r23, Y+13	; 0x0d
    4416:	8e 85       	ldd	r24, Y+14	; 0x0e
    4418:	9f 85       	ldd	r25, Y+15	; 0x0f
    441a:	20 e0       	ldi	r18, 0x00	; 0
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	4a ef       	ldi	r20, 0xFA	; 250
    4420:	54 e4       	ldi	r21, 0x44	; 68
    4422:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4426:	dc 01       	movw	r26, r24
    4428:	cb 01       	movw	r24, r22
    442a:	88 87       	std	Y+8, r24	; 0x08
    442c:	99 87       	std	Y+9, r25	; 0x09
    442e:	aa 87       	std	Y+10, r26	; 0x0a
    4430:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4432:	68 85       	ldd	r22, Y+8	; 0x08
    4434:	79 85       	ldd	r23, Y+9	; 0x09
    4436:	8a 85       	ldd	r24, Y+10	; 0x0a
    4438:	9b 85       	ldd	r25, Y+11	; 0x0b
    443a:	20 e0       	ldi	r18, 0x00	; 0
    443c:	30 e0       	ldi	r19, 0x00	; 0
    443e:	40 e8       	ldi	r20, 0x80	; 128
    4440:	5f e3       	ldi	r21, 0x3F	; 63
    4442:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4446:	88 23       	and	r24, r24
    4448:	2c f4       	brge	.+10     	; 0x4454 <LCDBusyLoop+0xe44>
		__ticks = 1;
    444a:	81 e0       	ldi	r24, 0x01	; 1
    444c:	90 e0       	ldi	r25, 0x00	; 0
    444e:	9f 83       	std	Y+7, r25	; 0x07
    4450:	8e 83       	std	Y+6, r24	; 0x06
    4452:	3f c0       	rjmp	.+126    	; 0x44d2 <LCDBusyLoop+0xec2>
	else if (__tmp > 65535)
    4454:	68 85       	ldd	r22, Y+8	; 0x08
    4456:	79 85       	ldd	r23, Y+9	; 0x09
    4458:	8a 85       	ldd	r24, Y+10	; 0x0a
    445a:	9b 85       	ldd	r25, Y+11	; 0x0b
    445c:	20 e0       	ldi	r18, 0x00	; 0
    445e:	3f ef       	ldi	r19, 0xFF	; 255
    4460:	4f e7       	ldi	r20, 0x7F	; 127
    4462:	57 e4       	ldi	r21, 0x47	; 71
    4464:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4468:	18 16       	cp	r1, r24
    446a:	4c f5       	brge	.+82     	; 0x44be <LCDBusyLoop+0xeae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    446c:	6c 85       	ldd	r22, Y+12	; 0x0c
    446e:	7d 85       	ldd	r23, Y+13	; 0x0d
    4470:	8e 85       	ldd	r24, Y+14	; 0x0e
    4472:	9f 85       	ldd	r25, Y+15	; 0x0f
    4474:	20 e0       	ldi	r18, 0x00	; 0
    4476:	30 e0       	ldi	r19, 0x00	; 0
    4478:	40 e2       	ldi	r20, 0x20	; 32
    447a:	51 e4       	ldi	r21, 0x41	; 65
    447c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4480:	dc 01       	movw	r26, r24
    4482:	cb 01       	movw	r24, r22
    4484:	bc 01       	movw	r22, r24
    4486:	cd 01       	movw	r24, r26
    4488:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    448c:	dc 01       	movw	r26, r24
    448e:	cb 01       	movw	r24, r22
    4490:	9f 83       	std	Y+7, r25	; 0x07
    4492:	8e 83       	std	Y+6, r24	; 0x06
    4494:	0f c0       	rjmp	.+30     	; 0x44b4 <LCDBusyLoop+0xea4>
    4496:	88 ec       	ldi	r24, 0xC8	; 200
    4498:	90 e0       	ldi	r25, 0x00	; 0
    449a:	9d 83       	std	Y+5, r25	; 0x05
    449c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    449e:	8c 81       	ldd	r24, Y+4	; 0x04
    44a0:	9d 81       	ldd	r25, Y+5	; 0x05
    44a2:	01 97       	sbiw	r24, 0x01	; 1
    44a4:	f1 f7       	brne	.-4      	; 0x44a2 <LCDBusyLoop+0xe92>
    44a6:	9d 83       	std	Y+5, r25	; 0x05
    44a8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44aa:	8e 81       	ldd	r24, Y+6	; 0x06
    44ac:	9f 81       	ldd	r25, Y+7	; 0x07
    44ae:	01 97       	sbiw	r24, 0x01	; 1
    44b0:	9f 83       	std	Y+7, r25	; 0x07
    44b2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44b4:	8e 81       	ldd	r24, Y+6	; 0x06
    44b6:	9f 81       	ldd	r25, Y+7	; 0x07
    44b8:	00 97       	sbiw	r24, 0x00	; 0
    44ba:	69 f7       	brne	.-38     	; 0x4496 <LCDBusyLoop+0xe86>
    44bc:	24 c0       	rjmp	.+72     	; 0x4506 <LCDBusyLoop+0xef6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44be:	68 85       	ldd	r22, Y+8	; 0x08
    44c0:	79 85       	ldd	r23, Y+9	; 0x09
    44c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    44c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    44c6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    44ca:	dc 01       	movw	r26, r24
    44cc:	cb 01       	movw	r24, r22
    44ce:	9f 83       	std	Y+7, r25	; 0x07
    44d0:	8e 83       	std	Y+6, r24	; 0x06
    44d2:	8e 81       	ldd	r24, Y+6	; 0x06
    44d4:	9f 81       	ldd	r25, Y+7	; 0x07
    44d6:	9b 83       	std	Y+3, r25	; 0x03
    44d8:	8a 83       	std	Y+2, r24	; 0x02
    44da:	8a 81       	ldd	r24, Y+2	; 0x02
    44dc:	9b 81       	ldd	r25, Y+3	; 0x03
    44de:	01 97       	sbiw	r24, 0x01	; 1
    44e0:	f1 f7       	brne	.-4      	; 0x44de <LCDBusyLoop+0xece>
    44e2:	9b 83       	std	Y+3, r25	; 0x03
    44e4:	8a 83       	std	Y+2, r24	; 0x02
    44e6:	0f c0       	rjmp	.+30     	; 0x4506 <LCDBusyLoop+0xef6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    44e8:	69 89       	ldd	r22, Y+17	; 0x11
    44ea:	7a 89       	ldd	r23, Y+18	; 0x12
    44ec:	8b 89       	ldd	r24, Y+19	; 0x13
    44ee:	9c 89       	ldd	r25, Y+20	; 0x14
    44f0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    44f4:	dc 01       	movw	r26, r24
    44f6:	cb 01       	movw	r24, r22
    44f8:	88 8b       	std	Y+16, r24	; 0x10
    44fa:	88 89       	ldd	r24, Y+16	; 0x10
    44fc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    44fe:	89 81       	ldd	r24, Y+1	; 0x01
    4500:	8a 95       	dec	r24
    4502:	f1 f7       	brne	.-4      	; 0x4500 <LCDBusyLoop+0xef0>
    4504:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);	//tEL
	}while(busy);
    4506:	fe 01       	movw	r30, r28
    4508:	e5 55       	subi	r30, 0x55	; 85
    450a:	ff 4f       	sbci	r31, 0xFF	; 255
    450c:	80 81       	ld	r24, Z
    450e:	88 23       	and	r24, r24
    4510:	09 f0       	breq	.+2      	; 0x4514 <LCDBusyLoop+0xf04>
    4512:	cd c9       	rjmp	.-3174   	; 0x38ae <LCDBusyLoop+0x29e>

	CLEAR_RW();		//write mode
    4514:	ab e3       	ldi	r26, 0x3B	; 59
    4516:	b0 e0       	ldi	r27, 0x00	; 0
    4518:	eb e3       	ldi	r30, 0x3B	; 59
    451a:	f0 e0       	ldi	r31, 0x00	; 0
    451c:	80 81       	ld	r24, Z
    451e:	8d 7f       	andi	r24, 0xFD	; 253
    4520:	8c 93       	st	X, r24
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
    4522:	aa e3       	ldi	r26, 0x3A	; 58
    4524:	b0 e0       	ldi	r27, 0x00	; 0
    4526:	ea e3       	ldi	r30, 0x3A	; 58
    4528:	f0 e0       	ldi	r31, 0x00	; 0
    452a:	80 81       	ld	r24, Z
    452c:	80 6f       	ori	r24, 0xF0	; 240
    452e:	8c 93       	st	X, r24

}
    4530:	c5 55       	subi	r28, 0x55	; 85
    4532:	df 4f       	sbci	r29, 0xFF	; 255
    4534:	0f b6       	in	r0, 0x3f	; 63
    4536:	f8 94       	cli
    4538:	de bf       	out	0x3e, r29	; 62
    453a:	0f be       	out	0x3f, r0	; 63
    453c:	cd bf       	out	0x3d, r28	; 61
    453e:	cf 91       	pop	r28
    4540:	df 91       	pop	r29
    4542:	1f 91       	pop	r17
    4544:	0f 91       	pop	r16
    4546:	08 95       	ret

00004548 <LCDInit>:

void LCDInit(uint8_t style)
{
    4548:	0f 93       	push	r16
    454a:	1f 93       	push	r17
    454c:	df 93       	push	r29
    454e:	cf 93       	push	r28
    4550:	cd b7       	in	r28, 0x3d	; 61
    4552:	de b7       	in	r29, 0x3e	; 62
    4554:	c7 55       	subi	r28, 0x57	; 87
    4556:	d0 40       	sbci	r29, 0x00	; 0
    4558:	0f b6       	in	r0, 0x3f	; 63
    455a:	f8 94       	cli
    455c:	de bf       	out	0x3e, r29	; 62
    455e:	0f be       	out	0x3f, r0	; 63
    4560:	cd bf       	out	0x3d, r28	; 61
    4562:	fe 01       	movw	r30, r28
    4564:	e9 5a       	subi	r30, 0xA9	; 169
    4566:	ff 4f       	sbci	r31, 0xFF	; 255
    4568:	80 83       	st	Z, r24
    456a:	fe 01       	movw	r30, r28
    456c:	ed 5a       	subi	r30, 0xAD	; 173
    456e:	ff 4f       	sbci	r31, 0xFF	; 255
    4570:	80 e0       	ldi	r24, 0x00	; 0
    4572:	90 e0       	ldi	r25, 0x00	; 0
    4574:	a0 ef       	ldi	r26, 0xF0	; 240
    4576:	b1 e4       	ldi	r27, 0x41	; 65
    4578:	80 83       	st	Z, r24
    457a:	91 83       	std	Z+1, r25	; 0x01
    457c:	a2 83       	std	Z+2, r26	; 0x02
    457e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4580:	8e 01       	movw	r16, r28
    4582:	01 5b       	subi	r16, 0xB1	; 177
    4584:	1f 4f       	sbci	r17, 0xFF	; 255
    4586:	fe 01       	movw	r30, r28
    4588:	ed 5a       	subi	r30, 0xAD	; 173
    458a:	ff 4f       	sbci	r31, 0xFF	; 255
    458c:	60 81       	ld	r22, Z
    458e:	71 81       	ldd	r23, Z+1	; 0x01
    4590:	82 81       	ldd	r24, Z+2	; 0x02
    4592:	93 81       	ldd	r25, Z+3	; 0x03
    4594:	20 e0       	ldi	r18, 0x00	; 0
    4596:	30 e0       	ldi	r19, 0x00	; 0
    4598:	4a ef       	ldi	r20, 0xFA	; 250
    459a:	54 e4       	ldi	r21, 0x44	; 68
    459c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    45a0:	dc 01       	movw	r26, r24
    45a2:	cb 01       	movw	r24, r22
    45a4:	f8 01       	movw	r30, r16
    45a6:	80 83       	st	Z, r24
    45a8:	91 83       	std	Z+1, r25	; 0x01
    45aa:	a2 83       	std	Z+2, r26	; 0x02
    45ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45ae:	fe 01       	movw	r30, r28
    45b0:	e1 5b       	subi	r30, 0xB1	; 177
    45b2:	ff 4f       	sbci	r31, 0xFF	; 255
    45b4:	60 81       	ld	r22, Z
    45b6:	71 81       	ldd	r23, Z+1	; 0x01
    45b8:	82 81       	ldd	r24, Z+2	; 0x02
    45ba:	93 81       	ldd	r25, Z+3	; 0x03
    45bc:	20 e0       	ldi	r18, 0x00	; 0
    45be:	30 e0       	ldi	r19, 0x00	; 0
    45c0:	40 e8       	ldi	r20, 0x80	; 128
    45c2:	5f e3       	ldi	r21, 0x3F	; 63
    45c4:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    45c8:	88 23       	and	r24, r24
    45ca:	44 f4       	brge	.+16     	; 0x45dc <LCDInit+0x94>
		__ticks = 1;
    45cc:	fe 01       	movw	r30, r28
    45ce:	e3 5b       	subi	r30, 0xB3	; 179
    45d0:	ff 4f       	sbci	r31, 0xFF	; 255
    45d2:	81 e0       	ldi	r24, 0x01	; 1
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	91 83       	std	Z+1, r25	; 0x01
    45d8:	80 83       	st	Z, r24
    45da:	64 c0       	rjmp	.+200    	; 0x46a4 <LCDInit+0x15c>
	else if (__tmp > 65535)
    45dc:	fe 01       	movw	r30, r28
    45de:	e1 5b       	subi	r30, 0xB1	; 177
    45e0:	ff 4f       	sbci	r31, 0xFF	; 255
    45e2:	60 81       	ld	r22, Z
    45e4:	71 81       	ldd	r23, Z+1	; 0x01
    45e6:	82 81       	ldd	r24, Z+2	; 0x02
    45e8:	93 81       	ldd	r25, Z+3	; 0x03
    45ea:	20 e0       	ldi	r18, 0x00	; 0
    45ec:	3f ef       	ldi	r19, 0xFF	; 255
    45ee:	4f e7       	ldi	r20, 0x7F	; 127
    45f0:	57 e4       	ldi	r21, 0x47	; 71
    45f2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    45f6:	18 16       	cp	r1, r24
    45f8:	0c f0       	brlt	.+2      	; 0x45fc <LCDInit+0xb4>
    45fa:	43 c0       	rjmp	.+134    	; 0x4682 <LCDInit+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45fc:	fe 01       	movw	r30, r28
    45fe:	ed 5a       	subi	r30, 0xAD	; 173
    4600:	ff 4f       	sbci	r31, 0xFF	; 255
    4602:	60 81       	ld	r22, Z
    4604:	71 81       	ldd	r23, Z+1	; 0x01
    4606:	82 81       	ldd	r24, Z+2	; 0x02
    4608:	93 81       	ldd	r25, Z+3	; 0x03
    460a:	20 e0       	ldi	r18, 0x00	; 0
    460c:	30 e0       	ldi	r19, 0x00	; 0
    460e:	40 e2       	ldi	r20, 0x20	; 32
    4610:	51 e4       	ldi	r21, 0x41	; 65
    4612:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4616:	dc 01       	movw	r26, r24
    4618:	cb 01       	movw	r24, r22
    461a:	8e 01       	movw	r16, r28
    461c:	03 5b       	subi	r16, 0xB3	; 179
    461e:	1f 4f       	sbci	r17, 0xFF	; 255
    4620:	bc 01       	movw	r22, r24
    4622:	cd 01       	movw	r24, r26
    4624:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4628:	dc 01       	movw	r26, r24
    462a:	cb 01       	movw	r24, r22
    462c:	f8 01       	movw	r30, r16
    462e:	91 83       	std	Z+1, r25	; 0x01
    4630:	80 83       	st	Z, r24
    4632:	1f c0       	rjmp	.+62     	; 0x4672 <LCDInit+0x12a>
    4634:	fe 01       	movw	r30, r28
    4636:	e5 5b       	subi	r30, 0xB5	; 181
    4638:	ff 4f       	sbci	r31, 0xFF	; 255
    463a:	88 ec       	ldi	r24, 0xC8	; 200
    463c:	90 e0       	ldi	r25, 0x00	; 0
    463e:	91 83       	std	Z+1, r25	; 0x01
    4640:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4642:	fe 01       	movw	r30, r28
    4644:	e5 5b       	subi	r30, 0xB5	; 181
    4646:	ff 4f       	sbci	r31, 0xFF	; 255
    4648:	80 81       	ld	r24, Z
    464a:	91 81       	ldd	r25, Z+1	; 0x01
    464c:	01 97       	sbiw	r24, 0x01	; 1
    464e:	f1 f7       	brne	.-4      	; 0x464c <LCDInit+0x104>
    4650:	fe 01       	movw	r30, r28
    4652:	e5 5b       	subi	r30, 0xB5	; 181
    4654:	ff 4f       	sbci	r31, 0xFF	; 255
    4656:	91 83       	std	Z+1, r25	; 0x01
    4658:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    465a:	de 01       	movw	r26, r28
    465c:	a3 5b       	subi	r26, 0xB3	; 179
    465e:	bf 4f       	sbci	r27, 0xFF	; 255
    4660:	fe 01       	movw	r30, r28
    4662:	e3 5b       	subi	r30, 0xB3	; 179
    4664:	ff 4f       	sbci	r31, 0xFF	; 255
    4666:	80 81       	ld	r24, Z
    4668:	91 81       	ldd	r25, Z+1	; 0x01
    466a:	01 97       	sbiw	r24, 0x01	; 1
    466c:	11 96       	adiw	r26, 0x01	; 1
    466e:	9c 93       	st	X, r25
    4670:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4672:	fe 01       	movw	r30, r28
    4674:	e3 5b       	subi	r30, 0xB3	; 179
    4676:	ff 4f       	sbci	r31, 0xFF	; 255
    4678:	80 81       	ld	r24, Z
    467a:	91 81       	ldd	r25, Z+1	; 0x01
    467c:	00 97       	sbiw	r24, 0x00	; 0
    467e:	d1 f6       	brne	.-76     	; 0x4634 <LCDInit+0xec>
    4680:	27 c0       	rjmp	.+78     	; 0x46d0 <LCDInit+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4682:	8e 01       	movw	r16, r28
    4684:	03 5b       	subi	r16, 0xB3	; 179
    4686:	1f 4f       	sbci	r17, 0xFF	; 255
    4688:	fe 01       	movw	r30, r28
    468a:	e1 5b       	subi	r30, 0xB1	; 177
    468c:	ff 4f       	sbci	r31, 0xFF	; 255
    468e:	60 81       	ld	r22, Z
    4690:	71 81       	ldd	r23, Z+1	; 0x01
    4692:	82 81       	ldd	r24, Z+2	; 0x02
    4694:	93 81       	ldd	r25, Z+3	; 0x03
    4696:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    469a:	dc 01       	movw	r26, r24
    469c:	cb 01       	movw	r24, r22
    469e:	f8 01       	movw	r30, r16
    46a0:	91 83       	std	Z+1, r25	; 0x01
    46a2:	80 83       	st	Z, r24
    46a4:	de 01       	movw	r26, r28
    46a6:	a7 5b       	subi	r26, 0xB7	; 183
    46a8:	bf 4f       	sbci	r27, 0xFF	; 255
    46aa:	fe 01       	movw	r30, r28
    46ac:	e3 5b       	subi	r30, 0xB3	; 179
    46ae:	ff 4f       	sbci	r31, 0xFF	; 255
    46b0:	80 81       	ld	r24, Z
    46b2:	91 81       	ldd	r25, Z+1	; 0x01
    46b4:	8d 93       	st	X+, r24
    46b6:	9c 93       	st	X, r25
    46b8:	fe 01       	movw	r30, r28
    46ba:	e7 5b       	subi	r30, 0xB7	; 183
    46bc:	ff 4f       	sbci	r31, 0xFF	; 255
    46be:	80 81       	ld	r24, Z
    46c0:	91 81       	ldd	r25, Z+1	; 0x01
    46c2:	01 97       	sbiw	r24, 0x01	; 1
    46c4:	f1 f7       	brne	.-4      	; 0x46c2 <LCDInit+0x17a>
    46c6:	fe 01       	movw	r30, r28
    46c8:	e7 5b       	subi	r30, 0xB7	; 183
    46ca:	ff 4f       	sbci	r31, 0xFF	; 255
    46cc:	91 83       	std	Z+1, r25	; 0x01
    46ce:	80 83       	st	Z, r24

	//After power on Wait for LCD to Initialize
	_delay_ms(30);

	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
    46d0:	aa e3       	ldi	r26, 0x3A	; 58
    46d2:	b0 e0       	ldi	r27, 0x00	; 0
    46d4:	ea e3       	ldi	r30, 0x3A	; 58
    46d6:	f0 e0       	ldi	r31, 0x00	; 0
    46d8:	80 81       	ld	r24, Z
    46da:	80 6f       	ori	r24, 0xF0	; 240
    46dc:	8c 93       	st	X, r24
	LCD_E_DDR|=(1<<LCD_E_POS);
    46de:	aa e3       	ldi	r26, 0x3A	; 58
    46e0:	b0 e0       	ldi	r27, 0x00	; 0
    46e2:	ea e3       	ldi	r30, 0x3A	; 58
    46e4:	f0 e0       	ldi	r31, 0x00	; 0
    46e6:	80 81       	ld	r24, Z
    46e8:	84 60       	ori	r24, 0x04	; 4
    46ea:	8c 93       	st	X, r24
	LCD_RS_DDR|=(1<<LCD_RS_POS);
    46ec:	aa e3       	ldi	r26, 0x3A	; 58
    46ee:	b0 e0       	ldi	r27, 0x00	; 0
    46f0:	ea e3       	ldi	r30, 0x3A	; 58
    46f2:	f0 e0       	ldi	r31, 0x00	; 0
    46f4:	80 81       	ld	r24, Z
    46f6:	81 60       	ori	r24, 0x01	; 1
    46f8:	8c 93       	st	X, r24
	LCD_RW_DDR|=(1<<LCD_RW_POS);
    46fa:	aa e3       	ldi	r26, 0x3A	; 58
    46fc:	b0 e0       	ldi	r27, 0x00	; 0
    46fe:	ea e3       	ldi	r30, 0x3A	; 58
    4700:	f0 e0       	ldi	r31, 0x00	; 0
    4702:	80 81       	ld	r24, Z
    4704:	82 60       	ori	r24, 0x02	; 2
    4706:	8c 93       	st	X, r24

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
    4708:	ab e3       	ldi	r26, 0x3B	; 59
    470a:	b0 e0       	ldi	r27, 0x00	; 0
    470c:	eb e3       	ldi	r30, 0x3B	; 59
    470e:	f0 e0       	ldi	r31, 0x00	; 0
    4710:	80 81       	ld	r24, Z
    4712:	8f 70       	andi	r24, 0x0F	; 15
    4714:	8c 93       	st	X, r24
	CLEAR_E();
    4716:	ab e3       	ldi	r26, 0x3B	; 59
    4718:	b0 e0       	ldi	r27, 0x00	; 0
    471a:	eb e3       	ldi	r30, 0x3B	; 59
    471c:	f0 e0       	ldi	r31, 0x00	; 0
    471e:	80 81       	ld	r24, Z
    4720:	8b 7f       	andi	r24, 0xFB	; 251
    4722:	8c 93       	st	X, r24
	CLEAR_RW();
    4724:	ab e3       	ldi	r26, 0x3B	; 59
    4726:	b0 e0       	ldi	r27, 0x00	; 0
    4728:	eb e3       	ldi	r30, 0x3B	; 59
    472a:	f0 e0       	ldi	r31, 0x00	; 0
    472c:	80 81       	ld	r24, Z
    472e:	8d 7f       	andi	r24, 0xFD	; 253
    4730:	8c 93       	st	X, r24
	CLEAR_RS();
    4732:	ab e3       	ldi	r26, 0x3B	; 59
    4734:	b0 e0       	ldi	r27, 0x00	; 0
    4736:	eb e3       	ldi	r30, 0x3B	; 59
    4738:	f0 e0       	ldi	r31, 0x00	; 0
    473a:	80 81       	ld	r24, Z
    473c:	8e 7f       	andi	r24, 0xFE	; 254
    473e:	8c 93       	st	X, r24
    4740:	fe 01       	movw	r30, r28
    4742:	eb 5b       	subi	r30, 0xBB	; 187
    4744:	ff 4f       	sbci	r31, 0xFF	; 255
    4746:	8a e9       	ldi	r24, 0x9A	; 154
    4748:	99 e9       	ldi	r25, 0x99	; 153
    474a:	a9 e9       	ldi	r26, 0x99	; 153
    474c:	be e3       	ldi	r27, 0x3E	; 62
    474e:	80 83       	st	Z, r24
    4750:	91 83       	std	Z+1, r25	; 0x01
    4752:	a2 83       	std	Z+2, r26	; 0x02
    4754:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4756:	8e 01       	movw	r16, r28
    4758:	0f 5b       	subi	r16, 0xBF	; 191
    475a:	1f 4f       	sbci	r17, 0xFF	; 255
    475c:	fe 01       	movw	r30, r28
    475e:	eb 5b       	subi	r30, 0xBB	; 187
    4760:	ff 4f       	sbci	r31, 0xFF	; 255
    4762:	60 81       	ld	r22, Z
    4764:	71 81       	ldd	r23, Z+1	; 0x01
    4766:	82 81       	ldd	r24, Z+2	; 0x02
    4768:	93 81       	ldd	r25, Z+3	; 0x03
    476a:	2b ea       	ldi	r18, 0xAB	; 171
    476c:	3a ea       	ldi	r19, 0xAA	; 170
    476e:	4a e2       	ldi	r20, 0x2A	; 42
    4770:	50 e4       	ldi	r21, 0x40	; 64
    4772:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4776:	dc 01       	movw	r26, r24
    4778:	cb 01       	movw	r24, r22
    477a:	f8 01       	movw	r30, r16
    477c:	80 83       	st	Z, r24
    477e:	91 83       	std	Z+1, r25	; 0x01
    4780:	a2 83       	std	Z+2, r26	; 0x02
    4782:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4784:	fe 01       	movw	r30, r28
    4786:	ef 5b       	subi	r30, 0xBF	; 191
    4788:	ff 4f       	sbci	r31, 0xFF	; 255
    478a:	60 81       	ld	r22, Z
    478c:	71 81       	ldd	r23, Z+1	; 0x01
    478e:	82 81       	ldd	r24, Z+2	; 0x02
    4790:	93 81       	ldd	r25, Z+3	; 0x03
    4792:	20 e0       	ldi	r18, 0x00	; 0
    4794:	30 e0       	ldi	r19, 0x00	; 0
    4796:	40 e8       	ldi	r20, 0x80	; 128
    4798:	5f e3       	ldi	r21, 0x3F	; 63
    479a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    479e:	88 23       	and	r24, r24
    47a0:	34 f4       	brge	.+12     	; 0x47ae <LCDInit+0x266>
		__ticks = 1;
    47a2:	81 e0       	ldi	r24, 0x01	; 1
    47a4:	fe 01       	movw	r30, r28
    47a6:	e0 5c       	subi	r30, 0xC0	; 192
    47a8:	ff 4f       	sbci	r31, 0xFF	; 255
    47aa:	80 83       	st	Z, r24
    47ac:	9d c0       	rjmp	.+314    	; 0x48e8 <LCDInit+0x3a0>
	else if (__tmp > 255)
    47ae:	fe 01       	movw	r30, r28
    47b0:	ef 5b       	subi	r30, 0xBF	; 191
    47b2:	ff 4f       	sbci	r31, 0xFF	; 255
    47b4:	60 81       	ld	r22, Z
    47b6:	71 81       	ldd	r23, Z+1	; 0x01
    47b8:	82 81       	ldd	r24, Z+2	; 0x02
    47ba:	93 81       	ldd	r25, Z+3	; 0x03
    47bc:	20 e0       	ldi	r18, 0x00	; 0
    47be:	30 e0       	ldi	r19, 0x00	; 0
    47c0:	4f e7       	ldi	r20, 0x7F	; 127
    47c2:	53 e4       	ldi	r21, 0x43	; 67
    47c4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    47c8:	18 16       	cp	r1, r24
    47ca:	0c f0       	brlt	.+2      	; 0x47ce <LCDInit+0x286>
    47cc:	7e c0       	rjmp	.+252    	; 0x48ca <LCDInit+0x382>
	{
		_delay_ms(__us / 1000.0);
    47ce:	fe 01       	movw	r30, r28
    47d0:	eb 5b       	subi	r30, 0xBB	; 187
    47d2:	ff 4f       	sbci	r31, 0xFF	; 255
    47d4:	60 81       	ld	r22, Z
    47d6:	71 81       	ldd	r23, Z+1	; 0x01
    47d8:	82 81       	ldd	r24, Z+2	; 0x02
    47da:	93 81       	ldd	r25, Z+3	; 0x03
    47dc:	20 e0       	ldi	r18, 0x00	; 0
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	4a e7       	ldi	r20, 0x7A	; 122
    47e2:	54 e4       	ldi	r21, 0x44	; 68
    47e4:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    47e8:	dc 01       	movw	r26, r24
    47ea:	cb 01       	movw	r24, r22
    47ec:	8c af       	std	Y+60, r24	; 0x3c
    47ee:	9d af       	std	Y+61, r25	; 0x3d
    47f0:	ae af       	std	Y+62, r26	; 0x3e
    47f2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47f4:	6c ad       	ldd	r22, Y+60	; 0x3c
    47f6:	7d ad       	ldd	r23, Y+61	; 0x3d
    47f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    47fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    47fc:	20 e0       	ldi	r18, 0x00	; 0
    47fe:	30 e0       	ldi	r19, 0x00	; 0
    4800:	4a ef       	ldi	r20, 0xFA	; 250
    4802:	54 e4       	ldi	r21, 0x44	; 68
    4804:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4808:	dc 01       	movw	r26, r24
    480a:	cb 01       	movw	r24, r22
    480c:	88 af       	std	Y+56, r24	; 0x38
    480e:	99 af       	std	Y+57, r25	; 0x39
    4810:	aa af       	std	Y+58, r26	; 0x3a
    4812:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    4814:	68 ad       	ldd	r22, Y+56	; 0x38
    4816:	79 ad       	ldd	r23, Y+57	; 0x39
    4818:	8a ad       	ldd	r24, Y+58	; 0x3a
    481a:	9b ad       	ldd	r25, Y+59	; 0x3b
    481c:	20 e0       	ldi	r18, 0x00	; 0
    481e:	30 e0       	ldi	r19, 0x00	; 0
    4820:	40 e8       	ldi	r20, 0x80	; 128
    4822:	5f e3       	ldi	r21, 0x3F	; 63
    4824:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4828:	88 23       	and	r24, r24
    482a:	2c f4       	brge	.+10     	; 0x4836 <LCDInit+0x2ee>
		__ticks = 1;
    482c:	81 e0       	ldi	r24, 0x01	; 1
    482e:	90 e0       	ldi	r25, 0x00	; 0
    4830:	9f ab       	std	Y+55, r25	; 0x37
    4832:	8e ab       	std	Y+54, r24	; 0x36
    4834:	3f c0       	rjmp	.+126    	; 0x48b4 <LCDInit+0x36c>
	else if (__tmp > 65535)
    4836:	68 ad       	ldd	r22, Y+56	; 0x38
    4838:	79 ad       	ldd	r23, Y+57	; 0x39
    483a:	8a ad       	ldd	r24, Y+58	; 0x3a
    483c:	9b ad       	ldd	r25, Y+59	; 0x3b
    483e:	20 e0       	ldi	r18, 0x00	; 0
    4840:	3f ef       	ldi	r19, 0xFF	; 255
    4842:	4f e7       	ldi	r20, 0x7F	; 127
    4844:	57 e4       	ldi	r21, 0x47	; 71
    4846:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    484a:	18 16       	cp	r1, r24
    484c:	4c f5       	brge	.+82     	; 0x48a0 <LCDInit+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    484e:	6c ad       	ldd	r22, Y+60	; 0x3c
    4850:	7d ad       	ldd	r23, Y+61	; 0x3d
    4852:	8e ad       	ldd	r24, Y+62	; 0x3e
    4854:	9f ad       	ldd	r25, Y+63	; 0x3f
    4856:	20 e0       	ldi	r18, 0x00	; 0
    4858:	30 e0       	ldi	r19, 0x00	; 0
    485a:	40 e2       	ldi	r20, 0x20	; 32
    485c:	51 e4       	ldi	r21, 0x41	; 65
    485e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4862:	dc 01       	movw	r26, r24
    4864:	cb 01       	movw	r24, r22
    4866:	bc 01       	movw	r22, r24
    4868:	cd 01       	movw	r24, r26
    486a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    486e:	dc 01       	movw	r26, r24
    4870:	cb 01       	movw	r24, r22
    4872:	9f ab       	std	Y+55, r25	; 0x37
    4874:	8e ab       	std	Y+54, r24	; 0x36
    4876:	0f c0       	rjmp	.+30     	; 0x4896 <LCDInit+0x34e>
    4878:	88 ec       	ldi	r24, 0xC8	; 200
    487a:	90 e0       	ldi	r25, 0x00	; 0
    487c:	9d ab       	std	Y+53, r25	; 0x35
    487e:	8c ab       	std	Y+52, r24	; 0x34
    4880:	8c a9       	ldd	r24, Y+52	; 0x34
    4882:	9d a9       	ldd	r25, Y+53	; 0x35
    4884:	01 97       	sbiw	r24, 0x01	; 1
    4886:	f1 f7       	brne	.-4      	; 0x4884 <LCDInit+0x33c>
    4888:	9d ab       	std	Y+53, r25	; 0x35
    488a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    488c:	8e a9       	ldd	r24, Y+54	; 0x36
    488e:	9f a9       	ldd	r25, Y+55	; 0x37
    4890:	01 97       	sbiw	r24, 0x01	; 1
    4892:	9f ab       	std	Y+55, r25	; 0x37
    4894:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4896:	8e a9       	ldd	r24, Y+54	; 0x36
    4898:	9f a9       	ldd	r25, Y+55	; 0x37
    489a:	00 97       	sbiw	r24, 0x00	; 0
    489c:	69 f7       	brne	.-38     	; 0x4878 <LCDInit+0x330>
    489e:	2d c0       	rjmp	.+90     	; 0x48fa <LCDInit+0x3b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48a0:	68 ad       	ldd	r22, Y+56	; 0x38
    48a2:	79 ad       	ldd	r23, Y+57	; 0x39
    48a4:	8a ad       	ldd	r24, Y+58	; 0x3a
    48a6:	9b ad       	ldd	r25, Y+59	; 0x3b
    48a8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    48ac:	dc 01       	movw	r26, r24
    48ae:	cb 01       	movw	r24, r22
    48b0:	9f ab       	std	Y+55, r25	; 0x37
    48b2:	8e ab       	std	Y+54, r24	; 0x36
    48b4:	8e a9       	ldd	r24, Y+54	; 0x36
    48b6:	9f a9       	ldd	r25, Y+55	; 0x37
    48b8:	9b ab       	std	Y+51, r25	; 0x33
    48ba:	8a ab       	std	Y+50, r24	; 0x32
    48bc:	8a a9       	ldd	r24, Y+50	; 0x32
    48be:	9b a9       	ldd	r25, Y+51	; 0x33
    48c0:	01 97       	sbiw	r24, 0x01	; 1
    48c2:	f1 f7       	brne	.-4      	; 0x48c0 <LCDInit+0x378>
    48c4:	9b ab       	std	Y+51, r25	; 0x33
    48c6:	8a ab       	std	Y+50, r24	; 0x32
    48c8:	18 c0       	rjmp	.+48     	; 0x48fa <LCDInit+0x3b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    48ca:	fe 01       	movw	r30, r28
    48cc:	ef 5b       	subi	r30, 0xBF	; 191
    48ce:	ff 4f       	sbci	r31, 0xFF	; 255
    48d0:	60 81       	ld	r22, Z
    48d2:	71 81       	ldd	r23, Z+1	; 0x01
    48d4:	82 81       	ldd	r24, Z+2	; 0x02
    48d6:	93 81       	ldd	r25, Z+3	; 0x03
    48d8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    48dc:	dc 01       	movw	r26, r24
    48de:	cb 01       	movw	r24, r22
    48e0:	fe 01       	movw	r30, r28
    48e2:	e0 5c       	subi	r30, 0xC0	; 192
    48e4:	ff 4f       	sbci	r31, 0xFF	; 255
    48e6:	80 83       	st	Z, r24
    48e8:	fe 01       	movw	r30, r28
    48ea:	e0 5c       	subi	r30, 0xC0	; 192
    48ec:	ff 4f       	sbci	r31, 0xFF	; 255
    48ee:	80 81       	ld	r24, Z
    48f0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    48f2:	89 a9       	ldd	r24, Y+49	; 0x31
    48f4:	8a 95       	dec	r24
    48f6:	f1 f7       	brne	.-4      	; 0x48f4 <LCDInit+0x3ac>
    48f8:	89 ab       	std	Y+49, r24	; 0x31

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
    48fa:	ab e3       	ldi	r26, 0x3B	; 59
    48fc:	b0 e0       	ldi	r27, 0x00	; 0
    48fe:	eb e3       	ldi	r30, 0x3B	; 59
    4900:	f0 e0       	ldi	r31, 0x00	; 0
    4902:	80 81       	ld	r24, Z
    4904:	84 60       	ori	r24, 0x04	; 4
    4906:	8c 93       	st	X, r24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
    4908:	ab e3       	ldi	r26, 0x3B	; 59
    490a:	b0 e0       	ldi	r27, 0x00	; 0
    490c:	eb e3       	ldi	r30, 0x3B	; 59
    490e:	f0 e0       	ldi	r31, 0x00	; 0
    4910:	80 81       	ld	r24, Z
    4912:	80 62       	ori	r24, 0x20	; 32
    4914:	8c 93       	st	X, r24
    4916:	80 e0       	ldi	r24, 0x00	; 0
    4918:	90 e0       	ldi	r25, 0x00	; 0
    491a:	a0 e8       	ldi	r26, 0x80	; 128
    491c:	bf e3       	ldi	r27, 0x3F	; 63
    491e:	8d a7       	std	Y+45, r24	; 0x2d
    4920:	9e a7       	std	Y+46, r25	; 0x2e
    4922:	af a7       	std	Y+47, r26	; 0x2f
    4924:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4926:	6d a5       	ldd	r22, Y+45	; 0x2d
    4928:	7e a5       	ldd	r23, Y+46	; 0x2e
    492a:	8f a5       	ldd	r24, Y+47	; 0x2f
    492c:	98 a9       	ldd	r25, Y+48	; 0x30
    492e:	2b ea       	ldi	r18, 0xAB	; 171
    4930:	3a ea       	ldi	r19, 0xAA	; 170
    4932:	4a e2       	ldi	r20, 0x2A	; 42
    4934:	50 e4       	ldi	r21, 0x40	; 64
    4936:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    493a:	dc 01       	movw	r26, r24
    493c:	cb 01       	movw	r24, r22
    493e:	89 a7       	std	Y+41, r24	; 0x29
    4940:	9a a7       	std	Y+42, r25	; 0x2a
    4942:	ab a7       	std	Y+43, r26	; 0x2b
    4944:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4946:	69 a5       	ldd	r22, Y+41	; 0x29
    4948:	7a a5       	ldd	r23, Y+42	; 0x2a
    494a:	8b a5       	ldd	r24, Y+43	; 0x2b
    494c:	9c a5       	ldd	r25, Y+44	; 0x2c
    494e:	20 e0       	ldi	r18, 0x00	; 0
    4950:	30 e0       	ldi	r19, 0x00	; 0
    4952:	40 e8       	ldi	r20, 0x80	; 128
    4954:	5f e3       	ldi	r21, 0x3F	; 63
    4956:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    495a:	88 23       	and	r24, r24
    495c:	1c f4       	brge	.+6      	; 0x4964 <LCDInit+0x41c>
		__ticks = 1;
    495e:	81 e0       	ldi	r24, 0x01	; 1
    4960:	88 a7       	std	Y+40, r24	; 0x28
    4962:	91 c0       	rjmp	.+290    	; 0x4a86 <LCDInit+0x53e>
	else if (__tmp > 255)
    4964:	69 a5       	ldd	r22, Y+41	; 0x29
    4966:	7a a5       	ldd	r23, Y+42	; 0x2a
    4968:	8b a5       	ldd	r24, Y+43	; 0x2b
    496a:	9c a5       	ldd	r25, Y+44	; 0x2c
    496c:	20 e0       	ldi	r18, 0x00	; 0
    496e:	30 e0       	ldi	r19, 0x00	; 0
    4970:	4f e7       	ldi	r20, 0x7F	; 127
    4972:	53 e4       	ldi	r21, 0x43	; 67
    4974:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4978:	18 16       	cp	r1, r24
    497a:	0c f0       	brlt	.+2      	; 0x497e <LCDInit+0x436>
    497c:	7b c0       	rjmp	.+246    	; 0x4a74 <LCDInit+0x52c>
	{
		_delay_ms(__us / 1000.0);
    497e:	6d a5       	ldd	r22, Y+45	; 0x2d
    4980:	7e a5       	ldd	r23, Y+46	; 0x2e
    4982:	8f a5       	ldd	r24, Y+47	; 0x2f
    4984:	98 a9       	ldd	r25, Y+48	; 0x30
    4986:	20 e0       	ldi	r18, 0x00	; 0
    4988:	30 e0       	ldi	r19, 0x00	; 0
    498a:	4a e7       	ldi	r20, 0x7A	; 122
    498c:	54 e4       	ldi	r21, 0x44	; 68
    498e:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    4992:	dc 01       	movw	r26, r24
    4994:	cb 01       	movw	r24, r22
    4996:	8c a3       	std	Y+36, r24	; 0x24
    4998:	9d a3       	std	Y+37, r25	; 0x25
    499a:	ae a3       	std	Y+38, r26	; 0x26
    499c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    499e:	6c a1       	ldd	r22, Y+36	; 0x24
    49a0:	7d a1       	ldd	r23, Y+37	; 0x25
    49a2:	8e a1       	ldd	r24, Y+38	; 0x26
    49a4:	9f a1       	ldd	r25, Y+39	; 0x27
    49a6:	20 e0       	ldi	r18, 0x00	; 0
    49a8:	30 e0       	ldi	r19, 0x00	; 0
    49aa:	4a ef       	ldi	r20, 0xFA	; 250
    49ac:	54 e4       	ldi	r21, 0x44	; 68
    49ae:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    49b2:	dc 01       	movw	r26, r24
    49b4:	cb 01       	movw	r24, r22
    49b6:	88 a3       	std	Y+32, r24	; 0x20
    49b8:	99 a3       	std	Y+33, r25	; 0x21
    49ba:	aa a3       	std	Y+34, r26	; 0x22
    49bc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    49be:	68 a1       	ldd	r22, Y+32	; 0x20
    49c0:	79 a1       	ldd	r23, Y+33	; 0x21
    49c2:	8a a1       	ldd	r24, Y+34	; 0x22
    49c4:	9b a1       	ldd	r25, Y+35	; 0x23
    49c6:	20 e0       	ldi	r18, 0x00	; 0
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	40 e8       	ldi	r20, 0x80	; 128
    49cc:	5f e3       	ldi	r21, 0x3F	; 63
    49ce:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    49d2:	88 23       	and	r24, r24
    49d4:	2c f4       	brge	.+10     	; 0x49e0 <LCDInit+0x498>
		__ticks = 1;
    49d6:	81 e0       	ldi	r24, 0x01	; 1
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	9f 8f       	std	Y+31, r25	; 0x1f
    49dc:	8e 8f       	std	Y+30, r24	; 0x1e
    49de:	3f c0       	rjmp	.+126    	; 0x4a5e <LCDInit+0x516>
	else if (__tmp > 65535)
    49e0:	68 a1       	ldd	r22, Y+32	; 0x20
    49e2:	79 a1       	ldd	r23, Y+33	; 0x21
    49e4:	8a a1       	ldd	r24, Y+34	; 0x22
    49e6:	9b a1       	ldd	r25, Y+35	; 0x23
    49e8:	20 e0       	ldi	r18, 0x00	; 0
    49ea:	3f ef       	ldi	r19, 0xFF	; 255
    49ec:	4f e7       	ldi	r20, 0x7F	; 127
    49ee:	57 e4       	ldi	r21, 0x47	; 71
    49f0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    49f4:	18 16       	cp	r1, r24
    49f6:	4c f5       	brge	.+82     	; 0x4a4a <LCDInit+0x502>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49f8:	6c a1       	ldd	r22, Y+36	; 0x24
    49fa:	7d a1       	ldd	r23, Y+37	; 0x25
    49fc:	8e a1       	ldd	r24, Y+38	; 0x26
    49fe:	9f a1       	ldd	r25, Y+39	; 0x27
    4a00:	20 e0       	ldi	r18, 0x00	; 0
    4a02:	30 e0       	ldi	r19, 0x00	; 0
    4a04:	40 e2       	ldi	r20, 0x20	; 32
    4a06:	51 e4       	ldi	r21, 0x41	; 65
    4a08:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4a0c:	dc 01       	movw	r26, r24
    4a0e:	cb 01       	movw	r24, r22
    4a10:	bc 01       	movw	r22, r24
    4a12:	cd 01       	movw	r24, r26
    4a14:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4a18:	dc 01       	movw	r26, r24
    4a1a:	cb 01       	movw	r24, r22
    4a1c:	9f 8f       	std	Y+31, r25	; 0x1f
    4a1e:	8e 8f       	std	Y+30, r24	; 0x1e
    4a20:	0f c0       	rjmp	.+30     	; 0x4a40 <LCDInit+0x4f8>
    4a22:	88 ec       	ldi	r24, 0xC8	; 200
    4a24:	90 e0       	ldi	r25, 0x00	; 0
    4a26:	9d 8f       	std	Y+29, r25	; 0x1d
    4a28:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4a2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4a2c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4a2e:	01 97       	sbiw	r24, 0x01	; 1
    4a30:	f1 f7       	brne	.-4      	; 0x4a2e <LCDInit+0x4e6>
    4a32:	9d 8f       	std	Y+29, r25	; 0x1d
    4a34:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a36:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4a38:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4a3a:	01 97       	sbiw	r24, 0x01	; 1
    4a3c:	9f 8f       	std	Y+31, r25	; 0x1f
    4a3e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4a42:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4a44:	00 97       	sbiw	r24, 0x00	; 0
    4a46:	69 f7       	brne	.-38     	; 0x4a22 <LCDInit+0x4da>
    4a48:	24 c0       	rjmp	.+72     	; 0x4a92 <LCDInit+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a4a:	68 a1       	ldd	r22, Y+32	; 0x20
    4a4c:	79 a1       	ldd	r23, Y+33	; 0x21
    4a4e:	8a a1       	ldd	r24, Y+34	; 0x22
    4a50:	9b a1       	ldd	r25, Y+35	; 0x23
    4a52:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4a56:	dc 01       	movw	r26, r24
    4a58:	cb 01       	movw	r24, r22
    4a5a:	9f 8f       	std	Y+31, r25	; 0x1f
    4a5c:	8e 8f       	std	Y+30, r24	; 0x1e
    4a5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4a60:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4a62:	9b 8f       	std	Y+27, r25	; 0x1b
    4a64:	8a 8f       	std	Y+26, r24	; 0x1a
    4a66:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4a68:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4a6a:	01 97       	sbiw	r24, 0x01	; 1
    4a6c:	f1 f7       	brne	.-4      	; 0x4a6a <LCDInit+0x522>
    4a6e:	9b 8f       	std	Y+27, r25	; 0x1b
    4a70:	8a 8f       	std	Y+26, r24	; 0x1a
    4a72:	0f c0       	rjmp	.+30     	; 0x4a92 <LCDInit+0x54a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4a74:	69 a5       	ldd	r22, Y+41	; 0x29
    4a76:	7a a5       	ldd	r23, Y+42	; 0x2a
    4a78:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a7a:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a7c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4a80:	dc 01       	movw	r26, r24
    4a82:	cb 01       	movw	r24, r22
    4a84:	88 a7       	std	Y+40, r24	; 0x28
    4a86:	88 a5       	ldd	r24, Y+40	; 0x28
    4a88:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4a8a:	89 8d       	ldd	r24, Y+25	; 0x19
    4a8c:	8a 95       	dec	r24
    4a8e:	f1 f7       	brne	.-4      	; 0x4a8c <LCDInit+0x544>
    4a90:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	CLEAR_E();
    4a92:	ab e3       	ldi	r26, 0x3B	; 59
    4a94:	b0 e0       	ldi	r27, 0x00	; 0
    4a96:	eb e3       	ldi	r30, 0x3B	; 59
    4a98:	f0 e0       	ldi	r31, 0x00	; 0
    4a9a:	80 81       	ld	r24, Z
    4a9c:	8b 7f       	andi	r24, 0xFB	; 251
    4a9e:	8c 93       	st	X, r24
    4aa0:	80 e0       	ldi	r24, 0x00	; 0
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	a0 e8       	ldi	r26, 0x80	; 128
    4aa6:	bf e3       	ldi	r27, 0x3F	; 63
    4aa8:	8d 8b       	std	Y+21, r24	; 0x15
    4aaa:	9e 8b       	std	Y+22, r25	; 0x16
    4aac:	af 8b       	std	Y+23, r26	; 0x17
    4aae:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4ab0:	6d 89       	ldd	r22, Y+21	; 0x15
    4ab2:	7e 89       	ldd	r23, Y+22	; 0x16
    4ab4:	8f 89       	ldd	r24, Y+23	; 0x17
    4ab6:	98 8d       	ldd	r25, Y+24	; 0x18
    4ab8:	2b ea       	ldi	r18, 0xAB	; 171
    4aba:	3a ea       	ldi	r19, 0xAA	; 170
    4abc:	4a e2       	ldi	r20, 0x2A	; 42
    4abe:	50 e4       	ldi	r21, 0x40	; 64
    4ac0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4ac4:	dc 01       	movw	r26, r24
    4ac6:	cb 01       	movw	r24, r22
    4ac8:	89 8b       	std	Y+17, r24	; 0x11
    4aca:	9a 8b       	std	Y+18, r25	; 0x12
    4acc:	ab 8b       	std	Y+19, r26	; 0x13
    4ace:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4ad0:	69 89       	ldd	r22, Y+17	; 0x11
    4ad2:	7a 89       	ldd	r23, Y+18	; 0x12
    4ad4:	8b 89       	ldd	r24, Y+19	; 0x13
    4ad6:	9c 89       	ldd	r25, Y+20	; 0x14
    4ad8:	20 e0       	ldi	r18, 0x00	; 0
    4ada:	30 e0       	ldi	r19, 0x00	; 0
    4adc:	40 e8       	ldi	r20, 0x80	; 128
    4ade:	5f e3       	ldi	r21, 0x3F	; 63
    4ae0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4ae4:	88 23       	and	r24, r24
    4ae6:	1c f4       	brge	.+6      	; 0x4aee <LCDInit+0x5a6>
		__ticks = 1;
    4ae8:	81 e0       	ldi	r24, 0x01	; 1
    4aea:	88 8b       	std	Y+16, r24	; 0x10
    4aec:	91 c0       	rjmp	.+290    	; 0x4c10 <LCDInit+0x6c8>
	else if (__tmp > 255)
    4aee:	69 89       	ldd	r22, Y+17	; 0x11
    4af0:	7a 89       	ldd	r23, Y+18	; 0x12
    4af2:	8b 89       	ldd	r24, Y+19	; 0x13
    4af4:	9c 89       	ldd	r25, Y+20	; 0x14
    4af6:	20 e0       	ldi	r18, 0x00	; 0
    4af8:	30 e0       	ldi	r19, 0x00	; 0
    4afa:	4f e7       	ldi	r20, 0x7F	; 127
    4afc:	53 e4       	ldi	r21, 0x43	; 67
    4afe:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4b02:	18 16       	cp	r1, r24
    4b04:	0c f0       	brlt	.+2      	; 0x4b08 <LCDInit+0x5c0>
    4b06:	7b c0       	rjmp	.+246    	; 0x4bfe <LCDInit+0x6b6>
	{
		_delay_ms(__us / 1000.0);
    4b08:	6d 89       	ldd	r22, Y+21	; 0x15
    4b0a:	7e 89       	ldd	r23, Y+22	; 0x16
    4b0c:	8f 89       	ldd	r24, Y+23	; 0x17
    4b0e:	98 8d       	ldd	r25, Y+24	; 0x18
    4b10:	20 e0       	ldi	r18, 0x00	; 0
    4b12:	30 e0       	ldi	r19, 0x00	; 0
    4b14:	4a e7       	ldi	r20, 0x7A	; 122
    4b16:	54 e4       	ldi	r21, 0x44	; 68
    4b18:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    4b1c:	dc 01       	movw	r26, r24
    4b1e:	cb 01       	movw	r24, r22
    4b20:	8c 87       	std	Y+12, r24	; 0x0c
    4b22:	9d 87       	std	Y+13, r25	; 0x0d
    4b24:	ae 87       	std	Y+14, r26	; 0x0e
    4b26:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b28:	6c 85       	ldd	r22, Y+12	; 0x0c
    4b2a:	7d 85       	ldd	r23, Y+13	; 0x0d
    4b2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b2e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4b30:	20 e0       	ldi	r18, 0x00	; 0
    4b32:	30 e0       	ldi	r19, 0x00	; 0
    4b34:	4a ef       	ldi	r20, 0xFA	; 250
    4b36:	54 e4       	ldi	r21, 0x44	; 68
    4b38:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4b3c:	dc 01       	movw	r26, r24
    4b3e:	cb 01       	movw	r24, r22
    4b40:	88 87       	std	Y+8, r24	; 0x08
    4b42:	99 87       	std	Y+9, r25	; 0x09
    4b44:	aa 87       	std	Y+10, r26	; 0x0a
    4b46:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4b48:	68 85       	ldd	r22, Y+8	; 0x08
    4b4a:	79 85       	ldd	r23, Y+9	; 0x09
    4b4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b50:	20 e0       	ldi	r18, 0x00	; 0
    4b52:	30 e0       	ldi	r19, 0x00	; 0
    4b54:	40 e8       	ldi	r20, 0x80	; 128
    4b56:	5f e3       	ldi	r21, 0x3F	; 63
    4b58:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4b5c:	88 23       	and	r24, r24
    4b5e:	2c f4       	brge	.+10     	; 0x4b6a <LCDInit+0x622>
		__ticks = 1;
    4b60:	81 e0       	ldi	r24, 0x01	; 1
    4b62:	90 e0       	ldi	r25, 0x00	; 0
    4b64:	9f 83       	std	Y+7, r25	; 0x07
    4b66:	8e 83       	std	Y+6, r24	; 0x06
    4b68:	3f c0       	rjmp	.+126    	; 0x4be8 <LCDInit+0x6a0>
	else if (__tmp > 65535)
    4b6a:	68 85       	ldd	r22, Y+8	; 0x08
    4b6c:	79 85       	ldd	r23, Y+9	; 0x09
    4b6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b70:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b72:	20 e0       	ldi	r18, 0x00	; 0
    4b74:	3f ef       	ldi	r19, 0xFF	; 255
    4b76:	4f e7       	ldi	r20, 0x7F	; 127
    4b78:	57 e4       	ldi	r21, 0x47	; 71
    4b7a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4b7e:	18 16       	cp	r1, r24
    4b80:	4c f5       	brge	.+82     	; 0x4bd4 <LCDInit+0x68c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b82:	6c 85       	ldd	r22, Y+12	; 0x0c
    4b84:	7d 85       	ldd	r23, Y+13	; 0x0d
    4b86:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b88:	9f 85       	ldd	r25, Y+15	; 0x0f
    4b8a:	20 e0       	ldi	r18, 0x00	; 0
    4b8c:	30 e0       	ldi	r19, 0x00	; 0
    4b8e:	40 e2       	ldi	r20, 0x20	; 32
    4b90:	51 e4       	ldi	r21, 0x41	; 65
    4b92:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4b96:	dc 01       	movw	r26, r24
    4b98:	cb 01       	movw	r24, r22
    4b9a:	bc 01       	movw	r22, r24
    4b9c:	cd 01       	movw	r24, r26
    4b9e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4ba2:	dc 01       	movw	r26, r24
    4ba4:	cb 01       	movw	r24, r22
    4ba6:	9f 83       	std	Y+7, r25	; 0x07
    4ba8:	8e 83       	std	Y+6, r24	; 0x06
    4baa:	0f c0       	rjmp	.+30     	; 0x4bca <LCDInit+0x682>
    4bac:	88 ec       	ldi	r24, 0xC8	; 200
    4bae:	90 e0       	ldi	r25, 0x00	; 0
    4bb0:	9d 83       	std	Y+5, r25	; 0x05
    4bb2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    4bb6:	9d 81       	ldd	r25, Y+5	; 0x05
    4bb8:	01 97       	sbiw	r24, 0x01	; 1
    4bba:	f1 f7       	brne	.-4      	; 0x4bb8 <LCDInit+0x670>
    4bbc:	9d 83       	std	Y+5, r25	; 0x05
    4bbe:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bc0:	8e 81       	ldd	r24, Y+6	; 0x06
    4bc2:	9f 81       	ldd	r25, Y+7	; 0x07
    4bc4:	01 97       	sbiw	r24, 0x01	; 1
    4bc6:	9f 83       	std	Y+7, r25	; 0x07
    4bc8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bca:	8e 81       	ldd	r24, Y+6	; 0x06
    4bcc:	9f 81       	ldd	r25, Y+7	; 0x07
    4bce:	00 97       	sbiw	r24, 0x00	; 0
    4bd0:	69 f7       	brne	.-38     	; 0x4bac <LCDInit+0x664>
    4bd2:	24 c0       	rjmp	.+72     	; 0x4c1c <LCDInit+0x6d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bd4:	68 85       	ldd	r22, Y+8	; 0x08
    4bd6:	79 85       	ldd	r23, Y+9	; 0x09
    4bd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4bda:	9b 85       	ldd	r25, Y+11	; 0x0b
    4bdc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4be0:	dc 01       	movw	r26, r24
    4be2:	cb 01       	movw	r24, r22
    4be4:	9f 83       	std	Y+7, r25	; 0x07
    4be6:	8e 83       	std	Y+6, r24	; 0x06
    4be8:	8e 81       	ldd	r24, Y+6	; 0x06
    4bea:	9f 81       	ldd	r25, Y+7	; 0x07
    4bec:	9b 83       	std	Y+3, r25	; 0x03
    4bee:	8a 83       	std	Y+2, r24	; 0x02
    4bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    4bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    4bf4:	01 97       	sbiw	r24, 0x01	; 1
    4bf6:	f1 f7       	brne	.-4      	; 0x4bf4 <LCDInit+0x6ac>
    4bf8:	9b 83       	std	Y+3, r25	; 0x03
    4bfa:	8a 83       	std	Y+2, r24	; 0x02
    4bfc:	0f c0       	rjmp	.+30     	; 0x4c1c <LCDInit+0x6d4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4bfe:	69 89       	ldd	r22, Y+17	; 0x11
    4c00:	7a 89       	ldd	r23, Y+18	; 0x12
    4c02:	8b 89       	ldd	r24, Y+19	; 0x13
    4c04:	9c 89       	ldd	r25, Y+20	; 0x14
    4c06:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4c0a:	dc 01       	movw	r26, r24
    4c0c:	cb 01       	movw	r24, r22
    4c0e:	88 8b       	std	Y+16, r24	; 0x10
    4c10:	88 89       	ldd	r24, Y+16	; 0x10
    4c12:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4c14:	89 81       	ldd	r24, Y+1	; 0x01
    4c16:	8a 95       	dec	r24
    4c18:	f1 f7       	brne	.-4      	; 0x4c16 <LCDInit+0x6ce>
    4c1a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);

	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
    4c1c:	0e 94 08 1b 	call	0x3610	; 0x3610 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
    4c20:	fe 01       	movw	r30, r28
    4c22:	e9 5a       	subi	r30, 0xA9	; 169
    4c24:	ff 4f       	sbci	r31, 0xFF	; 255
    4c26:	80 81       	ld	r24, Z
    4c28:	8c 60       	ori	r24, 0x0C	; 12
    4c2a:	60 e0       	ldi	r22, 0x00	; 0
    4c2c:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
    4c30:	88 e2       	ldi	r24, 0x28	; 40
    4c32:	60 e0       	ldi	r22, 0x00	; 0
    4c34:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCDByte>


	LCDGotoXY(0,0);
    4c38:	80 e0       	ldi	r24, 0x00	; 0
    4c3a:	60 e0       	ldi	r22, 0x00	; 0
    4c3c:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <LCDGotoXY>

}
    4c40:	c9 5a       	subi	r28, 0xA9	; 169
    4c42:	df 4f       	sbci	r29, 0xFF	; 255
    4c44:	0f b6       	in	r0, 0x3f	; 63
    4c46:	f8 94       	cli
    4c48:	de bf       	out	0x3e, r29	; 62
    4c4a:	0f be       	out	0x3f, r0	; 63
    4c4c:	cd bf       	out	0x3d, r28	; 61
    4c4e:	cf 91       	pop	r28
    4c50:	df 91       	pop	r29
    4c52:	1f 91       	pop	r17
    4c54:	0f 91       	pop	r16
    4c56:	08 95       	ret

00004c58 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
    4c58:	df 93       	push	r29
    4c5a:	cf 93       	push	r28
    4c5c:	00 d0       	rcall	.+0      	; 0x4c5e <LCDWriteString+0x6>
    4c5e:	0f 92       	push	r0
    4c60:	cd b7       	in	r28, 0x3d	; 61
    4c62:	de b7       	in	r29, 0x3e	; 62
    4c64:	9b 83       	std	Y+3, r25	; 0x03
    4c66:	8a 83       	std	Y+2, r24	; 0x02
    4c68:	30 c0       	rjmp	.+96     	; 0x4cca <LCDWriteString+0x72>

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
    4c6a:	ea 81       	ldd	r30, Y+2	; 0x02
    4c6c:	fb 81       	ldd	r31, Y+3	; 0x03
    4c6e:	80 81       	ld	r24, Z
    4c70:	85 32       	cpi	r24, 0x25	; 37
    4c72:	01 f5       	brne	.+64     	; 0x4cb4 <LCDWriteString+0x5c>
	{
		msg++;
    4c74:	8a 81       	ldd	r24, Y+2	; 0x02
    4c76:	9b 81       	ldd	r25, Y+3	; 0x03
    4c78:	01 96       	adiw	r24, 0x01	; 1
    4c7a:	9b 83       	std	Y+3, r25	; 0x03
    4c7c:	8a 83       	std	Y+2, r24	; 0x02
		int8_t cc=*msg-'0';
    4c7e:	ea 81       	ldd	r30, Y+2	; 0x02
    4c80:	fb 81       	ldd	r31, Y+3	; 0x03
    4c82:	80 81       	ld	r24, Z
    4c84:	80 53       	subi	r24, 0x30	; 48
    4c86:	89 83       	std	Y+1, r24	; 0x01

		if(cc>=0 && cc<=7)
    4c88:	89 81       	ldd	r24, Y+1	; 0x01
    4c8a:	88 23       	and	r24, r24
    4c8c:	44 f0       	brlt	.+16     	; 0x4c9e <LCDWriteString+0x46>
    4c8e:	89 81       	ldd	r24, Y+1	; 0x01
    4c90:	88 30       	cpi	r24, 0x08	; 8
    4c92:	2c f4       	brge	.+10     	; 0x4c9e <LCDWriteString+0x46>
		{
			LCDData(cc);
    4c94:	89 81       	ldd	r24, Y+1	; 0x01
    4c96:	61 e0       	ldi	r22, 0x01	; 1
    4c98:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCDByte>
    4c9c:	11 c0       	rjmp	.+34     	; 0x4cc0 <LCDWriteString+0x68>
		}
		else
		{
			LCDData('%');
    4c9e:	85 e2       	ldi	r24, 0x25	; 37
    4ca0:	61 e0       	ldi	r22, 0x01	; 1
    4ca2:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCDByte>
			LCDData(*msg);
    4ca6:	ea 81       	ldd	r30, Y+2	; 0x02
    4ca8:	fb 81       	ldd	r31, Y+3	; 0x03
    4caa:	80 81       	ld	r24, Z
    4cac:	61 e0       	ldi	r22, 0x01	; 1
    4cae:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCDByte>
    4cb2:	06 c0       	rjmp	.+12     	; 0x4cc0 <LCDWriteString+0x68>
		}
	}
	else
	{
		LCDData(*msg);
    4cb4:	ea 81       	ldd	r30, Y+2	; 0x02
    4cb6:	fb 81       	ldd	r31, Y+3	; 0x03
    4cb8:	80 81       	ld	r24, Z
    4cba:	61 e0       	ldi	r22, 0x01	; 1
    4cbc:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCDByte>
	}
	msg++;
    4cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    4cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    4cc4:	01 96       	adiw	r24, 0x01	; 1
    4cc6:	9b 83       	std	Y+3, r25	; 0x03
    4cc8:	8a 83       	std	Y+2, r24	; 0x02

	In the same way you can insert any syblom numbered 0-7


	*****************************************************************/
 while(*msg!='\0')
    4cca:	ea 81       	ldd	r30, Y+2	; 0x02
    4ccc:	fb 81       	ldd	r31, Y+3	; 0x03
    4cce:	80 81       	ld	r24, Z
    4cd0:	88 23       	and	r24, r24
    4cd2:	59 f6       	brne	.-106    	; 0x4c6a <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
    4cd4:	0f 90       	pop	r0
    4cd6:	0f 90       	pop	r0
    4cd8:	0f 90       	pop	r0
    4cda:	cf 91       	pop	r28
    4cdc:	df 91       	pop	r29
    4cde:	08 95       	ret

00004ce0 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
    4ce0:	df 93       	push	r29
    4ce2:	cf 93       	push	r28
    4ce4:	cd b7       	in	r28, 0x3d	; 61
    4ce6:	de b7       	in	r29, 0x3e	; 62
    4ce8:	2d 97       	sbiw	r28, 0x0d	; 13
    4cea:	0f b6       	in	r0, 0x3f	; 63
    4cec:	f8 94       	cli
    4cee:	de bf       	out	0x3e, r29	; 62
    4cf0:	0f be       	out	0x3f, r0	; 63
    4cf2:	cd bf       	out	0x3d, r28	; 61
    4cf4:	9b 87       	std	Y+11, r25	; 0x0b
    4cf6:	8a 87       	std	Y+10, r24	; 0x0a
    4cf8:	7d 87       	std	Y+13, r23	; 0x0d
    4cfa:	6c 87       	std	Y+12, r22	; 0x0c
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
    4cfc:	85 e0       	ldi	r24, 0x05	; 5
    4cfe:	fe 01       	movw	r30, r28
    4d00:	35 96       	adiw	r30, 0x05	; 5
    4d02:	df 01       	movw	r26, r30
    4d04:	28 2f       	mov	r18, r24
    4d06:	1d 92       	st	X+, r1
    4d08:	2a 95       	dec	r18
    4d0a:	e9 f7       	brne	.-6      	; 0x4d06 <LCDWriteInt+0x26>
	int i=4,j=0;
    4d0c:	84 e0       	ldi	r24, 0x04	; 4
    4d0e:	90 e0       	ldi	r25, 0x00	; 0
    4d10:	9c 83       	std	Y+4, r25	; 0x04
    4d12:	8b 83       	std	Y+3, r24	; 0x03
    4d14:	1a 82       	std	Y+2, r1	; 0x02
    4d16:	19 82       	std	Y+1, r1	; 0x01
    4d18:	1e c0       	rjmp	.+60     	; 0x4d56 <LCDWriteInt+0x76>
	while(val)
	{
	str[i]=val%10;
    4d1a:	eb 81       	ldd	r30, Y+3	; 0x03
    4d1c:	fc 81       	ldd	r31, Y+4	; 0x04
    4d1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d20:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d22:	2a e0       	ldi	r18, 0x0A	; 10
    4d24:	30 e0       	ldi	r19, 0x00	; 0
    4d26:	b9 01       	movw	r22, r18
    4d28:	0e 94 99 39 	call	0x7332	; 0x7332 <__divmodhi4>
    4d2c:	28 2f       	mov	r18, r24
    4d2e:	ce 01       	movw	r24, r28
    4d30:	05 96       	adiw	r24, 0x05	; 5
    4d32:	e8 0f       	add	r30, r24
    4d34:	f9 1f       	adc	r31, r25
    4d36:	20 83       	st	Z, r18
	val=val/10;
    4d38:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d3c:	2a e0       	ldi	r18, 0x0A	; 10
    4d3e:	30 e0       	ldi	r19, 0x00	; 0
    4d40:	b9 01       	movw	r22, r18
    4d42:	0e 94 99 39 	call	0x7332	; 0x7332 <__divmodhi4>
    4d46:	cb 01       	movw	r24, r22
    4d48:	9b 87       	std	Y+11, r25	; 0x0b
    4d4a:	8a 87       	std	Y+10, r24	; 0x0a
	i--;
    4d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    4d50:	01 97       	sbiw	r24, 0x01	; 1
    4d52:	9c 83       	std	Y+4, r25	; 0x04
    4d54:	8b 83       	std	Y+3, r24	; 0x03

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
    4d56:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d58:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d5a:	00 97       	sbiw	r24, 0x00	; 0
    4d5c:	f1 f6       	brne	.-68     	; 0x4d1a <LCDWriteInt+0x3a>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
    4d5e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d60:	9d 85       	ldd	r25, Y+13	; 0x0d
    4d62:	af ef       	ldi	r26, 0xFF	; 255
    4d64:	8f 3f       	cpi	r24, 0xFF	; 255
    4d66:	9a 07       	cpc	r25, r26
    4d68:	89 f4       	brne	.+34     	; 0x4d8c <LCDWriteInt+0xac>
    4d6a:	05 c0       	rjmp	.+10     	; 0x4d76 <LCDWriteInt+0x96>
		while(str[j]==0) j++;
    4d6c:	89 81       	ldd	r24, Y+1	; 0x01
    4d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    4d70:	01 96       	adiw	r24, 0x01	; 1
    4d72:	9a 83       	std	Y+2, r25	; 0x02
    4d74:	89 83       	std	Y+1, r24	; 0x01
    4d76:	29 81       	ldd	r18, Y+1	; 0x01
    4d78:	3a 81       	ldd	r19, Y+2	; 0x02
    4d7a:	ce 01       	movw	r24, r28
    4d7c:	05 96       	adiw	r24, 0x05	; 5
    4d7e:	fc 01       	movw	r30, r24
    4d80:	e2 0f       	add	r30, r18
    4d82:	f3 1f       	adc	r31, r19
    4d84:	80 81       	ld	r24, Z
    4d86:	88 23       	and	r24, r24
    4d88:	89 f3       	breq	.-30     	; 0x4d6c <LCDWriteInt+0x8c>
    4d8a:	08 c0       	rjmp	.+16     	; 0x4d9c <LCDWriteInt+0xbc>
	else
		j=5-field_length;
    4d8c:	85 e0       	ldi	r24, 0x05	; 5
    4d8e:	90 e0       	ldi	r25, 0x00	; 0
    4d90:	2c 85       	ldd	r18, Y+12	; 0x0c
    4d92:	3d 85       	ldd	r19, Y+13	; 0x0d
    4d94:	82 1b       	sub	r24, r18
    4d96:	93 0b       	sbc	r25, r19
    4d98:	9a 83       	std	Y+2, r25	; 0x02
    4d9a:	89 83       	std	Y+1, r24	; 0x01

	if(val<0) LCDData('-');
    4d9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4da0:	99 23       	and	r25, r25
    4da2:	24 f4       	brge	.+8      	; 0x4dac <LCDWriteInt+0xcc>
    4da4:	8d e2       	ldi	r24, 0x2D	; 45
    4da6:	61 e0       	ldi	r22, 0x01	; 1
    4da8:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCDByte>
	for(i=j;i<5;i++)
    4dac:	89 81       	ldd	r24, Y+1	; 0x01
    4dae:	9a 81       	ldd	r25, Y+2	; 0x02
    4db0:	9c 83       	std	Y+4, r25	; 0x04
    4db2:	8b 83       	std	Y+3, r24	; 0x03
    4db4:	11 c0       	rjmp	.+34     	; 0x4dd8 <LCDWriteInt+0xf8>
	{
	LCDData(48+str[i]);
    4db6:	2b 81       	ldd	r18, Y+3	; 0x03
    4db8:	3c 81       	ldd	r19, Y+4	; 0x04
    4dba:	ce 01       	movw	r24, r28
    4dbc:	05 96       	adiw	r24, 0x05	; 5
    4dbe:	fc 01       	movw	r30, r24
    4dc0:	e2 0f       	add	r30, r18
    4dc2:	f3 1f       	adc	r31, r19
    4dc4:	80 81       	ld	r24, Z
    4dc6:	80 5d       	subi	r24, 0xD0	; 208
    4dc8:	61 e0       	ldi	r22, 0x01	; 1
    4dca:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
    4dce:	8b 81       	ldd	r24, Y+3	; 0x03
    4dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    4dd2:	01 96       	adiw	r24, 0x01	; 1
    4dd4:	9c 83       	std	Y+4, r25	; 0x04
    4dd6:	8b 83       	std	Y+3, r24	; 0x03
    4dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    4dda:	9c 81       	ldd	r25, Y+4	; 0x04
    4ddc:	85 30       	cpi	r24, 0x05	; 5
    4dde:	91 05       	cpc	r25, r1
    4de0:	54 f3       	brlt	.-44     	; 0x4db6 <LCDWriteInt+0xd6>
	{
	LCDData(48+str[i]);
	}
}
    4de2:	2d 96       	adiw	r28, 0x0d	; 13
    4de4:	0f b6       	in	r0, 0x3f	; 63
    4de6:	f8 94       	cli
    4de8:	de bf       	out	0x3e, r29	; 62
    4dea:	0f be       	out	0x3f, r0	; 63
    4dec:	cd bf       	out	0x3d, r28	; 61
    4dee:	cf 91       	pop	r28
    4df0:	df 91       	pop	r29
    4df2:	08 95       	ret

00004df4 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
    4df4:	df 93       	push	r29
    4df6:	cf 93       	push	r28
    4df8:	00 d0       	rcall	.+0      	; 0x4dfa <LCDGotoXY+0x6>
    4dfa:	00 d0       	rcall	.+0      	; 0x4dfc <LCDGotoXY+0x8>
    4dfc:	cd b7       	in	r28, 0x3d	; 61
    4dfe:	de b7       	in	r29, 0x3e	; 62
    4e00:	89 83       	std	Y+1, r24	; 0x01
    4e02:	6a 83       	std	Y+2, r22	; 0x02
 	if(x>=20) return;
    4e04:	89 81       	ldd	r24, Y+1	; 0x01
    4e06:	84 31       	cpi	r24, 0x14	; 20
    4e08:	c0 f4       	brcc	.+48     	; 0x4e3a <LCDGotoXY+0x46>

//	#ifdef LCD_TYPE_204

	switch(y)
    4e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e0c:	28 2f       	mov	r18, r24
    4e0e:	30 e0       	ldi	r19, 0x00	; 0
    4e10:	3c 83       	std	Y+4, r19	; 0x04
    4e12:	2b 83       	std	Y+3, r18	; 0x03
    4e14:	8b 81       	ldd	r24, Y+3	; 0x03
    4e16:	9c 81       	ldd	r25, Y+4	; 0x04
    4e18:	00 97       	sbiw	r24, 0x00	; 0
    4e1a:	41 f0       	breq	.+16     	; 0x4e2c <LCDGotoXY+0x38>
    4e1c:	2b 81       	ldd	r18, Y+3	; 0x03
    4e1e:	3c 81       	ldd	r19, Y+4	; 0x04
    4e20:	21 30       	cpi	r18, 0x01	; 1
    4e22:	31 05       	cpc	r19, r1
    4e24:	19 f4       	brne	.+6      	; 0x4e2c <LCDGotoXY+0x38>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
    4e26:	89 81       	ldd	r24, Y+1	; 0x01
    4e28:	80 64       	ori	r24, 0x40	; 64
    4e2a:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	#endif
*/
	x|=0b10000000;
    4e2c:	89 81       	ldd	r24, Y+1	; 0x01
    4e2e:	80 68       	ori	r24, 0x80	; 128
    4e30:	89 83       	std	Y+1, r24	; 0x01
  	LCDCmd(x);
    4e32:	89 81       	ldd	r24, Y+1	; 0x01
    4e34:	60 e0       	ldi	r22, 0x00	; 0
    4e36:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCDByte>
}
    4e3a:	0f 90       	pop	r0
    4e3c:	0f 90       	pop	r0
    4e3e:	0f 90       	pop	r0
    4e40:	0f 90       	pop	r0
    4e42:	cf 91       	pop	r28
    4e44:	df 91       	pop	r29
    4e46:	08 95       	ret

00004e48 <LCDHexDumpXY>:



void LCDHexDumpXY(uint8_t x, uint8_t y,uint8_t d)
{
    4e48:	df 93       	push	r29
    4e4a:	cf 93       	push	r28
    4e4c:	00 d0       	rcall	.+0      	; 0x4e4e <LCDHexDumpXY+0x6>
    4e4e:	00 d0       	rcall	.+0      	; 0x4e50 <LCDHexDumpXY+0x8>
    4e50:	cd b7       	in	r28, 0x3d	; 61
    4e52:	de b7       	in	r29, 0x3e	; 62
    4e54:	8a 83       	std	Y+2, r24	; 0x02
    4e56:	6b 83       	std	Y+3, r22	; 0x03
    4e58:	4c 83       	std	Y+4, r20	; 0x04
	LCDGotoXY(x,y);
    4e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e5c:	6b 81       	ldd	r22, Y+3	; 0x03
    4e5e:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <LCDGotoXY>
	uint8_t byte = '0';
    4e62:	80 e3       	ldi	r24, 0x30	; 48
    4e64:	89 83       	std	Y+1, r24	; 0x01
	(((d>>4)&0x0F)<=9) ? (byte='0'+((d>>4)&0x0F)) : (byte='A'+ ((d>>4)&0x0F)-0x0A);
    4e66:	8c 81       	ldd	r24, Y+4	; 0x04
    4e68:	82 95       	swap	r24
    4e6a:	8f 70       	andi	r24, 0x0F	; 15
    4e6c:	8a 30       	cpi	r24, 0x0A	; 10
    4e6e:	30 f4       	brcc	.+12     	; 0x4e7c <LCDHexDumpXY+0x34>
    4e70:	8c 81       	ldd	r24, Y+4	; 0x04
    4e72:	82 95       	swap	r24
    4e74:	8f 70       	andi	r24, 0x0F	; 15
    4e76:	80 5d       	subi	r24, 0xD0	; 208
    4e78:	89 83       	std	Y+1, r24	; 0x01
    4e7a:	05 c0       	rjmp	.+10     	; 0x4e86 <LCDHexDumpXY+0x3e>
    4e7c:	8c 81       	ldd	r24, Y+4	; 0x04
    4e7e:	82 95       	swap	r24
    4e80:	8f 70       	andi	r24, 0x0F	; 15
    4e82:	89 5c       	subi	r24, 0xC9	; 201
    4e84:	89 83       	std	Y+1, r24	; 0x01
	LCDByte(byte,1);
    4e86:	89 81       	ldd	r24, Y+1	; 0x01
    4e88:	61 e0       	ldi	r22, 0x01	; 1
    4e8a:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCDByte>
	LCDBusyLoop();
    4e8e:	0e 94 08 1b 	call	0x3610	; 0x3610 <LCDBusyLoop>

	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
    4e92:	8c 81       	ldd	r24, Y+4	; 0x04
    4e94:	88 2f       	mov	r24, r24
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	8f 70       	andi	r24, 0x0F	; 15
    4e9a:	90 70       	andi	r25, 0x00	; 0
    4e9c:	8a 30       	cpi	r24, 0x0A	; 10
    4e9e:	91 05       	cpc	r25, r1
    4ea0:	2c f4       	brge	.+10     	; 0x4eac <LCDHexDumpXY+0x64>
    4ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    4ea4:	8f 70       	andi	r24, 0x0F	; 15
    4ea6:	80 5d       	subi	r24, 0xD0	; 208
    4ea8:	89 83       	std	Y+1, r24	; 0x01
    4eaa:	04 c0       	rjmp	.+8      	; 0x4eb4 <LCDHexDumpXY+0x6c>
    4eac:	8c 81       	ldd	r24, Y+4	; 0x04
    4eae:	8f 70       	andi	r24, 0x0F	; 15
    4eb0:	89 5c       	subi	r24, 0xC9	; 201
    4eb2:	89 83       	std	Y+1, r24	; 0x01
	LCDByte(byte,1);
    4eb4:	89 81       	ldd	r24, Y+1	; 0x01
    4eb6:	61 e0       	ldi	r22, 0x01	; 1
    4eb8:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCDByte>
	LCDBusyLoop();
    4ebc:	0e 94 08 1b 	call	0x3610	; 0x3610 <LCDBusyLoop>
}
    4ec0:	0f 90       	pop	r0
    4ec2:	0f 90       	pop	r0
    4ec4:	0f 90       	pop	r0
    4ec6:	0f 90       	pop	r0
    4ec8:	cf 91       	pop	r28
    4eca:	df 91       	pop	r29
    4ecc:	08 95       	ret

00004ece <activate>:
extern bool IsItGGAString ,flag1,flag2 ;

uint8_t SelfTestBuffer[64];

void activate(int n)
{
    4ece:	df 93       	push	r29
    4ed0:	cf 93       	push	r28
    4ed2:	00 d0       	rcall	.+0      	; 0x4ed4 <activate+0x6>
    4ed4:	cd b7       	in	r28, 0x3d	; 61
    4ed6:	de b7       	in	r29, 0x3e	; 62
    4ed8:	9a 83       	std	Y+2, r25	; 0x02
    4eda:	89 83       	std	Y+1, r24	; 0x01
	if(n==1){
    4edc:	89 81       	ldd	r24, Y+1	; 0x01
    4ede:	9a 81       	ldd	r25, Y+2	; 0x02
    4ee0:	81 30       	cpi	r24, 0x01	; 1
    4ee2:	91 05       	cpc	r25, r1
    4ee4:	e1 f4       	brne	.+56     	; 0x4f1e <activate+0x50>
		USART_Init(19200);
    4ee6:	60 e0       	ldi	r22, 0x00	; 0
    4ee8:	7b e4       	ldi	r23, 0x4B	; 75
    4eea:	80 e0       	ldi	r24, 0x00	; 0
    4eec:	90 e0       	ldi	r25, 0x00	; 0
    4eee:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <USART_Init>
		DIOSetPinValue(3,6,0);
    4ef2:	83 e0       	ldi	r24, 0x03	; 3
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	66 e0       	ldi	r22, 0x06	; 6
    4ef8:	70 e0       	ldi	r23, 0x00	; 0
    4efa:	40 e0       	ldi	r20, 0x00	; 0
    4efc:	50 e0       	ldi	r21, 0x00	; 0
    4efe:	0e 94 ed 08 	call	0x11da	; 0x11da <DIOSetPinValue>
		DIOSetPinValue(3,7,0);
    4f02:	83 e0       	ldi	r24, 0x03	; 3
    4f04:	90 e0       	ldi	r25, 0x00	; 0
    4f06:	67 e0       	ldi	r22, 0x07	; 7
    4f08:	70 e0       	ldi	r23, 0x00	; 0
    4f0a:	40 e0       	ldi	r20, 0x00	; 0
    4f0c:	50 e0       	ldi	r21, 0x00	; 0
    4f0e:	0e 94 ed 08 	call	0x11da	; 0x11da <DIOSetPinValue>
		active=1;
    4f12:	81 e0       	ldi	r24, 0x01	; 1
    4f14:	90 e0       	ldi	r25, 0x00	; 0
    4f16:	90 93 1e 05 	sts	0x051E, r25
    4f1a:	80 93 1d 05 	sts	0x051D, r24
	}
	if(n==2){
    4f1e:	89 81       	ldd	r24, Y+1	; 0x01
    4f20:	9a 81       	ldd	r25, Y+2	; 0x02
    4f22:	82 30       	cpi	r24, 0x02	; 2
    4f24:	91 05       	cpc	r25, r1
    4f26:	e1 f4       	brne	.+56     	; 0x4f60 <activate+0x92>
			USART_Init(9600);
    4f28:	60 e8       	ldi	r22, 0x80	; 128
    4f2a:	75 e2       	ldi	r23, 0x25	; 37
    4f2c:	80 e0       	ldi	r24, 0x00	; 0
    4f2e:	90 e0       	ldi	r25, 0x00	; 0
    4f30:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <USART_Init>
			DIOSetPinValue(3,6,1);
    4f34:	83 e0       	ldi	r24, 0x03	; 3
    4f36:	90 e0       	ldi	r25, 0x00	; 0
    4f38:	66 e0       	ldi	r22, 0x06	; 6
    4f3a:	70 e0       	ldi	r23, 0x00	; 0
    4f3c:	41 e0       	ldi	r20, 0x01	; 1
    4f3e:	50 e0       	ldi	r21, 0x00	; 0
    4f40:	0e 94 ed 08 	call	0x11da	; 0x11da <DIOSetPinValue>
			DIOSetPinValue(3,7,0);
    4f44:	83 e0       	ldi	r24, 0x03	; 3
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	67 e0       	ldi	r22, 0x07	; 7
    4f4a:	70 e0       	ldi	r23, 0x00	; 0
    4f4c:	40 e0       	ldi	r20, 0x00	; 0
    4f4e:	50 e0       	ldi	r21, 0x00	; 0
    4f50:	0e 94 ed 08 	call	0x11da	; 0x11da <DIOSetPinValue>
			active=2;
    4f54:	82 e0       	ldi	r24, 0x02	; 2
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	90 93 1e 05 	sts	0x051E, r25
    4f5c:	80 93 1d 05 	sts	0x051D, r24
		}
	if(n==3){
    4f60:	89 81       	ldd	r24, Y+1	; 0x01
    4f62:	9a 81       	ldd	r25, Y+2	; 0x02
    4f64:	83 30       	cpi	r24, 0x03	; 3
    4f66:	91 05       	cpc	r25, r1
    4f68:	e1 f4       	brne	.+56     	; 0x4fa2 <activate+0xd4>
			USART_Init(115200);
    4f6a:	60 e0       	ldi	r22, 0x00	; 0
    4f6c:	72 ec       	ldi	r23, 0xC2	; 194
    4f6e:	81 e0       	ldi	r24, 0x01	; 1
    4f70:	90 e0       	ldi	r25, 0x00	; 0
    4f72:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <USART_Init>
			DIOSetPinValue(3,6,0);
    4f76:	83 e0       	ldi	r24, 0x03	; 3
    4f78:	90 e0       	ldi	r25, 0x00	; 0
    4f7a:	66 e0       	ldi	r22, 0x06	; 6
    4f7c:	70 e0       	ldi	r23, 0x00	; 0
    4f7e:	40 e0       	ldi	r20, 0x00	; 0
    4f80:	50 e0       	ldi	r21, 0x00	; 0
    4f82:	0e 94 ed 08 	call	0x11da	; 0x11da <DIOSetPinValue>
			DIOSetPinValue(3,7,1);
    4f86:	83 e0       	ldi	r24, 0x03	; 3
    4f88:	90 e0       	ldi	r25, 0x00	; 0
    4f8a:	67 e0       	ldi	r22, 0x07	; 7
    4f8c:	70 e0       	ldi	r23, 0x00	; 0
    4f8e:	41 e0       	ldi	r20, 0x01	; 1
    4f90:	50 e0       	ldi	r21, 0x00	; 0
    4f92:	0e 94 ed 08 	call	0x11da	; 0x11da <DIOSetPinValue>
			active=3;
    4f96:	83 e0       	ldi	r24, 0x03	; 3
    4f98:	90 e0       	ldi	r25, 0x00	; 0
    4f9a:	90 93 1e 05 	sts	0x051E, r25
    4f9e:	80 93 1d 05 	sts	0x051D, r24
		}
}
    4fa2:	0f 90       	pop	r0
    4fa4:	0f 90       	pop	r0
    4fa6:	cf 91       	pop	r28
    4fa8:	df 91       	pop	r29
    4faa:	08 95       	ret

00004fac <main>:

int main()
{
    4fac:	0f 93       	push	r16
    4fae:	1f 93       	push	r17
    4fb0:	df 93       	push	r29
    4fb2:	cf 93       	push	r28
    4fb4:	cd b7       	in	r28, 0x3d	; 61
    4fb6:	de b7       	in	r29, 0x3e	; 62
    4fb8:	cb 52       	subi	r28, 0x2B	; 43
    4fba:	d1 40       	sbci	r29, 0x01	; 1
    4fbc:	0f b6       	in	r0, 0x3f	; 63
    4fbe:	f8 94       	cli
    4fc0:	de bf       	out	0x3e, r29	; 62
    4fc2:	0f be       	out	0x3f, r0	; 63
    4fc4:	cd bf       	out	0x3d, r28	; 61
uint32_t Check=0;
    4fc6:	fe 01       	movw	r30, r28
    4fc8:	ee 57       	subi	r30, 0x7E	; 126
    4fca:	ff 4f       	sbci	r31, 0xFF	; 255
    4fcc:	10 82       	st	Z, r1
    4fce:	11 82       	std	Z+1, r1	; 0x01
    4fd0:	12 82       	std	Z+2, r1	; 0x02
    4fd2:	13 82       	std	Z+3, r1	; 0x03
GGA_Index=0;
    4fd4:	10 92 00 06 	sts	0x0600, r1
    4fd8:	10 92 ff 05 	sts	0x05FF, r1
DIOSetPinDirection(1,0,1);
    4fdc:	81 e0       	ldi	r24, 0x01	; 1
    4fde:	90 e0       	ldi	r25, 0x00	; 0
    4fe0:	60 e0       	ldi	r22, 0x00	; 0
    4fe2:	70 e0       	ldi	r23, 0x00	; 0
    4fe4:	41 e0       	ldi	r20, 0x01	; 1
    4fe6:	50 e0       	ldi	r21, 0x00	; 0
    4fe8:	0e 94 fb 07 	call	0xff6	; 0xff6 <DIOSetPinDirection>
DIOSetPinDirection(1,1,1);
    4fec:	81 e0       	ldi	r24, 0x01	; 1
    4fee:	90 e0       	ldi	r25, 0x00	; 0
    4ff0:	61 e0       	ldi	r22, 0x01	; 1
    4ff2:	70 e0       	ldi	r23, 0x00	; 0
    4ff4:	41 e0       	ldi	r20, 0x01	; 1
    4ff6:	50 e0       	ldi	r21, 0x00	; 0
    4ff8:	0e 94 fb 07 	call	0xff6	; 0xff6 <DIOSetPinDirection>
DIOSetPinDirection(1,2,1);
    4ffc:	81 e0       	ldi	r24, 0x01	; 1
    4ffe:	90 e0       	ldi	r25, 0x00	; 0
    5000:	62 e0       	ldi	r22, 0x02	; 2
    5002:	70 e0       	ldi	r23, 0x00	; 0
    5004:	41 e0       	ldi	r20, 0x01	; 1
    5006:	50 e0       	ldi	r21, 0x00	; 0
    5008:	0e 94 fb 07 	call	0xff6	; 0xff6 <DIOSetPinDirection>
DIOSetPinDirection(1,2,1);
    500c:	81 e0       	ldi	r24, 0x01	; 1
    500e:	90 e0       	ldi	r25, 0x00	; 0
    5010:	62 e0       	ldi	r22, 0x02	; 2
    5012:	70 e0       	ldi	r23, 0x00	; 0
    5014:	41 e0       	ldi	r20, 0x01	; 1
    5016:	50 e0       	ldi	r21, 0x00	; 0
    5018:	0e 94 fb 07 	call	0xff6	; 0xff6 <DIOSetPinDirection>
DIOSetPinDirection(3,6,1);
    501c:	83 e0       	ldi	r24, 0x03	; 3
    501e:	90 e0       	ldi	r25, 0x00	; 0
    5020:	66 e0       	ldi	r22, 0x06	; 6
    5022:	70 e0       	ldi	r23, 0x00	; 0
    5024:	41 e0       	ldi	r20, 0x01	; 1
    5026:	50 e0       	ldi	r21, 0x00	; 0
    5028:	0e 94 fb 07 	call	0xff6	; 0xff6 <DIOSetPinDirection>
DIOSetPinDirection(3,7,1);
    502c:	83 e0       	ldi	r24, 0x03	; 3
    502e:	90 e0       	ldi	r25, 0x00	; 0
    5030:	67 e0       	ldi	r22, 0x07	; 7
    5032:	70 e0       	ldi	r23, 0x00	; 0
    5034:	41 e0       	ldi	r20, 0x01	; 1
    5036:	50 e0       	ldi	r21, 0x00	; 0
    5038:	0e 94 fb 07 	call	0xff6	; 0xff6 <DIOSetPinDirection>
uint8_t data;
uint8_t byte;
uint8_t str[MAX_LEN];
LCDWriteStringXY(2,0,"initializing RFID");
    503c:	82 e0       	ldi	r24, 0x02	; 2
    503e:	60 e0       	ldi	r22, 0x00	; 0
    5040:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <LCDGotoXY>
    5044:	88 ef       	ldi	r24, 0xF8	; 248
    5046:	91 e0       	ldi	r25, 0x01	; 1
    5048:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <LCDWriteString>
    504c:	fe 01       	movw	r30, r28
    504e:	e5 58       	subi	r30, 0x85	; 133
    5050:	ff 4f       	sbci	r31, 0xFF	; 255
    5052:	80 e0       	ldi	r24, 0x00	; 0
    5054:	90 e0       	ldi	r25, 0x00	; 0
    5056:	af ea       	ldi	r26, 0xAF	; 175
    5058:	b3 e4       	ldi	r27, 0x43	; 67
    505a:	80 83       	st	Z, r24
    505c:	91 83       	std	Z+1, r25	; 0x01
    505e:	a2 83       	std	Z+2, r26	; 0x02
    5060:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5062:	8e 01       	movw	r16, r28
    5064:	09 58       	subi	r16, 0x89	; 137
    5066:	1f 4f       	sbci	r17, 0xFF	; 255
    5068:	fe 01       	movw	r30, r28
    506a:	e5 58       	subi	r30, 0x85	; 133
    506c:	ff 4f       	sbci	r31, 0xFF	; 255
    506e:	60 81       	ld	r22, Z
    5070:	71 81       	ldd	r23, Z+1	; 0x01
    5072:	82 81       	ldd	r24, Z+2	; 0x02
    5074:	93 81       	ldd	r25, Z+3	; 0x03
    5076:	20 e0       	ldi	r18, 0x00	; 0
    5078:	30 e0       	ldi	r19, 0x00	; 0
    507a:	4a ef       	ldi	r20, 0xFA	; 250
    507c:	54 e4       	ldi	r21, 0x44	; 68
    507e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5082:	dc 01       	movw	r26, r24
    5084:	cb 01       	movw	r24, r22
    5086:	f8 01       	movw	r30, r16
    5088:	80 83       	st	Z, r24
    508a:	91 83       	std	Z+1, r25	; 0x01
    508c:	a2 83       	std	Z+2, r26	; 0x02
    508e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5090:	fe 01       	movw	r30, r28
    5092:	e9 58       	subi	r30, 0x89	; 137
    5094:	ff 4f       	sbci	r31, 0xFF	; 255
    5096:	60 81       	ld	r22, Z
    5098:	71 81       	ldd	r23, Z+1	; 0x01
    509a:	82 81       	ldd	r24, Z+2	; 0x02
    509c:	93 81       	ldd	r25, Z+3	; 0x03
    509e:	20 e0       	ldi	r18, 0x00	; 0
    50a0:	30 e0       	ldi	r19, 0x00	; 0
    50a2:	40 e8       	ldi	r20, 0x80	; 128
    50a4:	5f e3       	ldi	r21, 0x3F	; 63
    50a6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    50aa:	88 23       	and	r24, r24
    50ac:	44 f4       	brge	.+16     	; 0x50be <main+0x112>
		__ticks = 1;
    50ae:	fe 01       	movw	r30, r28
    50b0:	eb 58       	subi	r30, 0x8B	; 139
    50b2:	ff 4f       	sbci	r31, 0xFF	; 255
    50b4:	81 e0       	ldi	r24, 0x01	; 1
    50b6:	90 e0       	ldi	r25, 0x00	; 0
    50b8:	91 83       	std	Z+1, r25	; 0x01
    50ba:	80 83       	st	Z, r24
    50bc:	64 c0       	rjmp	.+200    	; 0x5186 <main+0x1da>
	else if (__tmp > 65535)
    50be:	fe 01       	movw	r30, r28
    50c0:	e9 58       	subi	r30, 0x89	; 137
    50c2:	ff 4f       	sbci	r31, 0xFF	; 255
    50c4:	60 81       	ld	r22, Z
    50c6:	71 81       	ldd	r23, Z+1	; 0x01
    50c8:	82 81       	ldd	r24, Z+2	; 0x02
    50ca:	93 81       	ldd	r25, Z+3	; 0x03
    50cc:	20 e0       	ldi	r18, 0x00	; 0
    50ce:	3f ef       	ldi	r19, 0xFF	; 255
    50d0:	4f e7       	ldi	r20, 0x7F	; 127
    50d2:	57 e4       	ldi	r21, 0x47	; 71
    50d4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    50d8:	18 16       	cp	r1, r24
    50da:	0c f0       	brlt	.+2      	; 0x50de <main+0x132>
    50dc:	43 c0       	rjmp	.+134    	; 0x5164 <main+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50de:	fe 01       	movw	r30, r28
    50e0:	e5 58       	subi	r30, 0x85	; 133
    50e2:	ff 4f       	sbci	r31, 0xFF	; 255
    50e4:	60 81       	ld	r22, Z
    50e6:	71 81       	ldd	r23, Z+1	; 0x01
    50e8:	82 81       	ldd	r24, Z+2	; 0x02
    50ea:	93 81       	ldd	r25, Z+3	; 0x03
    50ec:	20 e0       	ldi	r18, 0x00	; 0
    50ee:	30 e0       	ldi	r19, 0x00	; 0
    50f0:	40 e2       	ldi	r20, 0x20	; 32
    50f2:	51 e4       	ldi	r21, 0x41	; 65
    50f4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    50f8:	dc 01       	movw	r26, r24
    50fa:	cb 01       	movw	r24, r22
    50fc:	8e 01       	movw	r16, r28
    50fe:	0b 58       	subi	r16, 0x8B	; 139
    5100:	1f 4f       	sbci	r17, 0xFF	; 255
    5102:	bc 01       	movw	r22, r24
    5104:	cd 01       	movw	r24, r26
    5106:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    510a:	dc 01       	movw	r26, r24
    510c:	cb 01       	movw	r24, r22
    510e:	f8 01       	movw	r30, r16
    5110:	91 83       	std	Z+1, r25	; 0x01
    5112:	80 83       	st	Z, r24
    5114:	1f c0       	rjmp	.+62     	; 0x5154 <main+0x1a8>
    5116:	fe 01       	movw	r30, r28
    5118:	ed 58       	subi	r30, 0x8D	; 141
    511a:	ff 4f       	sbci	r31, 0xFF	; 255
    511c:	88 ec       	ldi	r24, 0xC8	; 200
    511e:	90 e0       	ldi	r25, 0x00	; 0
    5120:	91 83       	std	Z+1, r25	; 0x01
    5122:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5124:	fe 01       	movw	r30, r28
    5126:	ed 58       	subi	r30, 0x8D	; 141
    5128:	ff 4f       	sbci	r31, 0xFF	; 255
    512a:	80 81       	ld	r24, Z
    512c:	91 81       	ldd	r25, Z+1	; 0x01
    512e:	01 97       	sbiw	r24, 0x01	; 1
    5130:	f1 f7       	brne	.-4      	; 0x512e <main+0x182>
    5132:	fe 01       	movw	r30, r28
    5134:	ed 58       	subi	r30, 0x8D	; 141
    5136:	ff 4f       	sbci	r31, 0xFF	; 255
    5138:	91 83       	std	Z+1, r25	; 0x01
    513a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    513c:	de 01       	movw	r26, r28
    513e:	ab 58       	subi	r26, 0x8B	; 139
    5140:	bf 4f       	sbci	r27, 0xFF	; 255
    5142:	fe 01       	movw	r30, r28
    5144:	eb 58       	subi	r30, 0x8B	; 139
    5146:	ff 4f       	sbci	r31, 0xFF	; 255
    5148:	80 81       	ld	r24, Z
    514a:	91 81       	ldd	r25, Z+1	; 0x01
    514c:	01 97       	sbiw	r24, 0x01	; 1
    514e:	11 96       	adiw	r26, 0x01	; 1
    5150:	9c 93       	st	X, r25
    5152:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5154:	fe 01       	movw	r30, r28
    5156:	eb 58       	subi	r30, 0x8B	; 139
    5158:	ff 4f       	sbci	r31, 0xFF	; 255
    515a:	80 81       	ld	r24, Z
    515c:	91 81       	ldd	r25, Z+1	; 0x01
    515e:	00 97       	sbiw	r24, 0x00	; 0
    5160:	d1 f6       	brne	.-76     	; 0x5116 <main+0x16a>
    5162:	27 c0       	rjmp	.+78     	; 0x51b2 <main+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5164:	8e 01       	movw	r16, r28
    5166:	0b 58       	subi	r16, 0x8B	; 139
    5168:	1f 4f       	sbci	r17, 0xFF	; 255
    516a:	fe 01       	movw	r30, r28
    516c:	e9 58       	subi	r30, 0x89	; 137
    516e:	ff 4f       	sbci	r31, 0xFF	; 255
    5170:	60 81       	ld	r22, Z
    5172:	71 81       	ldd	r23, Z+1	; 0x01
    5174:	82 81       	ldd	r24, Z+2	; 0x02
    5176:	93 81       	ldd	r25, Z+3	; 0x03
    5178:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    517c:	dc 01       	movw	r26, r24
    517e:	cb 01       	movw	r24, r22
    5180:	f8 01       	movw	r30, r16
    5182:	91 83       	std	Z+1, r25	; 0x01
    5184:	80 83       	st	Z, r24
    5186:	de 01       	movw	r26, r28
    5188:	af 58       	subi	r26, 0x8F	; 143
    518a:	bf 4f       	sbci	r27, 0xFF	; 255
    518c:	fe 01       	movw	r30, r28
    518e:	eb 58       	subi	r30, 0x8B	; 139
    5190:	ff 4f       	sbci	r31, 0xFF	; 255
    5192:	80 81       	ld	r24, Z
    5194:	91 81       	ldd	r25, Z+1	; 0x01
    5196:	8d 93       	st	X+, r24
    5198:	9c 93       	st	X, r25
    519a:	fe 01       	movw	r30, r28
    519c:	ef 58       	subi	r30, 0x8F	; 143
    519e:	ff 4f       	sbci	r31, 0xFF	; 255
    51a0:	80 81       	ld	r24, Z
    51a2:	91 81       	ldd	r25, Z+1	; 0x01
    51a4:	01 97       	sbiw	r24, 0x01	; 1
    51a6:	f1 f7       	brne	.-4      	; 0x51a4 <main+0x1f8>
    51a8:	fe 01       	movw	r30, r28
    51aa:	ef 58       	subi	r30, 0x8F	; 143
    51ac:	ff 4f       	sbci	r31, 0xFF	; 255
    51ae:	91 83       	std	Z+1, r25	; 0x01
    51b0:	80 83       	st	Z, r24
_delay_ms(350);
LCDClear();
    51b2:	81 e0       	ldi	r24, 0x01	; 1
    51b4:	60 e0       	ldi	r22, 0x00	; 0
    51b6:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCDByte>
LCDInit(LS_BLINK);
    51ba:	81 e0       	ldi	r24, 0x01	; 1
    51bc:	0e 94 a4 22 	call	0x4548	; 0x4548 <LCDInit>
LCDWriteStringXY(2,0,"RFID Reader");
    51c0:	82 e0       	ldi	r24, 0x02	; 2
    51c2:	60 e0       	ldi	r22, 0x00	; 0
    51c4:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <LCDGotoXY>
    51c8:	8a e0       	ldi	r24, 0x0A	; 10
    51ca:	92 e0       	ldi	r25, 0x02	; 2
    51cc:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <LCDWriteString>
LCDWriteStringXY(5,1,VERSION_STR);
    51d0:	85 e0       	ldi	r24, 0x05	; 5
    51d2:	61 e0       	ldi	r22, 0x01	; 1
    51d4:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <LCDGotoXY>
    51d8:	86 e1       	ldi	r24, 0x16	; 22
    51da:	92 e0       	ldi	r25, 0x02	; 2
    51dc:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <LCDWriteString>


spi_init();
    51e0:	0e 94 83 32 	call	0x6506	; 0x6506 <spi_init>
    51e4:	fe 01       	movw	r30, r28
    51e6:	e3 59       	subi	r30, 0x93	; 147
    51e8:	ff 4f       	sbci	r31, 0xFF	; 255
    51ea:	80 e0       	ldi	r24, 0x00	; 0
    51ec:	90 e0       	ldi	r25, 0x00	; 0
    51ee:	aa e7       	ldi	r26, 0x7A	; 122
    51f0:	b4 e4       	ldi	r27, 0x44	; 68
    51f2:	80 83       	st	Z, r24
    51f4:	91 83       	std	Z+1, r25	; 0x01
    51f6:	a2 83       	std	Z+2, r26	; 0x02
    51f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51fa:	8e 01       	movw	r16, r28
    51fc:	07 59       	subi	r16, 0x97	; 151
    51fe:	1f 4f       	sbci	r17, 0xFF	; 255
    5200:	fe 01       	movw	r30, r28
    5202:	e3 59       	subi	r30, 0x93	; 147
    5204:	ff 4f       	sbci	r31, 0xFF	; 255
    5206:	60 81       	ld	r22, Z
    5208:	71 81       	ldd	r23, Z+1	; 0x01
    520a:	82 81       	ldd	r24, Z+2	; 0x02
    520c:	93 81       	ldd	r25, Z+3	; 0x03
    520e:	20 e0       	ldi	r18, 0x00	; 0
    5210:	30 e0       	ldi	r19, 0x00	; 0
    5212:	4a ef       	ldi	r20, 0xFA	; 250
    5214:	54 e4       	ldi	r21, 0x44	; 68
    5216:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    521a:	dc 01       	movw	r26, r24
    521c:	cb 01       	movw	r24, r22
    521e:	f8 01       	movw	r30, r16
    5220:	80 83       	st	Z, r24
    5222:	91 83       	std	Z+1, r25	; 0x01
    5224:	a2 83       	std	Z+2, r26	; 0x02
    5226:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5228:	fe 01       	movw	r30, r28
    522a:	e7 59       	subi	r30, 0x97	; 151
    522c:	ff 4f       	sbci	r31, 0xFF	; 255
    522e:	60 81       	ld	r22, Z
    5230:	71 81       	ldd	r23, Z+1	; 0x01
    5232:	82 81       	ldd	r24, Z+2	; 0x02
    5234:	93 81       	ldd	r25, Z+3	; 0x03
    5236:	20 e0       	ldi	r18, 0x00	; 0
    5238:	30 e0       	ldi	r19, 0x00	; 0
    523a:	40 e8       	ldi	r20, 0x80	; 128
    523c:	5f e3       	ldi	r21, 0x3F	; 63
    523e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    5242:	88 23       	and	r24, r24
    5244:	44 f4       	brge	.+16     	; 0x5256 <main+0x2aa>
		__ticks = 1;
    5246:	fe 01       	movw	r30, r28
    5248:	e9 59       	subi	r30, 0x99	; 153
    524a:	ff 4f       	sbci	r31, 0xFF	; 255
    524c:	81 e0       	ldi	r24, 0x01	; 1
    524e:	90 e0       	ldi	r25, 0x00	; 0
    5250:	91 83       	std	Z+1, r25	; 0x01
    5252:	80 83       	st	Z, r24
    5254:	64 c0       	rjmp	.+200    	; 0x531e <main+0x372>
	else if (__tmp > 65535)
    5256:	fe 01       	movw	r30, r28
    5258:	e7 59       	subi	r30, 0x97	; 151
    525a:	ff 4f       	sbci	r31, 0xFF	; 255
    525c:	60 81       	ld	r22, Z
    525e:	71 81       	ldd	r23, Z+1	; 0x01
    5260:	82 81       	ldd	r24, Z+2	; 0x02
    5262:	93 81       	ldd	r25, Z+3	; 0x03
    5264:	20 e0       	ldi	r18, 0x00	; 0
    5266:	3f ef       	ldi	r19, 0xFF	; 255
    5268:	4f e7       	ldi	r20, 0x7F	; 127
    526a:	57 e4       	ldi	r21, 0x47	; 71
    526c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    5270:	18 16       	cp	r1, r24
    5272:	0c f0       	brlt	.+2      	; 0x5276 <main+0x2ca>
    5274:	43 c0       	rjmp	.+134    	; 0x52fc <main+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5276:	fe 01       	movw	r30, r28
    5278:	e3 59       	subi	r30, 0x93	; 147
    527a:	ff 4f       	sbci	r31, 0xFF	; 255
    527c:	60 81       	ld	r22, Z
    527e:	71 81       	ldd	r23, Z+1	; 0x01
    5280:	82 81       	ldd	r24, Z+2	; 0x02
    5282:	93 81       	ldd	r25, Z+3	; 0x03
    5284:	20 e0       	ldi	r18, 0x00	; 0
    5286:	30 e0       	ldi	r19, 0x00	; 0
    5288:	40 e2       	ldi	r20, 0x20	; 32
    528a:	51 e4       	ldi	r21, 0x41	; 65
    528c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5290:	dc 01       	movw	r26, r24
    5292:	cb 01       	movw	r24, r22
    5294:	8e 01       	movw	r16, r28
    5296:	09 59       	subi	r16, 0x99	; 153
    5298:	1f 4f       	sbci	r17, 0xFF	; 255
    529a:	bc 01       	movw	r22, r24
    529c:	cd 01       	movw	r24, r26
    529e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    52a2:	dc 01       	movw	r26, r24
    52a4:	cb 01       	movw	r24, r22
    52a6:	f8 01       	movw	r30, r16
    52a8:	91 83       	std	Z+1, r25	; 0x01
    52aa:	80 83       	st	Z, r24
    52ac:	1f c0       	rjmp	.+62     	; 0x52ec <main+0x340>
    52ae:	fe 01       	movw	r30, r28
    52b0:	eb 59       	subi	r30, 0x9B	; 155
    52b2:	ff 4f       	sbci	r31, 0xFF	; 255
    52b4:	88 ec       	ldi	r24, 0xC8	; 200
    52b6:	90 e0       	ldi	r25, 0x00	; 0
    52b8:	91 83       	std	Z+1, r25	; 0x01
    52ba:	80 83       	st	Z, r24
    52bc:	fe 01       	movw	r30, r28
    52be:	eb 59       	subi	r30, 0x9B	; 155
    52c0:	ff 4f       	sbci	r31, 0xFF	; 255
    52c2:	80 81       	ld	r24, Z
    52c4:	91 81       	ldd	r25, Z+1	; 0x01
    52c6:	01 97       	sbiw	r24, 0x01	; 1
    52c8:	f1 f7       	brne	.-4      	; 0x52c6 <main+0x31a>
    52ca:	fe 01       	movw	r30, r28
    52cc:	eb 59       	subi	r30, 0x9B	; 155
    52ce:	ff 4f       	sbci	r31, 0xFF	; 255
    52d0:	91 83       	std	Z+1, r25	; 0x01
    52d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52d4:	de 01       	movw	r26, r28
    52d6:	a9 59       	subi	r26, 0x99	; 153
    52d8:	bf 4f       	sbci	r27, 0xFF	; 255
    52da:	fe 01       	movw	r30, r28
    52dc:	e9 59       	subi	r30, 0x99	; 153
    52de:	ff 4f       	sbci	r31, 0xFF	; 255
    52e0:	80 81       	ld	r24, Z
    52e2:	91 81       	ldd	r25, Z+1	; 0x01
    52e4:	01 97       	sbiw	r24, 0x01	; 1
    52e6:	11 96       	adiw	r26, 0x01	; 1
    52e8:	9c 93       	st	X, r25
    52ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52ec:	fe 01       	movw	r30, r28
    52ee:	e9 59       	subi	r30, 0x99	; 153
    52f0:	ff 4f       	sbci	r31, 0xFF	; 255
    52f2:	80 81       	ld	r24, Z
    52f4:	91 81       	ldd	r25, Z+1	; 0x01
    52f6:	00 97       	sbiw	r24, 0x00	; 0
    52f8:	d1 f6       	brne	.-76     	; 0x52ae <main+0x302>
    52fa:	27 c0       	rjmp	.+78     	; 0x534a <main+0x39e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52fc:	8e 01       	movw	r16, r28
    52fe:	09 59       	subi	r16, 0x99	; 153
    5300:	1f 4f       	sbci	r17, 0xFF	; 255
    5302:	fe 01       	movw	r30, r28
    5304:	e7 59       	subi	r30, 0x97	; 151
    5306:	ff 4f       	sbci	r31, 0xFF	; 255
    5308:	60 81       	ld	r22, Z
    530a:	71 81       	ldd	r23, Z+1	; 0x01
    530c:	82 81       	ldd	r24, Z+2	; 0x02
    530e:	93 81       	ldd	r25, Z+3	; 0x03
    5310:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5314:	dc 01       	movw	r26, r24
    5316:	cb 01       	movw	r24, r22
    5318:	f8 01       	movw	r30, r16
    531a:	91 83       	std	Z+1, r25	; 0x01
    531c:	80 83       	st	Z, r24
    531e:	de 01       	movw	r26, r28
    5320:	ad 59       	subi	r26, 0x9D	; 157
    5322:	bf 4f       	sbci	r27, 0xFF	; 255
    5324:	fe 01       	movw	r30, r28
    5326:	e9 59       	subi	r30, 0x99	; 153
    5328:	ff 4f       	sbci	r31, 0xFF	; 255
    532a:	80 81       	ld	r24, Z
    532c:	91 81       	ldd	r25, Z+1	; 0x01
    532e:	8d 93       	st	X+, r24
    5330:	9c 93       	st	X, r25
    5332:	fe 01       	movw	r30, r28
    5334:	ed 59       	subi	r30, 0x9D	; 157
    5336:	ff 4f       	sbci	r31, 0xFF	; 255
    5338:	80 81       	ld	r24, Z
    533a:	91 81       	ldd	r25, Z+1	; 0x01
    533c:	01 97       	sbiw	r24, 0x01	; 1
    533e:	f1 f7       	brne	.-4      	; 0x533c <main+0x390>
    5340:	fe 01       	movw	r30, r28
    5342:	ed 59       	subi	r30, 0x9D	; 157
    5344:	ff 4f       	sbci	r31, 0xFF	; 255
    5346:	91 83       	std	Z+1, r25	; 0x01
    5348:	80 83       	st	Z, r24
_delay_ms(1000);
LCDClear();
    534a:	81 e0       	ldi	r24, 0x01	; 1
    534c:	60 e0       	ldi	r22, 0x00	; 0
    534e:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCDByte>

//init reader
mfrc522_init();
    5352:	0e 94 fb 2f 	call	0x5ff6	; 0x5ff6 <mfrc522_init>

//check version of the reader
byte = mfrc522_read(VersionReg);
    5356:	87 e3       	ldi	r24, 0x37	; 55
    5358:	0e 94 59 30 	call	0x60b2	; 0x60b2 <mfrc522_read>
    535c:	fe 01       	movw	r30, r28
    535e:	e0 58       	subi	r30, 0x80	; 128
    5360:	ff 4f       	sbci	r31, 0xFF	; 255
    5362:	80 83       	st	Z, r24
if(byte == 0x92)
    5364:	fe 01       	movw	r30, r28
    5366:	e0 58       	subi	r30, 0x80	; 128
    5368:	ff 4f       	sbci	r31, 0xFF	; 255
    536a:	80 81       	ld	r24, Z
    536c:	82 39       	cpi	r24, 0x92	; 146
    536e:	89 f4       	brne	.+34     	; 0x5392 <main+0x3e6>
{
	LCDWriteStringXY(2,0,"MIFARE RC522v2");
    5370:	82 e0       	ldi	r24, 0x02	; 2
    5372:	60 e0       	ldi	r22, 0x00	; 0
    5374:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <LCDGotoXY>
    5378:	8c e1       	ldi	r24, 0x1C	; 28
    537a:	92 e0       	ldi	r25, 0x02	; 2
    537c:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <LCDWriteString>
	LCDWriteStringXY(4,1,"Detected");
    5380:	84 e0       	ldi	r24, 0x04	; 4
    5382:	61 e0       	ldi	r22, 0x01	; 1
    5384:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <LCDGotoXY>
    5388:	8b e2       	ldi	r24, 0x2B	; 43
    538a:	92 e0       	ldi	r25, 0x02	; 2
    538c:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <LCDWriteString>
    5390:	25 c0       	rjmp	.+74     	; 0x53dc <main+0x430>
}else if(byte == 0x91 || byte==0x90)
    5392:	fe 01       	movw	r30, r28
    5394:	e0 58       	subi	r30, 0x80	; 128
    5396:	ff 4f       	sbci	r31, 0xFF	; 255
    5398:	80 81       	ld	r24, Z
    539a:	81 39       	cpi	r24, 0x91	; 145
    539c:	31 f0       	breq	.+12     	; 0x53aa <main+0x3fe>
    539e:	fe 01       	movw	r30, r28
    53a0:	e0 58       	subi	r30, 0x80	; 128
    53a2:	ff 4f       	sbci	r31, 0xFF	; 255
    53a4:	80 81       	ld	r24, Z
    53a6:	80 39       	cpi	r24, 0x90	; 144
    53a8:	89 f4       	brne	.+34     	; 0x53cc <main+0x420>
{
	LCDWriteStringXY(2,0,"MIFARE RC522v1");
    53aa:	82 e0       	ldi	r24, 0x02	; 2
    53ac:	60 e0       	ldi	r22, 0x00	; 0
    53ae:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <LCDGotoXY>
    53b2:	84 e3       	ldi	r24, 0x34	; 52
    53b4:	92 e0       	ldi	r25, 0x02	; 2
    53b6:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <LCDWriteString>
	LCDWriteStringXY(4,1,"Detected");
    53ba:	84 e0       	ldi	r24, 0x04	; 4
    53bc:	61 e0       	ldi	r22, 0x01	; 1
    53be:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <LCDGotoXY>
    53c2:	8b e2       	ldi	r24, 0x2B	; 43
    53c4:	92 e0       	ldi	r25, 0x02	; 2
    53c6:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <LCDWriteString>
    53ca:	08 c0       	rjmp	.+16     	; 0x53dc <main+0x430>
}else
{
	LCDWriteStringXY(0,0,"No reader found");
    53cc:	80 e0       	ldi	r24, 0x00	; 0
    53ce:	60 e0       	ldi	r22, 0x00	; 0
    53d0:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <LCDGotoXY>
    53d4:	83 e4       	ldi	r24, 0x43	; 67
    53d6:	92 e0       	ldi	r25, 0x02	; 2
    53d8:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <LCDWriteString>
}

byte = mfrc522_read(ComIEnReg);
    53dc:	82 e0       	ldi	r24, 0x02	; 2
    53de:	0e 94 59 30 	call	0x60b2	; 0x60b2 <mfrc522_read>
    53e2:	fe 01       	movw	r30, r28
    53e4:	e0 58       	subi	r30, 0x80	; 128
    53e6:	ff 4f       	sbci	r31, 0xFF	; 255
    53e8:	80 83       	st	Z, r24
mfrc522_write(ComIEnReg,byte|0x20);
    53ea:	fe 01       	movw	r30, r28
    53ec:	e0 58       	subi	r30, 0x80	; 128
    53ee:	ff 4f       	sbci	r31, 0xFF	; 255
    53f0:	80 81       	ld	r24, Z
    53f2:	98 2f       	mov	r25, r24
    53f4:	90 62       	ori	r25, 0x20	; 32
    53f6:	82 e0       	ldi	r24, 0x02	; 2
    53f8:	69 2f       	mov	r22, r25
    53fa:	0e 94 34 30 	call	0x6068	; 0x6068 <mfrc522_write>
byte = mfrc522_read(DivIEnReg);
    53fe:	83 e0       	ldi	r24, 0x03	; 3
    5400:	0e 94 59 30 	call	0x60b2	; 0x60b2 <mfrc522_read>
    5404:	fe 01       	movw	r30, r28
    5406:	e0 58       	subi	r30, 0x80	; 128
    5408:	ff 4f       	sbci	r31, 0xFF	; 255
    540a:	80 83       	st	Z, r24
mfrc522_write(DivIEnReg,byte|0x80);
    540c:	fe 01       	movw	r30, r28
    540e:	e0 58       	subi	r30, 0x80	; 128
    5410:	ff 4f       	sbci	r31, 0xFF	; 255
    5412:	80 81       	ld	r24, Z
    5414:	98 2f       	mov	r25, r24
    5416:	90 68       	ori	r25, 0x80	; 128
    5418:	83 e0       	ldi	r24, 0x03	; 3
    541a:	69 2f       	mov	r22, r25
    541c:	0e 94 34 30 	call	0x6068	; 0x6068 <mfrc522_write>
    5420:	fe 01       	movw	r30, r28
    5422:	e1 5a       	subi	r30, 0xA1	; 161
    5424:	ff 4f       	sbci	r31, 0xFF	; 255
    5426:	80 e0       	ldi	r24, 0x00	; 0
    5428:	90 e8       	ldi	r25, 0x80	; 128
    542a:	ab eb       	ldi	r26, 0xBB	; 187
    542c:	b4 e4       	ldi	r27, 0x44	; 68
    542e:	80 83       	st	Z, r24
    5430:	91 83       	std	Z+1, r25	; 0x01
    5432:	a2 83       	std	Z+2, r26	; 0x02
    5434:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5436:	8e 01       	movw	r16, r28
    5438:	05 5a       	subi	r16, 0xA5	; 165
    543a:	1f 4f       	sbci	r17, 0xFF	; 255
    543c:	fe 01       	movw	r30, r28
    543e:	e1 5a       	subi	r30, 0xA1	; 161
    5440:	ff 4f       	sbci	r31, 0xFF	; 255
    5442:	60 81       	ld	r22, Z
    5444:	71 81       	ldd	r23, Z+1	; 0x01
    5446:	82 81       	ldd	r24, Z+2	; 0x02
    5448:	93 81       	ldd	r25, Z+3	; 0x03
    544a:	20 e0       	ldi	r18, 0x00	; 0
    544c:	30 e0       	ldi	r19, 0x00	; 0
    544e:	4a ef       	ldi	r20, 0xFA	; 250
    5450:	54 e4       	ldi	r21, 0x44	; 68
    5452:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5456:	dc 01       	movw	r26, r24
    5458:	cb 01       	movw	r24, r22
    545a:	f8 01       	movw	r30, r16
    545c:	80 83       	st	Z, r24
    545e:	91 83       	std	Z+1, r25	; 0x01
    5460:	a2 83       	std	Z+2, r26	; 0x02
    5462:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5464:	fe 01       	movw	r30, r28
    5466:	e5 5a       	subi	r30, 0xA5	; 165
    5468:	ff 4f       	sbci	r31, 0xFF	; 255
    546a:	60 81       	ld	r22, Z
    546c:	71 81       	ldd	r23, Z+1	; 0x01
    546e:	82 81       	ldd	r24, Z+2	; 0x02
    5470:	93 81       	ldd	r25, Z+3	; 0x03
    5472:	20 e0       	ldi	r18, 0x00	; 0
    5474:	30 e0       	ldi	r19, 0x00	; 0
    5476:	40 e8       	ldi	r20, 0x80	; 128
    5478:	5f e3       	ldi	r21, 0x3F	; 63
    547a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    547e:	88 23       	and	r24, r24
    5480:	44 f4       	brge	.+16     	; 0x5492 <main+0x4e6>
		__ticks = 1;
    5482:	fe 01       	movw	r30, r28
    5484:	e7 5a       	subi	r30, 0xA7	; 167
    5486:	ff 4f       	sbci	r31, 0xFF	; 255
    5488:	81 e0       	ldi	r24, 0x01	; 1
    548a:	90 e0       	ldi	r25, 0x00	; 0
    548c:	91 83       	std	Z+1, r25	; 0x01
    548e:	80 83       	st	Z, r24
    5490:	64 c0       	rjmp	.+200    	; 0x555a <main+0x5ae>
	else if (__tmp > 65535)
    5492:	fe 01       	movw	r30, r28
    5494:	e5 5a       	subi	r30, 0xA5	; 165
    5496:	ff 4f       	sbci	r31, 0xFF	; 255
    5498:	60 81       	ld	r22, Z
    549a:	71 81       	ldd	r23, Z+1	; 0x01
    549c:	82 81       	ldd	r24, Z+2	; 0x02
    549e:	93 81       	ldd	r25, Z+3	; 0x03
    54a0:	20 e0       	ldi	r18, 0x00	; 0
    54a2:	3f ef       	ldi	r19, 0xFF	; 255
    54a4:	4f e7       	ldi	r20, 0x7F	; 127
    54a6:	57 e4       	ldi	r21, 0x47	; 71
    54a8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    54ac:	18 16       	cp	r1, r24
    54ae:	0c f0       	brlt	.+2      	; 0x54b2 <main+0x506>
    54b0:	43 c0       	rjmp	.+134    	; 0x5538 <main+0x58c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54b2:	fe 01       	movw	r30, r28
    54b4:	e1 5a       	subi	r30, 0xA1	; 161
    54b6:	ff 4f       	sbci	r31, 0xFF	; 255
    54b8:	60 81       	ld	r22, Z
    54ba:	71 81       	ldd	r23, Z+1	; 0x01
    54bc:	82 81       	ldd	r24, Z+2	; 0x02
    54be:	93 81       	ldd	r25, Z+3	; 0x03
    54c0:	20 e0       	ldi	r18, 0x00	; 0
    54c2:	30 e0       	ldi	r19, 0x00	; 0
    54c4:	40 e2       	ldi	r20, 0x20	; 32
    54c6:	51 e4       	ldi	r21, 0x41	; 65
    54c8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    54cc:	dc 01       	movw	r26, r24
    54ce:	cb 01       	movw	r24, r22
    54d0:	8e 01       	movw	r16, r28
    54d2:	07 5a       	subi	r16, 0xA7	; 167
    54d4:	1f 4f       	sbci	r17, 0xFF	; 255
    54d6:	bc 01       	movw	r22, r24
    54d8:	cd 01       	movw	r24, r26
    54da:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    54de:	dc 01       	movw	r26, r24
    54e0:	cb 01       	movw	r24, r22
    54e2:	f8 01       	movw	r30, r16
    54e4:	91 83       	std	Z+1, r25	; 0x01
    54e6:	80 83       	st	Z, r24
    54e8:	1f c0       	rjmp	.+62     	; 0x5528 <main+0x57c>
    54ea:	fe 01       	movw	r30, r28
    54ec:	e9 5a       	subi	r30, 0xA9	; 169
    54ee:	ff 4f       	sbci	r31, 0xFF	; 255
    54f0:	88 ec       	ldi	r24, 0xC8	; 200
    54f2:	90 e0       	ldi	r25, 0x00	; 0
    54f4:	91 83       	std	Z+1, r25	; 0x01
    54f6:	80 83       	st	Z, r24
    54f8:	fe 01       	movw	r30, r28
    54fa:	e9 5a       	subi	r30, 0xA9	; 169
    54fc:	ff 4f       	sbci	r31, 0xFF	; 255
    54fe:	80 81       	ld	r24, Z
    5500:	91 81       	ldd	r25, Z+1	; 0x01
    5502:	01 97       	sbiw	r24, 0x01	; 1
    5504:	f1 f7       	brne	.-4      	; 0x5502 <main+0x556>
    5506:	fe 01       	movw	r30, r28
    5508:	e9 5a       	subi	r30, 0xA9	; 169
    550a:	ff 4f       	sbci	r31, 0xFF	; 255
    550c:	91 83       	std	Z+1, r25	; 0x01
    550e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5510:	de 01       	movw	r26, r28
    5512:	a7 5a       	subi	r26, 0xA7	; 167
    5514:	bf 4f       	sbci	r27, 0xFF	; 255
    5516:	fe 01       	movw	r30, r28
    5518:	e7 5a       	subi	r30, 0xA7	; 167
    551a:	ff 4f       	sbci	r31, 0xFF	; 255
    551c:	80 81       	ld	r24, Z
    551e:	91 81       	ldd	r25, Z+1	; 0x01
    5520:	01 97       	sbiw	r24, 0x01	; 1
    5522:	11 96       	adiw	r26, 0x01	; 1
    5524:	9c 93       	st	X, r25
    5526:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5528:	fe 01       	movw	r30, r28
    552a:	e7 5a       	subi	r30, 0xA7	; 167
    552c:	ff 4f       	sbci	r31, 0xFF	; 255
    552e:	80 81       	ld	r24, Z
    5530:	91 81       	ldd	r25, Z+1	; 0x01
    5532:	00 97       	sbiw	r24, 0x00	; 0
    5534:	d1 f6       	brne	.-76     	; 0x54ea <main+0x53e>
    5536:	27 c0       	rjmp	.+78     	; 0x5586 <main+0x5da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5538:	8e 01       	movw	r16, r28
    553a:	07 5a       	subi	r16, 0xA7	; 167
    553c:	1f 4f       	sbci	r17, 0xFF	; 255
    553e:	fe 01       	movw	r30, r28
    5540:	e5 5a       	subi	r30, 0xA5	; 165
    5542:	ff 4f       	sbci	r31, 0xFF	; 255
    5544:	60 81       	ld	r22, Z
    5546:	71 81       	ldd	r23, Z+1	; 0x01
    5548:	82 81       	ldd	r24, Z+2	; 0x02
    554a:	93 81       	ldd	r25, Z+3	; 0x03
    554c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5550:	dc 01       	movw	r26, r24
    5552:	cb 01       	movw	r24, r22
    5554:	f8 01       	movw	r30, r16
    5556:	91 83       	std	Z+1, r25	; 0x01
    5558:	80 83       	st	Z, r24
    555a:	de 01       	movw	r26, r28
    555c:	ab 5a       	subi	r26, 0xAB	; 171
    555e:	bf 4f       	sbci	r27, 0xFF	; 255
    5560:	fe 01       	movw	r30, r28
    5562:	e7 5a       	subi	r30, 0xA7	; 167
    5564:	ff 4f       	sbci	r31, 0xFF	; 255
    5566:	80 81       	ld	r24, Z
    5568:	91 81       	ldd	r25, Z+1	; 0x01
    556a:	8d 93       	st	X+, r24
    556c:	9c 93       	st	X, r25
    556e:	fe 01       	movw	r30, r28
    5570:	eb 5a       	subi	r30, 0xAB	; 171
    5572:	ff 4f       	sbci	r31, 0xFF	; 255
    5574:	80 81       	ld	r24, Z
    5576:	91 81       	ldd	r25, Z+1	; 0x01
    5578:	01 97       	sbiw	r24, 0x01	; 1
    557a:	f1 f7       	brne	.-4      	; 0x5578 <main+0x5cc>
    557c:	fe 01       	movw	r30, r28
    557e:	eb 5a       	subi	r30, 0xAB	; 171
    5580:	ff 4f       	sbci	r31, 0xFF	; 255
    5582:	91 83       	std	Z+1, r25	; 0x01
    5584:	80 83       	st	Z, r24

_delay_ms(1500);
LCDClear();
    5586:	81 e0       	ldi	r24, 0x01	; 1
    5588:	60 e0       	ldi	r22, 0x00	; 0
    558a:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCDByte>
LCDWriteStringXY(2,0,"Initializing memory");
    558e:	82 e0       	ldi	r24, 0x02	; 2
    5590:	60 e0       	ldi	r22, 0x00	; 0
    5592:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <LCDGotoXY>
    5596:	83 e5       	ldi	r24, 0x53	; 83
    5598:	92 e0       	ldi	r25, 0x02	; 2
    559a:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <LCDWriteString>
    559e:	fe 01       	movw	r30, r28
    55a0:	ef 5a       	subi	r30, 0xAF	; 175
    55a2:	ff 4f       	sbci	r31, 0xFF	; 255
    55a4:	80 e0       	ldi	r24, 0x00	; 0
    55a6:	90 e0       	ldi	r25, 0x00	; 0
    55a8:	a6 e9       	ldi	r26, 0x96	; 150
    55aa:	b3 e4       	ldi	r27, 0x43	; 67
    55ac:	80 83       	st	Z, r24
    55ae:	91 83       	std	Z+1, r25	; 0x01
    55b0:	a2 83       	std	Z+2, r26	; 0x02
    55b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55b4:	8e 01       	movw	r16, r28
    55b6:	03 5b       	subi	r16, 0xB3	; 179
    55b8:	1f 4f       	sbci	r17, 0xFF	; 255
    55ba:	fe 01       	movw	r30, r28
    55bc:	ef 5a       	subi	r30, 0xAF	; 175
    55be:	ff 4f       	sbci	r31, 0xFF	; 255
    55c0:	60 81       	ld	r22, Z
    55c2:	71 81       	ldd	r23, Z+1	; 0x01
    55c4:	82 81       	ldd	r24, Z+2	; 0x02
    55c6:	93 81       	ldd	r25, Z+3	; 0x03
    55c8:	20 e0       	ldi	r18, 0x00	; 0
    55ca:	30 e0       	ldi	r19, 0x00	; 0
    55cc:	4a ef       	ldi	r20, 0xFA	; 250
    55ce:	54 e4       	ldi	r21, 0x44	; 68
    55d0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    55d4:	dc 01       	movw	r26, r24
    55d6:	cb 01       	movw	r24, r22
    55d8:	f8 01       	movw	r30, r16
    55da:	80 83       	st	Z, r24
    55dc:	91 83       	std	Z+1, r25	; 0x01
    55de:	a2 83       	std	Z+2, r26	; 0x02
    55e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    55e2:	fe 01       	movw	r30, r28
    55e4:	e3 5b       	subi	r30, 0xB3	; 179
    55e6:	ff 4f       	sbci	r31, 0xFF	; 255
    55e8:	60 81       	ld	r22, Z
    55ea:	71 81       	ldd	r23, Z+1	; 0x01
    55ec:	82 81       	ldd	r24, Z+2	; 0x02
    55ee:	93 81       	ldd	r25, Z+3	; 0x03
    55f0:	20 e0       	ldi	r18, 0x00	; 0
    55f2:	30 e0       	ldi	r19, 0x00	; 0
    55f4:	40 e8       	ldi	r20, 0x80	; 128
    55f6:	5f e3       	ldi	r21, 0x3F	; 63
    55f8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    55fc:	88 23       	and	r24, r24
    55fe:	44 f4       	brge	.+16     	; 0x5610 <main+0x664>
		__ticks = 1;
    5600:	fe 01       	movw	r30, r28
    5602:	e5 5b       	subi	r30, 0xB5	; 181
    5604:	ff 4f       	sbci	r31, 0xFF	; 255
    5606:	81 e0       	ldi	r24, 0x01	; 1
    5608:	90 e0       	ldi	r25, 0x00	; 0
    560a:	91 83       	std	Z+1, r25	; 0x01
    560c:	80 83       	st	Z, r24
    560e:	64 c0       	rjmp	.+200    	; 0x56d8 <main+0x72c>
	else if (__tmp > 65535)
    5610:	fe 01       	movw	r30, r28
    5612:	e3 5b       	subi	r30, 0xB3	; 179
    5614:	ff 4f       	sbci	r31, 0xFF	; 255
    5616:	60 81       	ld	r22, Z
    5618:	71 81       	ldd	r23, Z+1	; 0x01
    561a:	82 81       	ldd	r24, Z+2	; 0x02
    561c:	93 81       	ldd	r25, Z+3	; 0x03
    561e:	20 e0       	ldi	r18, 0x00	; 0
    5620:	3f ef       	ldi	r19, 0xFF	; 255
    5622:	4f e7       	ldi	r20, 0x7F	; 127
    5624:	57 e4       	ldi	r21, 0x47	; 71
    5626:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    562a:	18 16       	cp	r1, r24
    562c:	0c f0       	brlt	.+2      	; 0x5630 <main+0x684>
    562e:	43 c0       	rjmp	.+134    	; 0x56b6 <main+0x70a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5630:	fe 01       	movw	r30, r28
    5632:	ef 5a       	subi	r30, 0xAF	; 175
    5634:	ff 4f       	sbci	r31, 0xFF	; 255
    5636:	60 81       	ld	r22, Z
    5638:	71 81       	ldd	r23, Z+1	; 0x01
    563a:	82 81       	ldd	r24, Z+2	; 0x02
    563c:	93 81       	ldd	r25, Z+3	; 0x03
    563e:	20 e0       	ldi	r18, 0x00	; 0
    5640:	30 e0       	ldi	r19, 0x00	; 0
    5642:	40 e2       	ldi	r20, 0x20	; 32
    5644:	51 e4       	ldi	r21, 0x41	; 65
    5646:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    564a:	dc 01       	movw	r26, r24
    564c:	cb 01       	movw	r24, r22
    564e:	8e 01       	movw	r16, r28
    5650:	05 5b       	subi	r16, 0xB5	; 181
    5652:	1f 4f       	sbci	r17, 0xFF	; 255
    5654:	bc 01       	movw	r22, r24
    5656:	cd 01       	movw	r24, r26
    5658:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    565c:	dc 01       	movw	r26, r24
    565e:	cb 01       	movw	r24, r22
    5660:	f8 01       	movw	r30, r16
    5662:	91 83       	std	Z+1, r25	; 0x01
    5664:	80 83       	st	Z, r24
    5666:	1f c0       	rjmp	.+62     	; 0x56a6 <main+0x6fa>
    5668:	fe 01       	movw	r30, r28
    566a:	e7 5b       	subi	r30, 0xB7	; 183
    566c:	ff 4f       	sbci	r31, 0xFF	; 255
    566e:	88 ec       	ldi	r24, 0xC8	; 200
    5670:	90 e0       	ldi	r25, 0x00	; 0
    5672:	91 83       	std	Z+1, r25	; 0x01
    5674:	80 83       	st	Z, r24
    5676:	fe 01       	movw	r30, r28
    5678:	e7 5b       	subi	r30, 0xB7	; 183
    567a:	ff 4f       	sbci	r31, 0xFF	; 255
    567c:	80 81       	ld	r24, Z
    567e:	91 81       	ldd	r25, Z+1	; 0x01
    5680:	01 97       	sbiw	r24, 0x01	; 1
    5682:	f1 f7       	brne	.-4      	; 0x5680 <main+0x6d4>
    5684:	fe 01       	movw	r30, r28
    5686:	e7 5b       	subi	r30, 0xB7	; 183
    5688:	ff 4f       	sbci	r31, 0xFF	; 255
    568a:	91 83       	std	Z+1, r25	; 0x01
    568c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    568e:	de 01       	movw	r26, r28
    5690:	a5 5b       	subi	r26, 0xB5	; 181
    5692:	bf 4f       	sbci	r27, 0xFF	; 255
    5694:	fe 01       	movw	r30, r28
    5696:	e5 5b       	subi	r30, 0xB5	; 181
    5698:	ff 4f       	sbci	r31, 0xFF	; 255
    569a:	80 81       	ld	r24, Z
    569c:	91 81       	ldd	r25, Z+1	; 0x01
    569e:	01 97       	sbiw	r24, 0x01	; 1
    56a0:	11 96       	adiw	r26, 0x01	; 1
    56a2:	9c 93       	st	X, r25
    56a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56a6:	fe 01       	movw	r30, r28
    56a8:	e5 5b       	subi	r30, 0xB5	; 181
    56aa:	ff 4f       	sbci	r31, 0xFF	; 255
    56ac:	80 81       	ld	r24, Z
    56ae:	91 81       	ldd	r25, Z+1	; 0x01
    56b0:	00 97       	sbiw	r24, 0x00	; 0
    56b2:	d1 f6       	brne	.-76     	; 0x5668 <main+0x6bc>
    56b4:	27 c0       	rjmp	.+78     	; 0x5704 <main+0x758>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56b6:	8e 01       	movw	r16, r28
    56b8:	05 5b       	subi	r16, 0xB5	; 181
    56ba:	1f 4f       	sbci	r17, 0xFF	; 255
    56bc:	fe 01       	movw	r30, r28
    56be:	e3 5b       	subi	r30, 0xB3	; 179
    56c0:	ff 4f       	sbci	r31, 0xFF	; 255
    56c2:	60 81       	ld	r22, Z
    56c4:	71 81       	ldd	r23, Z+1	; 0x01
    56c6:	82 81       	ldd	r24, Z+2	; 0x02
    56c8:	93 81       	ldd	r25, Z+3	; 0x03
    56ca:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    56ce:	dc 01       	movw	r26, r24
    56d0:	cb 01       	movw	r24, r22
    56d2:	f8 01       	movw	r30, r16
    56d4:	91 83       	std	Z+1, r25	; 0x01
    56d6:	80 83       	st	Z, r24
    56d8:	de 01       	movw	r26, r28
    56da:	a9 5b       	subi	r26, 0xB9	; 185
    56dc:	bf 4f       	sbci	r27, 0xFF	; 255
    56de:	fe 01       	movw	r30, r28
    56e0:	e5 5b       	subi	r30, 0xB5	; 181
    56e2:	ff 4f       	sbci	r31, 0xFF	; 255
    56e4:	80 81       	ld	r24, Z
    56e6:	91 81       	ldd	r25, Z+1	; 0x01
    56e8:	8d 93       	st	X+, r24
    56ea:	9c 93       	st	X, r25
    56ec:	fe 01       	movw	r30, r28
    56ee:	e9 5b       	subi	r30, 0xB9	; 185
    56f0:	ff 4f       	sbci	r31, 0xFF	; 255
    56f2:	80 81       	ld	r24, Z
    56f4:	91 81       	ldd	r25, Z+1	; 0x01
    56f6:	01 97       	sbiw	r24, 0x01	; 1
    56f8:	f1 f7       	brne	.-4      	; 0x56f6 <main+0x74a>
    56fa:	fe 01       	movw	r30, r28
    56fc:	e9 5b       	subi	r30, 0xB9	; 185
    56fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5700:	91 83       	std	Z+1, r25	; 0x01
    5702:	80 83       	st	Z, r24
_delay_ms(300);
EEpromInit();
    5704:	0e 94 bc 0c 	call	0x1978	; 0x1978 <EEpromInit>
LCDClear();
    5708:	81 e0       	ldi	r24, 0x01	; 1
    570a:	60 e0       	ldi	r22, 0x00	; 0
    570c:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCDByte>
activate(gsm);
    5710:	81 e0       	ldi	r24, 0x01	; 1
    5712:	90 e0       	ldi	r25, 0x00	; 0
    5714:	0e 94 67 27 	call	0x4ece	; 0x4ece <activate>
LCDWriteStringXY(2,0,"Initializing GSM");
    5718:	82 e0       	ldi	r24, 0x02	; 2
    571a:	60 e0       	ldi	r22, 0x00	; 0
    571c:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <LCDGotoXY>
    5720:	87 e6       	ldi	r24, 0x67	; 103
    5722:	92 e0       	ldi	r25, 0x02	; 2
    5724:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <LCDWriteString>


char _buffer[150];
	USART_Init(19200);							/* Initiate USART with 19200 baud rate */
    5728:	60 e0       	ldi	r22, 0x00	; 0
    572a:	7b e4       	ldi	r23, 0x4B	; 75
    572c:	80 e0       	ldi	r24, 0x00	; 0
    572e:	90 e0       	ldi	r25, 0x00	; 0
    5730:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <USART_Init>
	sei();										/* Start global interrupt */
    5734:	78 94       	sei
	while(!SIM900HTTP_Start());
    5736:	0e 94 68 13 	call	0x26d0	; 0x26d0 <SIM900HTTP_Start>
    573a:	91 e0       	ldi	r25, 0x01	; 1
    573c:	89 27       	eor	r24, r25
    573e:	88 23       	and	r24, r24
    5740:	d1 f7       	brne	.-12     	; 0x5736 <main+0x78a>
	while(!(SIM900HTTP_Connect(APN, USERNAME, PASSWORD)));
    5742:	88 e7       	ldi	r24, 0x78	; 120
    5744:	92 e0       	ldi	r25, 0x02	; 2
    5746:	21 e8       	ldi	r18, 0x81	; 129
    5748:	32 e0       	ldi	r19, 0x02	; 2
    574a:	42 e8       	ldi	r20, 0x82	; 130
    574c:	52 e0       	ldi	r21, 0x02	; 2
    574e:	b9 01       	movw	r22, r18
    5750:	0e 94 98 13 	call	0x2730	; 0x2730 <SIM900HTTP_Connect>
    5754:	98 2f       	mov	r25, r24
    5756:	81 e0       	ldi	r24, 0x01	; 1
    5758:	89 27       	eor	r24, r25
    575a:	88 23       	and	r24, r24
    575c:	91 f7       	brne	.-28     	; 0x5742 <main+0x796>
	SIM900HTTP_Init();
    575e:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <SIM900HTTP_Init>
    5762:	fe 01       	movw	r30, r28
    5764:	ed 5b       	subi	r30, 0xBD	; 189
    5766:	ff 4f       	sbci	r31, 0xFF	; 255
    5768:	80 e0       	ldi	r24, 0x00	; 0
    576a:	90 e0       	ldi	r25, 0x00	; 0
    576c:	a6 e9       	ldi	r26, 0x96	; 150
    576e:	b3 e4       	ldi	r27, 0x43	; 67
    5770:	80 83       	st	Z, r24
    5772:	91 83       	std	Z+1, r25	; 0x01
    5774:	a2 83       	std	Z+2, r26	; 0x02
    5776:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5778:	8e 01       	movw	r16, r28
    577a:	01 5c       	subi	r16, 0xC1	; 193
    577c:	1f 4f       	sbci	r17, 0xFF	; 255
    577e:	fe 01       	movw	r30, r28
    5780:	ed 5b       	subi	r30, 0xBD	; 189
    5782:	ff 4f       	sbci	r31, 0xFF	; 255
    5784:	60 81       	ld	r22, Z
    5786:	71 81       	ldd	r23, Z+1	; 0x01
    5788:	82 81       	ldd	r24, Z+2	; 0x02
    578a:	93 81       	ldd	r25, Z+3	; 0x03
    578c:	20 e0       	ldi	r18, 0x00	; 0
    578e:	30 e0       	ldi	r19, 0x00	; 0
    5790:	4a ef       	ldi	r20, 0xFA	; 250
    5792:	54 e4       	ldi	r21, 0x44	; 68
    5794:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5798:	dc 01       	movw	r26, r24
    579a:	cb 01       	movw	r24, r22
    579c:	f8 01       	movw	r30, r16
    579e:	80 83       	st	Z, r24
    57a0:	91 83       	std	Z+1, r25	; 0x01
    57a2:	a2 83       	std	Z+2, r26	; 0x02
    57a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    57a6:	fe 01       	movw	r30, r28
    57a8:	ff 96       	adiw	r30, 0x3f	; 63
    57aa:	60 81       	ld	r22, Z
    57ac:	71 81       	ldd	r23, Z+1	; 0x01
    57ae:	82 81       	ldd	r24, Z+2	; 0x02
    57b0:	93 81       	ldd	r25, Z+3	; 0x03
    57b2:	20 e0       	ldi	r18, 0x00	; 0
    57b4:	30 e0       	ldi	r19, 0x00	; 0
    57b6:	40 e8       	ldi	r20, 0x80	; 128
    57b8:	5f e3       	ldi	r21, 0x3F	; 63
    57ba:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    57be:	88 23       	and	r24, r24
    57c0:	2c f4       	brge	.+10     	; 0x57cc <main+0x820>
		__ticks = 1;
    57c2:	81 e0       	ldi	r24, 0x01	; 1
    57c4:	90 e0       	ldi	r25, 0x00	; 0
    57c6:	9e af       	std	Y+62, r25	; 0x3e
    57c8:	8d af       	std	Y+61, r24	; 0x3d
    57ca:	46 c0       	rjmp	.+140    	; 0x5858 <main+0x8ac>
	else if (__tmp > 65535)
    57cc:	fe 01       	movw	r30, r28
    57ce:	ff 96       	adiw	r30, 0x3f	; 63
    57d0:	60 81       	ld	r22, Z
    57d2:	71 81       	ldd	r23, Z+1	; 0x01
    57d4:	82 81       	ldd	r24, Z+2	; 0x02
    57d6:	93 81       	ldd	r25, Z+3	; 0x03
    57d8:	20 e0       	ldi	r18, 0x00	; 0
    57da:	3f ef       	ldi	r19, 0xFF	; 255
    57dc:	4f e7       	ldi	r20, 0x7F	; 127
    57de:	57 e4       	ldi	r21, 0x47	; 71
    57e0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    57e4:	18 16       	cp	r1, r24
    57e6:	64 f5       	brge	.+88     	; 0x5840 <main+0x894>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57e8:	fe 01       	movw	r30, r28
    57ea:	ed 5b       	subi	r30, 0xBD	; 189
    57ec:	ff 4f       	sbci	r31, 0xFF	; 255
    57ee:	60 81       	ld	r22, Z
    57f0:	71 81       	ldd	r23, Z+1	; 0x01
    57f2:	82 81       	ldd	r24, Z+2	; 0x02
    57f4:	93 81       	ldd	r25, Z+3	; 0x03
    57f6:	20 e0       	ldi	r18, 0x00	; 0
    57f8:	30 e0       	ldi	r19, 0x00	; 0
    57fa:	40 e2       	ldi	r20, 0x20	; 32
    57fc:	51 e4       	ldi	r21, 0x41	; 65
    57fe:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5802:	dc 01       	movw	r26, r24
    5804:	cb 01       	movw	r24, r22
    5806:	bc 01       	movw	r22, r24
    5808:	cd 01       	movw	r24, r26
    580a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    580e:	dc 01       	movw	r26, r24
    5810:	cb 01       	movw	r24, r22
    5812:	9e af       	std	Y+62, r25	; 0x3e
    5814:	8d af       	std	Y+61, r24	; 0x3d
    5816:	0f c0       	rjmp	.+30     	; 0x5836 <main+0x88a>
    5818:	88 ec       	ldi	r24, 0xC8	; 200
    581a:	90 e0       	ldi	r25, 0x00	; 0
    581c:	9c af       	std	Y+60, r25	; 0x3c
    581e:	8b af       	std	Y+59, r24	; 0x3b
    5820:	8b ad       	ldd	r24, Y+59	; 0x3b
    5822:	9c ad       	ldd	r25, Y+60	; 0x3c
    5824:	01 97       	sbiw	r24, 0x01	; 1
    5826:	f1 f7       	brne	.-4      	; 0x5824 <main+0x878>
    5828:	9c af       	std	Y+60, r25	; 0x3c
    582a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    582c:	8d ad       	ldd	r24, Y+61	; 0x3d
    582e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5830:	01 97       	sbiw	r24, 0x01	; 1
    5832:	9e af       	std	Y+62, r25	; 0x3e
    5834:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5836:	8d ad       	ldd	r24, Y+61	; 0x3d
    5838:	9e ad       	ldd	r25, Y+62	; 0x3e
    583a:	00 97       	sbiw	r24, 0x00	; 0
    583c:	69 f7       	brne	.-38     	; 0x5818 <main+0x86c>
    583e:	16 c0       	rjmp	.+44     	; 0x586c <main+0x8c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5840:	fe 01       	movw	r30, r28
    5842:	ff 96       	adiw	r30, 0x3f	; 63
    5844:	60 81       	ld	r22, Z
    5846:	71 81       	ldd	r23, Z+1	; 0x01
    5848:	82 81       	ldd	r24, Z+2	; 0x02
    584a:	93 81       	ldd	r25, Z+3	; 0x03
    584c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5850:	dc 01       	movw	r26, r24
    5852:	cb 01       	movw	r24, r22
    5854:	9e af       	std	Y+62, r25	; 0x3e
    5856:	8d af       	std	Y+61, r24	; 0x3d
    5858:	8d ad       	ldd	r24, Y+61	; 0x3d
    585a:	9e ad       	ldd	r25, Y+62	; 0x3e
    585c:	9a af       	std	Y+58, r25	; 0x3a
    585e:	89 af       	std	Y+57, r24	; 0x39
    5860:	89 ad       	ldd	r24, Y+57	; 0x39
    5862:	9a ad       	ldd	r25, Y+58	; 0x3a
    5864:	01 97       	sbiw	r24, 0x01	; 1
    5866:	f1 f7       	brne	.-4      	; 0x5864 <main+0x8b8>
    5868:	9a af       	std	Y+58, r25	; 0x3a
    586a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(300);
	LCDClear();
    586c:	81 e0       	ldi	r24, 0x01	; 1
    586e:	60 e0       	ldi	r22, 0x00	; 0
    5870:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCDByte>
	activate(gps);
    5874:	82 e0       	ldi	r24, 0x02	; 2
    5876:	90 e0       	ldi	r25, 0x00	; 0
    5878:	0e 94 67 27 	call	0x4ece	; 0x4ece <activate>
	LCDWriteStringXY(2,0,"Initializing GPS");
    587c:	82 e0       	ldi	r24, 0x02	; 2
    587e:	60 e0       	ldi	r22, 0x00	; 0
    5880:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <LCDGotoXY>
    5884:	8b e8       	ldi	r24, 0x8B	; 139
    5886:	92 e0       	ldi	r25, 0x02	; 2
    5888:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <LCDWriteString>

		memset(GGA_Buffer, 0, Buffer_Size);
    588c:	85 e3       	ldi	r24, 0x35	; 53
    588e:	95 e0       	ldi	r25, 0x05	; 5
    5890:	60 e0       	ldi	r22, 0x00	; 0
    5892:	70 e0       	ldi	r23, 0x00	; 0
    5894:	46 e9       	ldi	r20, 0x96	; 150
    5896:	50 e0       	ldi	r21, 0x00	; 0
    5898:	0e 94 9a 3a 	call	0x7534	; 0x7534 <memset>
		memset(degrees_buffer,0,degrees_buffer_size);
    589c:	8b ec       	ldi	r24, 0xCB	; 203
    589e:	95 e0       	ldi	r25, 0x05	; 5
    58a0:	60 e0       	ldi	r22, 0x00	; 0
    58a2:	70 e0       	ldi	r23, 0x00	; 0
    58a4:	44 e1       	ldi	r20, 0x14	; 20
    58a6:	50 e0       	ldi	r21, 0x00	; 0
    58a8:	0e 94 9a 3a 	call	0x7534	; 0x7534 <memset>
    58ac:	80 e0       	ldi	r24, 0x00	; 0
    58ae:	90 e8       	ldi	r25, 0x80	; 128
    58b0:	ab e3       	ldi	r26, 0x3B	; 59
    58b2:	b5 e4       	ldi	r27, 0x45	; 69
    58b4:	8d ab       	std	Y+53, r24	; 0x35
    58b6:	9e ab       	std	Y+54, r25	; 0x36
    58b8:	af ab       	std	Y+55, r26	; 0x37
    58ba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58bc:	6d a9       	ldd	r22, Y+53	; 0x35
    58be:	7e a9       	ldd	r23, Y+54	; 0x36
    58c0:	8f a9       	ldd	r24, Y+55	; 0x37
    58c2:	98 ad       	ldd	r25, Y+56	; 0x38
    58c4:	20 e0       	ldi	r18, 0x00	; 0
    58c6:	30 e0       	ldi	r19, 0x00	; 0
    58c8:	4a ef       	ldi	r20, 0xFA	; 250
    58ca:	54 e4       	ldi	r21, 0x44	; 68
    58cc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    58d0:	dc 01       	movw	r26, r24
    58d2:	cb 01       	movw	r24, r22
    58d4:	89 ab       	std	Y+49, r24	; 0x31
    58d6:	9a ab       	std	Y+50, r25	; 0x32
    58d8:	ab ab       	std	Y+51, r26	; 0x33
    58da:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    58dc:	69 a9       	ldd	r22, Y+49	; 0x31
    58de:	7a a9       	ldd	r23, Y+50	; 0x32
    58e0:	8b a9       	ldd	r24, Y+51	; 0x33
    58e2:	9c a9       	ldd	r25, Y+52	; 0x34
    58e4:	20 e0       	ldi	r18, 0x00	; 0
    58e6:	30 e0       	ldi	r19, 0x00	; 0
    58e8:	40 e8       	ldi	r20, 0x80	; 128
    58ea:	5f e3       	ldi	r21, 0x3F	; 63
    58ec:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    58f0:	88 23       	and	r24, r24
    58f2:	2c f4       	brge	.+10     	; 0x58fe <main+0x952>
		__ticks = 1;
    58f4:	81 e0       	ldi	r24, 0x01	; 1
    58f6:	90 e0       	ldi	r25, 0x00	; 0
    58f8:	98 ab       	std	Y+48, r25	; 0x30
    58fa:	8f a7       	std	Y+47, r24	; 0x2f
    58fc:	3f c0       	rjmp	.+126    	; 0x597c <main+0x9d0>
	else if (__tmp > 65535)
    58fe:	69 a9       	ldd	r22, Y+49	; 0x31
    5900:	7a a9       	ldd	r23, Y+50	; 0x32
    5902:	8b a9       	ldd	r24, Y+51	; 0x33
    5904:	9c a9       	ldd	r25, Y+52	; 0x34
    5906:	20 e0       	ldi	r18, 0x00	; 0
    5908:	3f ef       	ldi	r19, 0xFF	; 255
    590a:	4f e7       	ldi	r20, 0x7F	; 127
    590c:	57 e4       	ldi	r21, 0x47	; 71
    590e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    5912:	18 16       	cp	r1, r24
    5914:	4c f5       	brge	.+82     	; 0x5968 <main+0x9bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5916:	6d a9       	ldd	r22, Y+53	; 0x35
    5918:	7e a9       	ldd	r23, Y+54	; 0x36
    591a:	8f a9       	ldd	r24, Y+55	; 0x37
    591c:	98 ad       	ldd	r25, Y+56	; 0x38
    591e:	20 e0       	ldi	r18, 0x00	; 0
    5920:	30 e0       	ldi	r19, 0x00	; 0
    5922:	40 e2       	ldi	r20, 0x20	; 32
    5924:	51 e4       	ldi	r21, 0x41	; 65
    5926:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    592a:	dc 01       	movw	r26, r24
    592c:	cb 01       	movw	r24, r22
    592e:	bc 01       	movw	r22, r24
    5930:	cd 01       	movw	r24, r26
    5932:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5936:	dc 01       	movw	r26, r24
    5938:	cb 01       	movw	r24, r22
    593a:	98 ab       	std	Y+48, r25	; 0x30
    593c:	8f a7       	std	Y+47, r24	; 0x2f
    593e:	0f c0       	rjmp	.+30     	; 0x595e <main+0x9b2>
    5940:	88 ec       	ldi	r24, 0xC8	; 200
    5942:	90 e0       	ldi	r25, 0x00	; 0
    5944:	9e a7       	std	Y+46, r25	; 0x2e
    5946:	8d a7       	std	Y+45, r24	; 0x2d
    5948:	8d a5       	ldd	r24, Y+45	; 0x2d
    594a:	9e a5       	ldd	r25, Y+46	; 0x2e
    594c:	01 97       	sbiw	r24, 0x01	; 1
    594e:	f1 f7       	brne	.-4      	; 0x594c <main+0x9a0>
    5950:	9e a7       	std	Y+46, r25	; 0x2e
    5952:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5954:	8f a5       	ldd	r24, Y+47	; 0x2f
    5956:	98 a9       	ldd	r25, Y+48	; 0x30
    5958:	01 97       	sbiw	r24, 0x01	; 1
    595a:	98 ab       	std	Y+48, r25	; 0x30
    595c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    595e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5960:	98 a9       	ldd	r25, Y+48	; 0x30
    5962:	00 97       	sbiw	r24, 0x00	; 0
    5964:	69 f7       	brne	.-38     	; 0x5940 <main+0x994>
    5966:	14 c0       	rjmp	.+40     	; 0x5990 <main+0x9e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5968:	69 a9       	ldd	r22, Y+49	; 0x31
    596a:	7a a9       	ldd	r23, Y+50	; 0x32
    596c:	8b a9       	ldd	r24, Y+51	; 0x33
    596e:	9c a9       	ldd	r25, Y+52	; 0x34
    5970:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5974:	dc 01       	movw	r26, r24
    5976:	cb 01       	movw	r24, r22
    5978:	98 ab       	std	Y+48, r25	; 0x30
    597a:	8f a7       	std	Y+47, r24	; 0x2f
    597c:	8f a5       	ldd	r24, Y+47	; 0x2f
    597e:	98 a9       	ldd	r25, Y+48	; 0x30
    5980:	9c a7       	std	Y+44, r25	; 0x2c
    5982:	8b a7       	std	Y+43, r24	; 0x2b
    5984:	8b a5       	ldd	r24, Y+43	; 0x2b
    5986:	9c a5       	ldd	r25, Y+44	; 0x2c
    5988:	01 97       	sbiw	r24, 0x01	; 1
    598a:	f1 f7       	brne	.-4      	; 0x5988 <main+0x9dc>
    598c:	9c a7       	std	Y+44, r25	; 0x2c
    598e:	8b a7       	std	Y+43, r24	; 0x2b

	    _delay_ms(3000);                 /* wait for GPS receiver to initialize */
	    USART_Init(9600);                /* initialize USART with 9600 baud rate */
    5990:	60 e8       	ldi	r22, 0x80	; 128
    5992:	75 e2       	ldi	r23, 0x25	; 37
    5994:	80 e0       	ldi	r24, 0x00	; 0
    5996:	90 e0       	ldi	r25, 0x00	; 0
    5998:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <USART_Init>
		sei();
    599c:	78 94       	sei
    599e:	80 e0       	ldi	r24, 0x00	; 0
    59a0:	90 e0       	ldi	r25, 0x00	; 0
    59a2:	a6 e9       	ldi	r26, 0x96	; 150
    59a4:	b3 e4       	ldi	r27, 0x43	; 67
    59a6:	8f a3       	std	Y+39, r24	; 0x27
    59a8:	98 a7       	std	Y+40, r25	; 0x28
    59aa:	a9 a7       	std	Y+41, r26	; 0x29
    59ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59ae:	6f a1       	ldd	r22, Y+39	; 0x27
    59b0:	78 a5       	ldd	r23, Y+40	; 0x28
    59b2:	89 a5       	ldd	r24, Y+41	; 0x29
    59b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    59b6:	20 e0       	ldi	r18, 0x00	; 0
    59b8:	30 e0       	ldi	r19, 0x00	; 0
    59ba:	4a ef       	ldi	r20, 0xFA	; 250
    59bc:	54 e4       	ldi	r21, 0x44	; 68
    59be:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    59c2:	dc 01       	movw	r26, r24
    59c4:	cb 01       	movw	r24, r22
    59c6:	8b a3       	std	Y+35, r24	; 0x23
    59c8:	9c a3       	std	Y+36, r25	; 0x24
    59ca:	ad a3       	std	Y+37, r26	; 0x25
    59cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    59ce:	6b a1       	ldd	r22, Y+35	; 0x23
    59d0:	7c a1       	ldd	r23, Y+36	; 0x24
    59d2:	8d a1       	ldd	r24, Y+37	; 0x25
    59d4:	9e a1       	ldd	r25, Y+38	; 0x26
    59d6:	20 e0       	ldi	r18, 0x00	; 0
    59d8:	30 e0       	ldi	r19, 0x00	; 0
    59da:	40 e8       	ldi	r20, 0x80	; 128
    59dc:	5f e3       	ldi	r21, 0x3F	; 63
    59de:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    59e2:	88 23       	and	r24, r24
    59e4:	2c f4       	brge	.+10     	; 0x59f0 <main+0xa44>
		__ticks = 1;
    59e6:	81 e0       	ldi	r24, 0x01	; 1
    59e8:	90 e0       	ldi	r25, 0x00	; 0
    59ea:	9a a3       	std	Y+34, r25	; 0x22
    59ec:	89 a3       	std	Y+33, r24	; 0x21
    59ee:	3f c0       	rjmp	.+126    	; 0x5a6e <main+0xac2>
	else if (__tmp > 65535)
    59f0:	6b a1       	ldd	r22, Y+35	; 0x23
    59f2:	7c a1       	ldd	r23, Y+36	; 0x24
    59f4:	8d a1       	ldd	r24, Y+37	; 0x25
    59f6:	9e a1       	ldd	r25, Y+38	; 0x26
    59f8:	20 e0       	ldi	r18, 0x00	; 0
    59fa:	3f ef       	ldi	r19, 0xFF	; 255
    59fc:	4f e7       	ldi	r20, 0x7F	; 127
    59fe:	57 e4       	ldi	r21, 0x47	; 71
    5a00:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    5a04:	18 16       	cp	r1, r24
    5a06:	4c f5       	brge	.+82     	; 0x5a5a <main+0xaae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a08:	6f a1       	ldd	r22, Y+39	; 0x27
    5a0a:	78 a5       	ldd	r23, Y+40	; 0x28
    5a0c:	89 a5       	ldd	r24, Y+41	; 0x29
    5a0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5a10:	20 e0       	ldi	r18, 0x00	; 0
    5a12:	30 e0       	ldi	r19, 0x00	; 0
    5a14:	40 e2       	ldi	r20, 0x20	; 32
    5a16:	51 e4       	ldi	r21, 0x41	; 65
    5a18:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5a1c:	dc 01       	movw	r26, r24
    5a1e:	cb 01       	movw	r24, r22
    5a20:	bc 01       	movw	r22, r24
    5a22:	cd 01       	movw	r24, r26
    5a24:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5a28:	dc 01       	movw	r26, r24
    5a2a:	cb 01       	movw	r24, r22
    5a2c:	9a a3       	std	Y+34, r25	; 0x22
    5a2e:	89 a3       	std	Y+33, r24	; 0x21
    5a30:	0f c0       	rjmp	.+30     	; 0x5a50 <main+0xaa4>
    5a32:	88 ec       	ldi	r24, 0xC8	; 200
    5a34:	90 e0       	ldi	r25, 0x00	; 0
    5a36:	98 a3       	std	Y+32, r25	; 0x20
    5a38:	8f 8f       	std	Y+31, r24	; 0x1f
    5a3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5a3c:	98 a1       	ldd	r25, Y+32	; 0x20
    5a3e:	01 97       	sbiw	r24, 0x01	; 1
    5a40:	f1 f7       	brne	.-4      	; 0x5a3e <main+0xa92>
    5a42:	98 a3       	std	Y+32, r25	; 0x20
    5a44:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a46:	89 a1       	ldd	r24, Y+33	; 0x21
    5a48:	9a a1       	ldd	r25, Y+34	; 0x22
    5a4a:	01 97       	sbiw	r24, 0x01	; 1
    5a4c:	9a a3       	std	Y+34, r25	; 0x22
    5a4e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a50:	89 a1       	ldd	r24, Y+33	; 0x21
    5a52:	9a a1       	ldd	r25, Y+34	; 0x22
    5a54:	00 97       	sbiw	r24, 0x00	; 0
    5a56:	69 f7       	brne	.-38     	; 0x5a32 <main+0xa86>
    5a58:	14 c0       	rjmp	.+40     	; 0x5a82 <main+0xad6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a5a:	6b a1       	ldd	r22, Y+35	; 0x23
    5a5c:	7c a1       	ldd	r23, Y+36	; 0x24
    5a5e:	8d a1       	ldd	r24, Y+37	; 0x25
    5a60:	9e a1       	ldd	r25, Y+38	; 0x26
    5a62:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5a66:	dc 01       	movw	r26, r24
    5a68:	cb 01       	movw	r24, r22
    5a6a:	9a a3       	std	Y+34, r25	; 0x22
    5a6c:	89 a3       	std	Y+33, r24	; 0x21
    5a6e:	89 a1       	ldd	r24, Y+33	; 0x21
    5a70:	9a a1       	ldd	r25, Y+34	; 0x22
    5a72:	9e 8f       	std	Y+30, r25	; 0x1e
    5a74:	8d 8f       	std	Y+29, r24	; 0x1d
    5a76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5a7a:	01 97       	sbiw	r24, 0x01	; 1
    5a7c:	f1 f7       	brne	.-4      	; 0x5a7a <main+0xace>
    5a7e:	9e 8f       	std	Y+30, r25	; 0x1e
    5a80:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(300);
	activate(wifi);
    5a82:	83 e0       	ldi	r24, 0x03	; 3
    5a84:	90 e0       	ldi	r25, 0x00	; 0
    5a86:	0e 94 67 27 	call	0x4ece	; 0x4ece <activate>
	LCDClear();
    5a8a:	81 e0       	ldi	r24, 0x01	; 1
    5a8c:	60 e0       	ldi	r22, 0x00	; 0
    5a8e:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCDByte>
	LCDWriteStringXY(2,0,"Initializing wifi");
    5a92:	82 e0       	ldi	r24, 0x02	; 2
    5a94:	60 e0       	ldi	r22, 0x00	; 0
    5a96:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <LCDGotoXY>
    5a9a:	8c e9       	ldi	r24, 0x9C	; 156
    5a9c:	92 e0       	ldi	r25, 0x02	; 2
    5a9e:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <LCDWriteString>
	uint8_t Connect_Status;

		USART_Init(115200);						/* Initiate USART with 115200 baud rate */
    5aa2:	60 e0       	ldi	r22, 0x00	; 0
    5aa4:	72 ec       	ldi	r23, 0xC2	; 194
    5aa6:	81 e0       	ldi	r24, 0x01	; 1
    5aa8:	90 e0       	ldi	r25, 0x00	; 0
    5aaa:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <USART_Init>
		sei();									/* Start global interrupt */
    5aae:	78 94       	sei

		while(!ESP8266_Begin());
    5ab0:	0e 94 18 36 	call	0x6c30	; 0x6c30 <ESP8266_Begin>
    5ab4:	91 e0       	ldi	r25, 0x01	; 1
    5ab6:	89 27       	eor	r24, r25
    5ab8:	88 23       	and	r24, r24
    5aba:	d1 f7       	brne	.-12     	; 0x5ab0 <main+0xb04>
		ESP8266_WIFIMode(BOTH_STATION_AND_ACCESPOINT);/* 3 = Both (AP and STA) */
    5abc:	83 e0       	ldi	r24, 0x03	; 3
    5abe:	0e 94 57 36 	call	0x6cae	; 0x6cae <ESP8266_WIFIMode>
		ESP8266_ConnectionMode(SINGLE);			/* 0 = Single; 1 = Multi */
    5ac2:	80 e0       	ldi	r24, 0x00	; 0
    5ac4:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <ESP8266_ConnectionMode>
		ESP8266_ApplicationMode(NORMAL);		/* 0 = Normal Mode; 1 = Transperant Mode */
    5ac8:	80 e0       	ldi	r24, 0x00	; 0
    5aca:	0e 94 8a 35 	call	0x6b14	; 0x6b14 <ESP8266_ApplicationMode>
		if(ESP8266_connected() == ESP8266_NOT_CONNECTED_TO_AP)
    5ace:	0e 94 3c 37 	call	0x6e78	; 0x6e78 <ESP8266_connected>
    5ad2:	83 30       	cpi	r24, 0x03	; 3
    5ad4:	39 f4       	brne	.+14     	; 0x5ae4 <main+0xb38>
		ESP8266_JoinAccessPoint(SSID, PASSWORD);
    5ad6:	8e ea       	ldi	r24, 0xAE	; 174
    5ad8:	92 e0       	ldi	r25, 0x02	; 2
    5ada:	22 e8       	ldi	r18, 0x82	; 130
    5adc:	32 e0       	ldi	r19, 0x02	; 2
    5ade:	b9 01       	movw	r22, r18
    5ae0:	0e 94 9e 36 	call	0x6d3c	; 0x6d3c <ESP8266_JoinAccessPoint>
		ESP8266_Start(0, DOMAIN, port);
    5ae4:	23 eb       	ldi	r18, 0xB3	; 179
    5ae6:	32 e0       	ldi	r19, 0x02	; 2
    5ae8:	46 ec       	ldi	r20, 0xC6	; 198
    5aea:	52 e0       	ldi	r21, 0x02	; 2
    5aec:	80 e0       	ldi	r24, 0x00	; 0
    5aee:	b9 01       	movw	r22, r18
    5af0:	0e 94 7e 37 	call	0x6efc	; 0x6efc <ESP8266_Start>
while(1){
		byte = mfrc522_request(PICC_REQALL,str);
    5af4:	9e 01       	movw	r18, r28
    5af6:	2a 57       	subi	r18, 0x7A	; 122
    5af8:	3f 4f       	sbci	r19, 0xFF	; 255
    5afa:	82 e5       	ldi	r24, 0x52	; 82
    5afc:	b9 01       	movw	r22, r18
    5afe:	0e 94 8b 30 	call	0x6116	; 0x6116 <mfrc522_request>
    5b02:	fe 01       	movw	r30, r28
    5b04:	e0 58       	subi	r30, 0x80	; 128
    5b06:	ff 4f       	sbci	r31, 0xFF	; 255
    5b08:	80 83       	st	Z, r24
		LCDHexDumpXY(0,1,byte);
    5b0a:	fe 01       	movw	r30, r28
    5b0c:	e0 58       	subi	r30, 0x80	; 128
    5b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b10:	80 e0       	ldi	r24, 0x00	; 0
    5b12:	61 e0       	ldi	r22, 0x01	; 1
    5b14:	40 81       	ld	r20, Z
    5b16:	0e 94 24 27 	call	0x4e48	; 0x4e48 <LCDHexDumpXY>
		LCDClear();
    5b1a:	81 e0       	ldi	r24, 0x01	; 1
    5b1c:	60 e0       	ldi	r22, 0x00	; 0
    5b1e:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCDByte>

		if(byte == CARD_FOUND)
    5b22:	fe 01       	movw	r30, r28
    5b24:	e0 58       	subi	r30, 0x80	; 128
    5b26:	ff 4f       	sbci	r31, 0xFF	; 255
    5b28:	80 81       	ld	r24, Z
    5b2a:	81 30       	cpi	r24, 0x01	; 1
    5b2c:	09 f0       	breq	.+2      	; 0x5b30 <main+0xb84>
    5b2e:	00 c1       	rjmp	.+512    	; 0x5d30 <main+0xd84>
		{
			byte = mfrc522_get_card_serial(str);
    5b30:	ce 01       	movw	r24, r28
    5b32:	8a 57       	subi	r24, 0x7A	; 122
    5b34:	9f 4f       	sbci	r25, 0xFF	; 255
    5b36:	0e 94 27 32 	call	0x644e	; 0x644e <mfrc522_get_card_serial>
    5b3a:	fe 01       	movw	r30, r28
    5b3c:	e0 58       	subi	r30, 0x80	; 128
    5b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b40:	80 83       	st	Z, r24
			if(byte == CARD_FOUND)
    5b42:	fe 01       	movw	r30, r28
    5b44:	e0 58       	subi	r30, 0x80	; 128
    5b46:	ff 4f       	sbci	r31, 0xFF	; 255
    5b48:	80 81       	ld	r24, Z
    5b4a:	81 30       	cpi	r24, 0x01	; 1
    5b4c:	09 f0       	breq	.+2      	; 0x5b50 <main+0xba4>
    5b4e:	e8 c0       	rjmp	.+464    	; 0x5d20 <main+0xd74>
			{
				for(byte=0;byte<8;byte++)
    5b50:	fe 01       	movw	r30, r28
    5b52:	e0 58       	subi	r30, 0x80	; 128
    5b54:	ff 4f       	sbci	r31, 0xFF	; 255
    5b56:	10 82       	st	Z, r1
    5b58:	51 c0       	rjmp	.+162    	; 0x5bfc <main+0xc50>
				{
				LCDHexDumpXY(byte*2,0,str[byte]);
    5b5a:	fe 01       	movw	r30, r28
    5b5c:	e0 58       	subi	r30, 0x80	; 128
    5b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b60:	80 81       	ld	r24, Z
    5b62:	88 2f       	mov	r24, r24
    5b64:	90 e0       	ldi	r25, 0x00	; 0
    5b66:	88 0f       	add	r24, r24
    5b68:	99 1f       	adc	r25, r25
    5b6a:	48 2f       	mov	r20, r24
    5b6c:	fe 01       	movw	r30, r28
    5b6e:	e0 58       	subi	r30, 0x80	; 128
    5b70:	ff 4f       	sbci	r31, 0xFF	; 255
    5b72:	80 81       	ld	r24, Z
    5b74:	28 2f       	mov	r18, r24
    5b76:	30 e0       	ldi	r19, 0x00	; 0
    5b78:	ce 01       	movw	r24, r28
    5b7a:	8a 57       	subi	r24, 0x7A	; 122
    5b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    5b7e:	fc 01       	movw	r30, r24
    5b80:	e2 0f       	add	r30, r18
    5b82:	f3 1f       	adc	r31, r19
    5b84:	90 81       	ld	r25, Z
    5b86:	84 2f       	mov	r24, r20
    5b88:	60 e0       	ldi	r22, 0x00	; 0
    5b8a:	49 2f       	mov	r20, r25
    5b8c:	0e 94 24 27 	call	0x4e48	; 0x4e48 <LCDHexDumpXY>
				 Check=(Check*100)+str[byte];
    5b90:	fe 01       	movw	r30, r28
    5b92:	ee 57       	subi	r30, 0x7E	; 126
    5b94:	ff 4f       	sbci	r31, 0xFF	; 255
    5b96:	80 81       	ld	r24, Z
    5b98:	91 81       	ldd	r25, Z+1	; 0x01
    5b9a:	a2 81       	ldd	r26, Z+2	; 0x02
    5b9c:	b3 81       	ldd	r27, Z+3	; 0x03
    5b9e:	24 e6       	ldi	r18, 0x64	; 100
    5ba0:	30 e0       	ldi	r19, 0x00	; 0
    5ba2:	40 e0       	ldi	r20, 0x00	; 0
    5ba4:	50 e0       	ldi	r21, 0x00	; 0
    5ba6:	bc 01       	movw	r22, r24
    5ba8:	cd 01       	movw	r24, r26
    5baa:	0e 94 7a 39 	call	0x72f4	; 0x72f4 <__mulsi3>
    5bae:	ab 01       	movw	r20, r22
    5bb0:	bc 01       	movw	r22, r24
    5bb2:	fe 01       	movw	r30, r28
    5bb4:	e0 58       	subi	r30, 0x80	; 128
    5bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    5bb8:	80 81       	ld	r24, Z
    5bba:	28 2f       	mov	r18, r24
    5bbc:	30 e0       	ldi	r19, 0x00	; 0
    5bbe:	ce 01       	movw	r24, r28
    5bc0:	8a 57       	subi	r24, 0x7A	; 122
    5bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    5bc4:	fc 01       	movw	r30, r24
    5bc6:	e2 0f       	add	r30, r18
    5bc8:	f3 1f       	adc	r31, r19
    5bca:	80 81       	ld	r24, Z
    5bcc:	88 2f       	mov	r24, r24
    5bce:	90 e0       	ldi	r25, 0x00	; 0
    5bd0:	a0 e0       	ldi	r26, 0x00	; 0
    5bd2:	b0 e0       	ldi	r27, 0x00	; 0
    5bd4:	fe 01       	movw	r30, r28
    5bd6:	ee 57       	subi	r30, 0x7E	; 126
    5bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    5bda:	84 0f       	add	r24, r20
    5bdc:	95 1f       	adc	r25, r21
    5bde:	a6 1f       	adc	r26, r22
    5be0:	b7 1f       	adc	r27, r23
    5be2:	80 83       	st	Z, r24
    5be4:	91 83       	std	Z+1, r25	; 0x01
    5be6:	a2 83       	std	Z+2, r26	; 0x02
    5be8:	b3 83       	std	Z+3, r27	; 0x03
		if(byte == CARD_FOUND)
		{
			byte = mfrc522_get_card_serial(str);
			if(byte == CARD_FOUND)
			{
				for(byte=0;byte<8;byte++)
    5bea:	de 01       	movw	r26, r28
    5bec:	a0 58       	subi	r26, 0x80	; 128
    5bee:	bf 4f       	sbci	r27, 0xFF	; 255
    5bf0:	fe 01       	movw	r30, r28
    5bf2:	e0 58       	subi	r30, 0x80	; 128
    5bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    5bf6:	80 81       	ld	r24, Z
    5bf8:	8f 5f       	subi	r24, 0xFF	; 255
    5bfa:	8c 93       	st	X, r24
    5bfc:	fe 01       	movw	r30, r28
    5bfe:	e0 58       	subi	r30, 0x80	; 128
    5c00:	ff 4f       	sbci	r31, 0xFF	; 255
    5c02:	80 81       	ld	r24, Z
    5c04:	88 30       	cpi	r24, 0x08	; 8
    5c06:	08 f4       	brcc	.+2      	; 0x5c0a <main+0xc5e>
    5c08:	a8 cf       	rjmp	.-176    	; 0x5b5a <main+0xbae>
				{
				LCDHexDumpXY(byte*2,0,str[byte]);
				 Check=(Check*100)+str[byte];
				}
				DIOSetPinValue(1,0,1);
    5c0a:	81 e0       	ldi	r24, 0x01	; 1
    5c0c:	90 e0       	ldi	r25, 0x00	; 0
    5c0e:	60 e0       	ldi	r22, 0x00	; 0
    5c10:	70 e0       	ldi	r23, 0x00	; 0
    5c12:	41 e0       	ldi	r20, 0x01	; 1
    5c14:	50 e0       	ldi	r21, 0x00	; 0
    5c16:	0e 94 ed 08 	call	0x11da	; 0x11da <DIOSetPinValue>
				_delay_ms(1000);
				DIOSetPinValue(1,2,0);
				}
			else
			{
				LCDWriteStringXY(0,0,"No Match!");
    5c1a:	80 e0       	ldi	r24, 0x00	; 0
    5c1c:	60 e0       	ldi	r22, 0x00	; 0
    5c1e:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <LCDGotoXY>
    5c22:	89 ec       	ldi	r24, 0xC9	; 201
    5c24:	92 e0       	ldi	r25, 0x02	; 2
    5c26:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <LCDWriteString>
    5c2a:	80 e0       	ldi	r24, 0x00	; 0
    5c2c:	90 e4       	ldi	r25, 0x40	; 64
    5c2e:	ac e1       	ldi	r26, 0x1C	; 28
    5c30:	b5 e4       	ldi	r27, 0x45	; 69
    5c32:	89 8f       	std	Y+25, r24	; 0x19
    5c34:	9a 8f       	std	Y+26, r25	; 0x1a
    5c36:	ab 8f       	std	Y+27, r26	; 0x1b
    5c38:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c3a:	69 8d       	ldd	r22, Y+25	; 0x19
    5c3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5c3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c42:	20 e0       	ldi	r18, 0x00	; 0
    5c44:	30 e0       	ldi	r19, 0x00	; 0
    5c46:	4a ef       	ldi	r20, 0xFA	; 250
    5c48:	54 e4       	ldi	r21, 0x44	; 68
    5c4a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5c4e:	dc 01       	movw	r26, r24
    5c50:	cb 01       	movw	r24, r22
    5c52:	8d 8b       	std	Y+21, r24	; 0x15
    5c54:	9e 8b       	std	Y+22, r25	; 0x16
    5c56:	af 8b       	std	Y+23, r26	; 0x17
    5c58:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5c5a:	6d 89       	ldd	r22, Y+21	; 0x15
    5c5c:	7e 89       	ldd	r23, Y+22	; 0x16
    5c5e:	8f 89       	ldd	r24, Y+23	; 0x17
    5c60:	98 8d       	ldd	r25, Y+24	; 0x18
    5c62:	20 e0       	ldi	r18, 0x00	; 0
    5c64:	30 e0       	ldi	r19, 0x00	; 0
    5c66:	40 e8       	ldi	r20, 0x80	; 128
    5c68:	5f e3       	ldi	r21, 0x3F	; 63
    5c6a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    5c6e:	88 23       	and	r24, r24
    5c70:	2c f4       	brge	.+10     	; 0x5c7c <main+0xcd0>
		__ticks = 1;
    5c72:	81 e0       	ldi	r24, 0x01	; 1
    5c74:	90 e0       	ldi	r25, 0x00	; 0
    5c76:	9c 8b       	std	Y+20, r25	; 0x14
    5c78:	8b 8b       	std	Y+19, r24	; 0x13
    5c7a:	3f c0       	rjmp	.+126    	; 0x5cfa <main+0xd4e>
	else if (__tmp > 65535)
    5c7c:	6d 89       	ldd	r22, Y+21	; 0x15
    5c7e:	7e 89       	ldd	r23, Y+22	; 0x16
    5c80:	8f 89       	ldd	r24, Y+23	; 0x17
    5c82:	98 8d       	ldd	r25, Y+24	; 0x18
    5c84:	20 e0       	ldi	r18, 0x00	; 0
    5c86:	3f ef       	ldi	r19, 0xFF	; 255
    5c88:	4f e7       	ldi	r20, 0x7F	; 127
    5c8a:	57 e4       	ldi	r21, 0x47	; 71
    5c8c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    5c90:	18 16       	cp	r1, r24
    5c92:	4c f5       	brge	.+82     	; 0x5ce6 <main+0xd3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c94:	69 8d       	ldd	r22, Y+25	; 0x19
    5c96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5c98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c9c:	20 e0       	ldi	r18, 0x00	; 0
    5c9e:	30 e0       	ldi	r19, 0x00	; 0
    5ca0:	40 e2       	ldi	r20, 0x20	; 32
    5ca2:	51 e4       	ldi	r21, 0x41	; 65
    5ca4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5ca8:	dc 01       	movw	r26, r24
    5caa:	cb 01       	movw	r24, r22
    5cac:	bc 01       	movw	r22, r24
    5cae:	cd 01       	movw	r24, r26
    5cb0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5cb4:	dc 01       	movw	r26, r24
    5cb6:	cb 01       	movw	r24, r22
    5cb8:	9c 8b       	std	Y+20, r25	; 0x14
    5cba:	8b 8b       	std	Y+19, r24	; 0x13
    5cbc:	0f c0       	rjmp	.+30     	; 0x5cdc <main+0xd30>
    5cbe:	88 ec       	ldi	r24, 0xC8	; 200
    5cc0:	90 e0       	ldi	r25, 0x00	; 0
    5cc2:	9a 8b       	std	Y+18, r25	; 0x12
    5cc4:	89 8b       	std	Y+17, r24	; 0x11
    5cc6:	89 89       	ldd	r24, Y+17	; 0x11
    5cc8:	9a 89       	ldd	r25, Y+18	; 0x12
    5cca:	01 97       	sbiw	r24, 0x01	; 1
    5ccc:	f1 f7       	brne	.-4      	; 0x5cca <main+0xd1e>
    5cce:	9a 8b       	std	Y+18, r25	; 0x12
    5cd0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cd2:	8b 89       	ldd	r24, Y+19	; 0x13
    5cd4:	9c 89       	ldd	r25, Y+20	; 0x14
    5cd6:	01 97       	sbiw	r24, 0x01	; 1
    5cd8:	9c 8b       	std	Y+20, r25	; 0x14
    5cda:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cdc:	8b 89       	ldd	r24, Y+19	; 0x13
    5cde:	9c 89       	ldd	r25, Y+20	; 0x14
    5ce0:	00 97       	sbiw	r24, 0x00	; 0
    5ce2:	69 f7       	brne	.-38     	; 0x5cbe <main+0xd12>
    5ce4:	14 c0       	rjmp	.+40     	; 0x5d0e <main+0xd62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ce6:	6d 89       	ldd	r22, Y+21	; 0x15
    5ce8:	7e 89       	ldd	r23, Y+22	; 0x16
    5cea:	8f 89       	ldd	r24, Y+23	; 0x17
    5cec:	98 8d       	ldd	r25, Y+24	; 0x18
    5cee:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5cf2:	dc 01       	movw	r26, r24
    5cf4:	cb 01       	movw	r24, r22
    5cf6:	9c 8b       	std	Y+20, r25	; 0x14
    5cf8:	8b 8b       	std	Y+19, r24	; 0x13
    5cfa:	8b 89       	ldd	r24, Y+19	; 0x13
    5cfc:	9c 89       	ldd	r25, Y+20	; 0x14
    5cfe:	98 8b       	std	Y+16, r25	; 0x10
    5d00:	8f 87       	std	Y+15, r24	; 0x0f
    5d02:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d04:	98 89       	ldd	r25, Y+16	; 0x10
    5d06:	01 97       	sbiw	r24, 0x01	; 1
    5d08:	f1 f7       	brne	.-4      	; 0x5d06 <main+0xd5a>
    5d0a:	98 8b       	std	Y+16, r25	; 0x10
    5d0c:	8f 87       	std	Y+15, r24	; 0x0f
			}


				_delay_ms(2500);
				DIOSetPinValue(1,0,0);
    5d0e:	81 e0       	ldi	r24, 0x01	; 1
    5d10:	90 e0       	ldi	r25, 0x00	; 0
    5d12:	60 e0       	ldi	r22, 0x00	; 0
    5d14:	70 e0       	ldi	r23, 0x00	; 0
    5d16:	40 e0       	ldi	r20, 0x00	; 0
    5d18:	50 e0       	ldi	r21, 0x00	; 0
    5d1a:	0e 94 ed 08 	call	0x11da	; 0x11da <DIOSetPinValue>
    5d1e:	08 c0       	rjmp	.+16     	; 0x5d30 <main+0xd84>
			}
			else
			{
				LCDWriteStringXY(0,1,"Error");
    5d20:	80 e0       	ldi	r24, 0x00	; 0
    5d22:	61 e0       	ldi	r22, 0x01	; 1
    5d24:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <LCDGotoXY>
    5d28:	83 ed       	ldi	r24, 0xD3	; 211
    5d2a:	92 e0       	ldi	r25, 0x02	; 2
    5d2c:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <LCDWriteString>
    5d30:	80 e0       	ldi	r24, 0x00	; 0
    5d32:	90 e0       	ldi	r25, 0x00	; 0
    5d34:	aa e7       	ldi	r26, 0x7A	; 122
    5d36:	b4 e4       	ldi	r27, 0x44	; 68
    5d38:	8b 87       	std	Y+11, r24	; 0x0b
    5d3a:	9c 87       	std	Y+12, r25	; 0x0c
    5d3c:	ad 87       	std	Y+13, r26	; 0x0d
    5d3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d40:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d42:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d48:	20 e0       	ldi	r18, 0x00	; 0
    5d4a:	30 e0       	ldi	r19, 0x00	; 0
    5d4c:	4a ef       	ldi	r20, 0xFA	; 250
    5d4e:	54 e4       	ldi	r21, 0x44	; 68
    5d50:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5d54:	dc 01       	movw	r26, r24
    5d56:	cb 01       	movw	r24, r22
    5d58:	8f 83       	std	Y+7, r24	; 0x07
    5d5a:	98 87       	std	Y+8, r25	; 0x08
    5d5c:	a9 87       	std	Y+9, r26	; 0x09
    5d5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5d60:	6f 81       	ldd	r22, Y+7	; 0x07
    5d62:	78 85       	ldd	r23, Y+8	; 0x08
    5d64:	89 85       	ldd	r24, Y+9	; 0x09
    5d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d68:	20 e0       	ldi	r18, 0x00	; 0
    5d6a:	30 e0       	ldi	r19, 0x00	; 0
    5d6c:	40 e8       	ldi	r20, 0x80	; 128
    5d6e:	5f e3       	ldi	r21, 0x3F	; 63
    5d70:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    5d74:	88 23       	and	r24, r24
    5d76:	2c f4       	brge	.+10     	; 0x5d82 <main+0xdd6>
		__ticks = 1;
    5d78:	81 e0       	ldi	r24, 0x01	; 1
    5d7a:	90 e0       	ldi	r25, 0x00	; 0
    5d7c:	9e 83       	std	Y+6, r25	; 0x06
    5d7e:	8d 83       	std	Y+5, r24	; 0x05
    5d80:	3f c0       	rjmp	.+126    	; 0x5e00 <main+0xe54>
	else if (__tmp > 65535)
    5d82:	6f 81       	ldd	r22, Y+7	; 0x07
    5d84:	78 85       	ldd	r23, Y+8	; 0x08
    5d86:	89 85       	ldd	r24, Y+9	; 0x09
    5d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d8a:	20 e0       	ldi	r18, 0x00	; 0
    5d8c:	3f ef       	ldi	r19, 0xFF	; 255
    5d8e:	4f e7       	ldi	r20, 0x7F	; 127
    5d90:	57 e4       	ldi	r21, 0x47	; 71
    5d92:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    5d96:	18 16       	cp	r1, r24
    5d98:	4c f5       	brge	.+82     	; 0x5dec <main+0xe40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    5da2:	20 e0       	ldi	r18, 0x00	; 0
    5da4:	30 e0       	ldi	r19, 0x00	; 0
    5da6:	40 e2       	ldi	r20, 0x20	; 32
    5da8:	51 e4       	ldi	r21, 0x41	; 65
    5daa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    5dae:	dc 01       	movw	r26, r24
    5db0:	cb 01       	movw	r24, r22
    5db2:	bc 01       	movw	r22, r24
    5db4:	cd 01       	movw	r24, r26
    5db6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5dba:	dc 01       	movw	r26, r24
    5dbc:	cb 01       	movw	r24, r22
    5dbe:	9e 83       	std	Y+6, r25	; 0x06
    5dc0:	8d 83       	std	Y+5, r24	; 0x05
    5dc2:	0f c0       	rjmp	.+30     	; 0x5de2 <main+0xe36>
    5dc4:	88 ec       	ldi	r24, 0xC8	; 200
    5dc6:	90 e0       	ldi	r25, 0x00	; 0
    5dc8:	9c 83       	std	Y+4, r25	; 0x04
    5dca:	8b 83       	std	Y+3, r24	; 0x03
    5dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    5dce:	9c 81       	ldd	r25, Y+4	; 0x04
    5dd0:	01 97       	sbiw	r24, 0x01	; 1
    5dd2:	f1 f7       	brne	.-4      	; 0x5dd0 <main+0xe24>
    5dd4:	9c 83       	std	Y+4, r25	; 0x04
    5dd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    5dda:	9e 81       	ldd	r25, Y+6	; 0x06
    5ddc:	01 97       	sbiw	r24, 0x01	; 1
    5dde:	9e 83       	std	Y+6, r25	; 0x06
    5de0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5de2:	8d 81       	ldd	r24, Y+5	; 0x05
    5de4:	9e 81       	ldd	r25, Y+6	; 0x06
    5de6:	00 97       	sbiw	r24, 0x00	; 0
    5de8:	69 f7       	brne	.-38     	; 0x5dc4 <main+0xe18>
    5dea:	84 ce       	rjmp	.-760    	; 0x5af4 <main+0xb48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5dec:	6f 81       	ldd	r22, Y+7	; 0x07
    5dee:	78 85       	ldd	r23, Y+8	; 0x08
    5df0:	89 85       	ldd	r24, Y+9	; 0x09
    5df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5df4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    5df8:	dc 01       	movw	r26, r24
    5dfa:	cb 01       	movw	r24, r22
    5dfc:	9e 83       	std	Y+6, r25	; 0x06
    5dfe:	8d 83       	std	Y+5, r24	; 0x05
    5e00:	8d 81       	ldd	r24, Y+5	; 0x05
    5e02:	9e 81       	ldd	r25, Y+6	; 0x06
    5e04:	9a 83       	std	Y+2, r25	; 0x02
    5e06:	89 83       	std	Y+1, r24	; 0x01
    5e08:	89 81       	ldd	r24, Y+1	; 0x01
    5e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    5e0c:	01 97       	sbiw	r24, 0x01	; 1
    5e0e:	f1 f7       	brne	.-4      	; 0x5e0c <main+0xe60>
    5e10:	9a 83       	std	Y+2, r25	; 0x02
    5e12:	89 83       	std	Y+1, r24	; 0x01
    5e14:	6f ce       	rjmp	.-802    	; 0x5af4 <main+0xb48>

00005e16 <__vector_13>:




ISR (USART_RXC_vect)							/* Receive ISR routine */
{
    5e16:	1f 92       	push	r1
    5e18:	0f 92       	push	r0
    5e1a:	0f b6       	in	r0, 0x3f	; 63
    5e1c:	0f 92       	push	r0
    5e1e:	11 24       	eor	r1, r1
    5e20:	2f 93       	push	r18
    5e22:	3f 93       	push	r19
    5e24:	8f 93       	push	r24
    5e26:	9f 93       	push	r25
    5e28:	ef 93       	push	r30
    5e2a:	ff 93       	push	r31
    5e2c:	df 93       	push	r29
    5e2e:	cf 93       	push	r28
    5e30:	00 d0       	rcall	.+0      	; 0x5e32 <__vector_13+0x1c>
    5e32:	00 d0       	rcall	.+0      	; 0x5e34 <__vector_13+0x1e>
    5e34:	cd b7       	in	r28, 0x3d	; 61
    5e36:	de b7       	in	r29, 0x3e	; 62
	if(active==1){
    5e38:	80 91 1d 05 	lds	r24, 0x051D
    5e3c:	90 91 1e 05 	lds	r25, 0x051E
    5e40:	81 30       	cpi	r24, 0x01	; 1
    5e42:	91 05       	cpc	r25, r1
    5e44:	39 f5       	brne	.+78     	; 0x5e94 <__vector_13+0x7e>
	uint8_t oldsrg = SREG;
    5e46:	ef e5       	ldi	r30, 0x5F	; 95
    5e48:	f0 e0       	ldi	r31, 0x00	; 0
    5e4a:	80 81       	ld	r24, Z
    5e4c:	8c 83       	std	Y+4, r24	; 0x04
	RESPONSE_BUFFER[Counter] = UDR;				/* Copy data to buffer & increment counter */
    5e4e:	80 91 24 05 	lds	r24, 0x0524
    5e52:	90 91 25 05 	lds	r25, 0x0525
    5e56:	ec e2       	ldi	r30, 0x2C	; 44
    5e58:	f0 e0       	ldi	r31, 0x00	; 0
    5e5a:	20 81       	ld	r18, Z
    5e5c:	fc 01       	movw	r30, r24
    5e5e:	e1 5d       	subi	r30, 0xD1	; 209
    5e60:	f9 4f       	sbci	r31, 0xF9	; 249
    5e62:	20 83       	st	Z, r18
	Counter++;
    5e64:	80 91 24 05 	lds	r24, 0x0524
    5e68:	90 91 25 05 	lds	r25, 0x0525
    5e6c:	01 96       	adiw	r24, 0x01	; 1
    5e6e:	90 93 25 05 	sts	0x0525, r25
    5e72:	80 93 24 05 	sts	0x0524, r24
	if(Counter == DEFAULT_BUFFER_SIZE)
    5e76:	80 91 24 05 	lds	r24, 0x0524
    5e7a:	90 91 25 05 	lds	r25, 0x0525
    5e7e:	88 3c       	cpi	r24, 0xC8	; 200
    5e80:	91 05       	cpc	r25, r1
    5e82:	21 f4       	brne	.+8      	; 0x5e8c <__vector_13+0x76>
	Counter = 0;
    5e84:	10 92 25 05 	sts	0x0525, r1
    5e88:	10 92 24 05 	sts	0x0524, r1
	SREG = oldsrg;
    5e8c:	ef e5       	ldi	r30, 0x5F	; 95
    5e8e:	f0 e0       	ldi	r31, 0x00	; 0
    5e90:	8c 81       	ldd	r24, Y+4	; 0x04
    5e92:	80 83       	st	Z, r24
	}
	if(active==2){
    5e94:	80 91 1d 05 	lds	r24, 0x051D
    5e98:	90 91 1e 05 	lds	r25, 0x051E
    5e9c:	82 30       	cpi	r24, 0x02	; 2
    5e9e:	91 05       	cpc	r25, r1
    5ea0:	61 f5       	brne	.+88     	; 0x5efa <__vector_13+0xe4>
		uint8_t oldsrg = SREG;
    5ea2:	ef e5       	ldi	r30, 0x5F	; 95
    5ea4:	f0 e0       	ldi	r31, 0x00	; 0
    5ea6:	80 81       	ld	r24, Z
    5ea8:	8b 83       	std	Y+3, r24	; 0x03
			cli();
    5eaa:	f8 94       	cli
			RESPONSE_BUFFER1[Counter1] = UDR;
    5eac:	80 91 2d 05 	lds	r24, 0x052D
    5eb0:	90 91 2e 05 	lds	r25, 0x052E
    5eb4:	ec e2       	ldi	r30, 0x2C	; 44
    5eb6:	f0 e0       	ldi	r31, 0x00	; 0
    5eb8:	20 81       	ld	r18, Z
    5eba:	fc 01       	movw	r30, r24
    5ebc:	e7 5c       	subi	r30, 0xC7	; 199
    5ebe:	f8 4f       	sbci	r31, 0xF8	; 248
    5ec0:	20 83       	st	Z, r18
			Counter1++;
    5ec2:	80 91 2d 05 	lds	r24, 0x052D
    5ec6:	90 91 2e 05 	lds	r25, 0x052E
    5eca:	01 96       	adiw	r24, 0x01	; 1
    5ecc:	90 93 2e 05 	sts	0x052E, r25
    5ed0:	80 93 2d 05 	sts	0x052D, r24
			if(Counter1 == DEFAULT_BUFFER_SIZE1){
    5ed4:	80 91 2d 05 	lds	r24, 0x052D
    5ed8:	90 91 2e 05 	lds	r25, 0x052E
    5edc:	80 3a       	cpi	r24, 0xA0	; 160
    5ede:	91 05       	cpc	r25, r1
    5ee0:	41 f4       	brne	.+16     	; 0x5ef2 <__vector_13+0xdc>
				Counter1 = 0; pointer = 0;
    5ee2:	10 92 2e 05 	sts	0x052E, r1
    5ee6:	10 92 2d 05 	sts	0x052D, r1
    5eea:	10 92 30 05 	sts	0x0530, r1
    5eee:	10 92 2f 05 	sts	0x052F, r1
			}
			SREG = oldsrg;
    5ef2:	ef e5       	ldi	r30, 0x5F	; 95
    5ef4:	f0 e0       	ldi	r31, 0x00	; 0
    5ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    5ef8:	80 83       	st	Z, r24
	}
	if(active==3){
    5efa:	80 91 1d 05 	lds	r24, 0x051D
    5efe:	90 91 1e 05 	lds	r25, 0x051E
    5f02:	83 30       	cpi	r24, 0x03	; 3
    5f04:	91 05       	cpc	r25, r1
    5f06:	09 f0       	breq	.+2      	; 0x5f0a <__vector_13+0xf4>
    5f08:	65 c0       	rjmp	.+202    	; 0x5fd4 <__vector_13+0x1be>
		uint8_t oldsrg = SREG;
    5f0a:	ef e5       	ldi	r30, 0x5F	; 95
    5f0c:	f0 e0       	ldi	r31, 0x00	; 0
    5f0e:	80 81       	ld	r24, Z
    5f10:	8a 83       	std	Y+2, r24	; 0x02
		cli();
    5f12:	f8 94       	cli
		char received_char = UDR;
    5f14:	ec e2       	ldi	r30, 0x2C	; 44
    5f16:	f0 e0       	ldi	r31, 0x00	; 0
    5f18:	80 81       	ld	r24, Z
    5f1a:	89 83       	std	Y+1, r24	; 0x01

		if(received_char =='$'){ /* check for '$' */
    5f1c:	89 81       	ldd	r24, Y+1	; 0x01
    5f1e:	84 32       	cpi	r24, 0x24	; 36
    5f20:	59 f4       	brne	.+22     	; 0x5f38 <__vector_13+0x122>
		GGA_Index = 0;
    5f22:	10 92 00 06 	sts	0x0600, r1
    5f26:	10 92 ff 05 	sts	0x05FF, r1
		CommaCounter = 0;
    5f2a:	10 92 fe 05 	sts	0x05FE, r1
    5f2e:	10 92 fd 05 	sts	0x05FD, r1
		IsItGGAString = false;
    5f32:	10 92 20 05 	sts	0x0520, r1
    5f36:	4a c0       	rjmp	.+148    	; 0x5fcc <__vector_13+0x1b6>
		}
		else if(IsItGGAString == true){ /* if true save GGA info. into buffer */
    5f38:	80 91 20 05 	lds	r24, 0x0520
    5f3c:	88 23       	and	r24, r24
    5f3e:	29 f1       	breq	.+74     	; 0x5f8a <__vector_13+0x174>
		if(received_char == ',' ) GGA_Pointers[CommaCounter++] = GGA_Index; /* store instances of ',' in buffer */
    5f40:	89 81       	ldd	r24, Y+1	; 0x01
    5f42:	8c 32       	cpi	r24, 0x2C	; 44
    5f44:	91 f4       	brne	.+36     	; 0x5f6a <__vector_13+0x154>
    5f46:	20 91 fd 05 	lds	r18, 0x05FD
    5f4a:	30 91 fe 05 	lds	r19, 0x05FE
    5f4e:	80 91 ff 05 	lds	r24, 0x05FF
    5f52:	90 91 00 06 	lds	r25, 0x0600
    5f56:	f9 01       	movw	r30, r18
    5f58:	ed 5e       	subi	r30, 0xED	; 237
    5f5a:	f9 4f       	sbci	r31, 0xF9	; 249
    5f5c:	80 83       	st	Z, r24
    5f5e:	c9 01       	movw	r24, r18
    5f60:	01 96       	adiw	r24, 0x01	; 1
    5f62:	90 93 fe 05 	sts	0x05FE, r25
    5f66:	80 93 fd 05 	sts	0x05FD, r24
		GGA_Buffer[GGA_Index++] = received_char;
    5f6a:	20 91 ff 05 	lds	r18, 0x05FF
    5f6e:	30 91 00 06 	lds	r19, 0x0600
    5f72:	f9 01       	movw	r30, r18
    5f74:	eb 5c       	subi	r30, 0xCB	; 203
    5f76:	fa 4f       	sbci	r31, 0xFA	; 250
    5f78:	89 81       	ldd	r24, Y+1	; 0x01
    5f7a:	80 83       	st	Z, r24
    5f7c:	c9 01       	movw	r24, r18
    5f7e:	01 96       	adiw	r24, 0x01	; 1
    5f80:	90 93 00 06 	sts	0x0600, r25
    5f84:	80 93 ff 05 	sts	0x05FF, r24
    5f88:	21 c0       	rjmp	.+66     	; 0x5fcc <__vector_13+0x1b6>
		}
		else if(GGA_CODE[0] == 'G' && GGA_CODE[1] == 'G' && GGA_CODE[2] == 'A'){ /* check for GGA string */
    5f8a:	80 91 01 06 	lds	r24, 0x0601
    5f8e:	87 34       	cpi	r24, 0x47	; 71
    5f90:	91 f4       	brne	.+36     	; 0x5fb6 <__vector_13+0x1a0>
    5f92:	80 91 02 06 	lds	r24, 0x0602
    5f96:	87 34       	cpi	r24, 0x47	; 71
    5f98:	71 f4       	brne	.+28     	; 0x5fb6 <__vector_13+0x1a0>
    5f9a:	80 91 03 06 	lds	r24, 0x0603
    5f9e:	81 34       	cpi	r24, 0x41	; 65
    5fa0:	51 f4       	brne	.+20     	; 0x5fb6 <__vector_13+0x1a0>
		IsItGGAString = true;
    5fa2:	81 e0       	ldi	r24, 0x01	; 1
    5fa4:	80 93 20 05 	sts	0x0520, r24
		GGA_CODE[0] = 0; GGA_CODE[1] = 0; GGA_CODE[2] = 0;
    5fa8:	10 92 01 06 	sts	0x0601, r1
    5fac:	10 92 02 06 	sts	0x0602, r1
    5fb0:	10 92 03 06 	sts	0x0603, r1
    5fb4:	0b c0       	rjmp	.+22     	; 0x5fcc <__vector_13+0x1b6>
		}
		else{
		GGA_CODE[0] = GGA_CODE[1]; GGA_CODE[1] = GGA_CODE[2]; GGA_CODE[2] = received_char;
    5fb6:	80 91 02 06 	lds	r24, 0x0602
    5fba:	80 93 01 06 	sts	0x0601, r24
    5fbe:	80 91 03 06 	lds	r24, 0x0603
    5fc2:	80 93 02 06 	sts	0x0602, r24
    5fc6:	89 81       	ldd	r24, Y+1	; 0x01
    5fc8:	80 93 03 06 	sts	0x0603, r24
		}
		SREG = oldsrg;
    5fcc:	ef e5       	ldi	r30, 0x5F	; 95
    5fce:	f0 e0       	ldi	r31, 0x00	; 0
    5fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    5fd2:	80 83       	st	Z, r24
	}
}
    5fd4:	0f 90       	pop	r0
    5fd6:	0f 90       	pop	r0
    5fd8:	0f 90       	pop	r0
    5fda:	0f 90       	pop	r0
    5fdc:	cf 91       	pop	r28
    5fde:	df 91       	pop	r29
    5fe0:	ff 91       	pop	r31
    5fe2:	ef 91       	pop	r30
    5fe4:	9f 91       	pop	r25
    5fe6:	8f 91       	pop	r24
    5fe8:	3f 91       	pop	r19
    5fea:	2f 91       	pop	r18
    5fec:	0f 90       	pop	r0
    5fee:	0f be       	out	0x3f, r0	; 63
    5ff0:	0f 90       	pop	r0
    5ff2:	1f 90       	pop	r1
    5ff4:	18 95       	reti

00005ff6 <mfrc522_init>:
#if 1
#include "lcd.h"
#endif

void mfrc522_init()
{
    5ff6:	df 93       	push	r29
    5ff8:	cf 93       	push	r28
    5ffa:	0f 92       	push	r0
    5ffc:	cd b7       	in	r28, 0x3d	; 61
    5ffe:	de b7       	in	r29, 0x3e	; 62
	uint8_t byte;
	mfrc522_reset();
    6000:	0e 94 80 30 	call	0x6100	; 0x6100 <mfrc522_reset>

	mfrc522_write(TModeReg, 0x8D);
    6004:	8a e2       	ldi	r24, 0x2A	; 42
    6006:	6d e8       	ldi	r22, 0x8D	; 141
    6008:	0e 94 34 30 	call	0x6068	; 0x6068 <mfrc522_write>
    mfrc522_write(TPrescalerReg, 0x3E);
    600c:	8b e2       	ldi	r24, 0x2B	; 43
    600e:	6e e3       	ldi	r22, 0x3E	; 62
    6010:	0e 94 34 30 	call	0x6068	; 0x6068 <mfrc522_write>
    mfrc522_write(TReloadReg_1, 30);
    6014:	8c e2       	ldi	r24, 0x2C	; 44
    6016:	6e e1       	ldi	r22, 0x1E	; 30
    6018:	0e 94 34 30 	call	0x6068	; 0x6068 <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);
    601c:	8d e2       	ldi	r24, 0x2D	; 45
    601e:	60 e0       	ldi	r22, 0x00	; 0
    6020:	0e 94 34 30 	call	0x6068	; 0x6068 <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);
    6024:	85 e1       	ldi	r24, 0x15	; 21
    6026:	60 e4       	ldi	r22, 0x40	; 64
    6028:	0e 94 34 30 	call	0x6068	; 0x6068 <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D);
    602c:	81 e1       	ldi	r24, 0x11	; 17
    602e:	6d e3       	ldi	r22, 0x3D	; 61
    6030:	0e 94 34 30 	call	0x6068	; 0x6068 <mfrc522_write>

	byte = mfrc522_read(TxControlReg);
    6034:	84 e1       	ldi	r24, 0x14	; 20
    6036:	0e 94 59 30 	call	0x60b2	; 0x60b2 <mfrc522_read>
    603a:	89 83       	std	Y+1, r24	; 0x01
	if(!(byte&0x03))
    603c:	89 81       	ldd	r24, Y+1	; 0x01
    603e:	88 2f       	mov	r24, r24
    6040:	90 e0       	ldi	r25, 0x00	; 0
    6042:	83 70       	andi	r24, 0x03	; 3
    6044:	90 70       	andi	r25, 0x00	; 0
    6046:	00 97       	sbiw	r24, 0x00	; 0
    6048:	59 f4       	brne	.+22     	; 0x6060 <mfrc522_init+0x6a>
	{
		mfrc522_write(TxControlReg,byte|0x03);
    604a:	89 81       	ldd	r24, Y+1	; 0x01
    604c:	98 2f       	mov	r25, r24
    604e:	93 60       	ori	r25, 0x03	; 3
    6050:	84 e1       	ldi	r24, 0x14	; 20
    6052:	69 2f       	mov	r22, r25
    6054:	0e 94 34 30 	call	0x6068	; 0x6068 <mfrc522_write>

        byte = mfrc522_read(TxControlReg);  // without this reader is not detected
    6058:	84 e1       	ldi	r24, 0x14	; 20
    605a:	0e 94 59 30 	call	0x60b2	; 0x60b2 <mfrc522_read>
    605e:	89 83       	std	Y+1, r24	; 0x01
//        LCDHexDumpXY(0,0,byte);   //without this also reader is detected
	}


}
    6060:	0f 90       	pop	r0
    6062:	cf 91       	pop	r28
    6064:	df 91       	pop	r29
    6066:	08 95       	ret

00006068 <mfrc522_write>:

void mfrc522_write(uint8_t reg, uint8_t data)
{
    6068:	df 93       	push	r29
    606a:	cf 93       	push	r28
    606c:	00 d0       	rcall	.+0      	; 0x606e <mfrc522_write+0x6>
    606e:	cd b7       	in	r28, 0x3d	; 61
    6070:	de b7       	in	r29, 0x3e	; 62
    6072:	89 83       	std	Y+1, r24	; 0x01
    6074:	6a 83       	std	Y+2, r22	; 0x02
	ENABLE_CHIP();
    6076:	a8 e3       	ldi	r26, 0x38	; 56
    6078:	b0 e0       	ldi	r27, 0x00	; 0
    607a:	e8 e3       	ldi	r30, 0x38	; 56
    607c:	f0 e0       	ldi	r31, 0x00	; 0
    607e:	80 81       	ld	r24, Z
    6080:	8f 7e       	andi	r24, 0xEF	; 239
    6082:	8c 93       	st	X, r24
    //_NOP();
	spi_transmit((reg<<1)&0x7E);
    6084:	89 81       	ldd	r24, Y+1	; 0x01
    6086:	88 2f       	mov	r24, r24
    6088:	90 e0       	ldi	r25, 0x00	; 0
    608a:	88 0f       	add	r24, r24
    608c:	99 1f       	adc	r25, r25
    608e:	8e 77       	andi	r24, 0x7E	; 126
    6090:	0e 94 92 32 	call	0x6524	; 0x6524 <spi_transmit>
	spi_transmit(data);
    6094:	8a 81       	ldd	r24, Y+2	; 0x02
    6096:	0e 94 92 32 	call	0x6524	; 0x6524 <spi_transmit>
	DISABLE_CHIP();
    609a:	a8 e3       	ldi	r26, 0x38	; 56
    609c:	b0 e0       	ldi	r27, 0x00	; 0
    609e:	e8 e3       	ldi	r30, 0x38	; 56
    60a0:	f0 e0       	ldi	r31, 0x00	; 0
    60a2:	80 81       	ld	r24, Z
    60a4:	80 61       	ori	r24, 0x10	; 16
    60a6:	8c 93       	st	X, r24
}
    60a8:	0f 90       	pop	r0
    60aa:	0f 90       	pop	r0
    60ac:	cf 91       	pop	r28
    60ae:	df 91       	pop	r29
    60b0:	08 95       	ret

000060b2 <mfrc522_read>:

uint8_t mfrc522_read(uint8_t reg)
{
    60b2:	df 93       	push	r29
    60b4:	cf 93       	push	r28
    60b6:	00 d0       	rcall	.+0      	; 0x60b8 <mfrc522_read+0x6>
    60b8:	cd b7       	in	r28, 0x3d	; 61
    60ba:	de b7       	in	r29, 0x3e	; 62
    60bc:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t data;
	ENABLE_CHIP();
    60be:	a8 e3       	ldi	r26, 0x38	; 56
    60c0:	b0 e0       	ldi	r27, 0x00	; 0
    60c2:	e8 e3       	ldi	r30, 0x38	; 56
    60c4:	f0 e0       	ldi	r31, 0x00	; 0
    60c6:	80 81       	ld	r24, Z
    60c8:	8f 7e       	andi	r24, 0xEF	; 239
    60ca:	8c 93       	st	X, r24
    //_NOP();
	spi_transmit(((reg<<1)&0x7E)|0x80);
    60cc:	8a 81       	ldd	r24, Y+2	; 0x02
    60ce:	88 2f       	mov	r24, r24
    60d0:	90 e0       	ldi	r25, 0x00	; 0
    60d2:	88 0f       	add	r24, r24
    60d4:	99 1f       	adc	r25, r25
    60d6:	8e 77       	andi	r24, 0x7E	; 126
    60d8:	80 68       	ori	r24, 0x80	; 128
    60da:	0e 94 92 32 	call	0x6524	; 0x6524 <spi_transmit>
	data = spi_transmit(0x00);
    60de:	80 e0       	ldi	r24, 0x00	; 0
    60e0:	0e 94 92 32 	call	0x6524	; 0x6524 <spi_transmit>
    60e4:	89 83       	std	Y+1, r24	; 0x01
	DISABLE_CHIP();
    60e6:	a8 e3       	ldi	r26, 0x38	; 56
    60e8:	b0 e0       	ldi	r27, 0x00	; 0
    60ea:	e8 e3       	ldi	r30, 0x38	; 56
    60ec:	f0 e0       	ldi	r31, 0x00	; 0
    60ee:	80 81       	ld	r24, Z
    60f0:	80 61       	ori	r24, 0x10	; 16
    60f2:	8c 93       	st	X, r24
	return data;
    60f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    60f6:	0f 90       	pop	r0
    60f8:	0f 90       	pop	r0
    60fa:	cf 91       	pop	r28
    60fc:	df 91       	pop	r29
    60fe:	08 95       	ret

00006100 <mfrc522_reset>:

void mfrc522_reset()
{
    6100:	df 93       	push	r29
    6102:	cf 93       	push	r28
    6104:	cd b7       	in	r28, 0x3d	; 61
    6106:	de b7       	in	r29, 0x3e	; 62
	mfrc522_write(CommandReg,SoftReset_CMD);
    6108:	81 e0       	ldi	r24, 0x01	; 1
    610a:	6f e0       	ldi	r22, 0x0F	; 15
    610c:	0e 94 34 30 	call	0x6068	; 0x6068 <mfrc522_write>
}
    6110:	cf 91       	pop	r28
    6112:	df 91       	pop	r29
    6114:	08 95       	ret

00006116 <mfrc522_request>:

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
    6116:	0f 93       	push	r16
    6118:	1f 93       	push	r17
    611a:	df 93       	push	r29
    611c:	cf 93       	push	r28
    611e:	cd b7       	in	r28, 0x3d	; 61
    6120:	de b7       	in	r29, 0x3e	; 62
    6122:	28 97       	sbiw	r28, 0x08	; 8
    6124:	0f b6       	in	r0, 0x3f	; 63
    6126:	f8 94       	cli
    6128:	de bf       	out	0x3e, r29	; 62
    612a:	0f be       	out	0x3f, r0	; 63
    612c:	cd bf       	out	0x3d, r28	; 61
    612e:	8e 83       	std	Y+6, r24	; 0x06
    6130:	78 87       	std	Y+8, r23	; 0x08
    6132:	6f 83       	std	Y+7, r22	; 0x07
	uint8_t  status;
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
    6134:	8d e0       	ldi	r24, 0x0D	; 13
    6136:	67 e0       	ldi	r22, 0x07	; 7
    6138:	0e 94 34 30 	call	0x6068	; 0x6068 <mfrc522_write>

	tag_type[0] = req_mode;
    613c:	ef 81       	ldd	r30, Y+7	; 0x07
    613e:	f8 85       	ldd	r31, Y+8	; 0x08
    6140:	8e 81       	ldd	r24, Y+6	; 0x06
    6142:	80 83       	st	Z, r24
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
    6144:	2f 81       	ldd	r18, Y+7	; 0x07
    6146:	38 85       	ldd	r19, Y+8	; 0x08
    6148:	ef 81       	ldd	r30, Y+7	; 0x07
    614a:	f8 85       	ldd	r31, Y+8	; 0x08
    614c:	de 01       	movw	r26, r28
    614e:	12 96       	adiw	r26, 0x02	; 2
    6150:	8c e0       	ldi	r24, 0x0C	; 12
    6152:	b9 01       	movw	r22, r18
    6154:	41 e0       	ldi	r20, 0x01	; 1
    6156:	9f 01       	movw	r18, r30
    6158:	8d 01       	movw	r16, r26
    615a:	0e 94 ca 30 	call	0x6194	; 0x6194 <mfrc522_to_card>
    615e:	89 83       	std	Y+1, r24	; 0x01

	if ((status != CARD_FOUND) || (backBits != 0x10))
    6160:	89 81       	ldd	r24, Y+1	; 0x01
    6162:	81 30       	cpi	r24, 0x01	; 1
    6164:	49 f4       	brne	.+18     	; 0x6178 <mfrc522_request+0x62>
    6166:	8a 81       	ldd	r24, Y+2	; 0x02
    6168:	9b 81       	ldd	r25, Y+3	; 0x03
    616a:	ac 81       	ldd	r26, Y+4	; 0x04
    616c:	bd 81       	ldd	r27, Y+5	; 0x05
    616e:	80 31       	cpi	r24, 0x10	; 16
    6170:	91 05       	cpc	r25, r1
    6172:	a1 05       	cpc	r26, r1
    6174:	b1 05       	cpc	r27, r1
    6176:	11 f0       	breq	.+4      	; 0x617c <mfrc522_request+0x66>
	{
		status = ERROR;
    6178:	83 e0       	ldi	r24, 0x03	; 3
    617a:	89 83       	std	Y+1, r24	; 0x01
	}

	return status;
    617c:	89 81       	ldd	r24, Y+1	; 0x01
}
    617e:	28 96       	adiw	r28, 0x08	; 8
    6180:	0f b6       	in	r0, 0x3f	; 63
    6182:	f8 94       	cli
    6184:	de bf       	out	0x3e, r29	; 62
    6186:	0f be       	out	0x3f, r0	; 63
    6188:	cd bf       	out	0x3d, r28	; 61
    618a:	cf 91       	pop	r28
    618c:	df 91       	pop	r29
    618e:	1f 91       	pop	r17
    6190:	0f 91       	pop	r16
    6192:	08 95       	ret

00006194 <mfrc522_to_card>:

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
    6194:	0f 93       	push	r16
    6196:	1f 93       	push	r17
    6198:	df 93       	push	r29
    619a:	cf 93       	push	r28
    619c:	cd b7       	in	r28, 0x3d	; 61
    619e:	de b7       	in	r29, 0x3e	; 62
    61a0:	64 97       	sbiw	r28, 0x14	; 20
    61a2:	0f b6       	in	r0, 0x3f	; 63
    61a4:	f8 94       	cli
    61a6:	de bf       	out	0x3e, r29	; 62
    61a8:	0f be       	out	0x3f, r0	; 63
    61aa:	cd bf       	out	0x3d, r28	; 61
    61ac:	8b 87       	std	Y+11, r24	; 0x0b
    61ae:	7d 87       	std	Y+13, r23	; 0x0d
    61b0:	6c 87       	std	Y+12, r22	; 0x0c
    61b2:	4e 87       	std	Y+14, r20	; 0x0e
    61b4:	38 8b       	std	Y+16, r19	; 0x10
    61b6:	2f 87       	std	Y+15, r18	; 0x0f
    61b8:	1a 8b       	std	Y+18, r17	; 0x12
    61ba:	09 8b       	std	Y+17, r16	; 0x11
	uint8_t status = ERROR;
    61bc:	83 e0       	ldi	r24, 0x03	; 3
    61be:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t irqEn = 0x00;
    61c0:	19 86       	std	Y+9, r1	; 0x09
    uint8_t waitIRq = 0x00;
    61c2:	18 86       	std	Y+8, r1	; 0x08
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
    61c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    61c6:	28 2f       	mov	r18, r24
    61c8:	30 e0       	ldi	r19, 0x00	; 0
    61ca:	3c 8b       	std	Y+20, r19	; 0x14
    61cc:	2b 8b       	std	Y+19, r18	; 0x13
    61ce:	8b 89       	ldd	r24, Y+19	; 0x13
    61d0:	9c 89       	ldd	r25, Y+20	; 0x14
    61d2:	8c 30       	cpi	r24, 0x0C	; 12
    61d4:	91 05       	cpc	r25, r1
    61d6:	51 f0       	breq	.+20     	; 0x61ec <mfrc522_to_card+0x58>
    61d8:	eb 89       	ldd	r30, Y+19	; 0x13
    61da:	fc 89       	ldd	r31, Y+20	; 0x14
    61dc:	ee 30       	cpi	r30, 0x0E	; 14
    61de:	f1 05       	cpc	r31, r1
    61e0:	49 f4       	brne	.+18     	; 0x61f4 <mfrc522_to_card+0x60>
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
    61e2:	82 e1       	ldi	r24, 0x12	; 18
    61e4:	89 87       	std	Y+9, r24	; 0x09
			waitIRq = 0x10;
    61e6:	80 e1       	ldi	r24, 0x10	; 16
    61e8:	88 87       	std	Y+8, r24	; 0x08
    61ea:	04 c0       	rjmp	.+8      	; 0x61f4 <mfrc522_to_card+0x60>
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
    61ec:	87 e7       	ldi	r24, 0x77	; 119
    61ee:	89 87       	std	Y+9, r24	; 0x09
			waitIRq = 0x30;
    61f0:	80 e3       	ldi	r24, 0x30	; 48
    61f2:	88 87       	std	Y+8, r24	; 0x08
		default:
			break;
    }

    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
    61f4:	84 e0       	ldi	r24, 0x04	; 4
    61f6:	0e 94 59 30 	call	0x60b2	; 0x60b2 <mfrc522_read>
    61fa:	8e 83       	std	Y+6, r24	; 0x06
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
    61fc:	8e 81       	ldd	r24, Y+6	; 0x06
    61fe:	98 2f       	mov	r25, r24
    6200:	9f 77       	andi	r25, 0x7F	; 127
    6202:	84 e0       	ldi	r24, 0x04	; 4
    6204:	69 2f       	mov	r22, r25
    6206:	0e 94 34 30 	call	0x6068	; 0x6068 <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
    620a:	8a e0       	ldi	r24, 0x0A	; 10
    620c:	0e 94 59 30 	call	0x60b2	; 0x60b2 <mfrc522_read>
    6210:	8e 83       	std	Y+6, r24	; 0x06
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    6212:	8e 81       	ldd	r24, Y+6	; 0x06
    6214:	98 2f       	mov	r25, r24
    6216:	90 68       	ori	r25, 0x80	; 128
    6218:	8a e0       	ldi	r24, 0x0A	; 10
    621a:	69 2f       	mov	r22, r25
    621c:	0e 94 34 30 	call	0x6068	; 0x6068 <mfrc522_write>

	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
    6220:	81 e0       	ldi	r24, 0x01	; 1
    6222:	60 e0       	ldi	r22, 0x00	; 0
    6224:	0e 94 34 30 	call	0x6068	; 0x6068 <mfrc522_write>

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
    6228:	19 82       	std	Y+1, r1	; 0x01
    622a:	1a 82       	std	Y+2, r1	; 0x02
    622c:	1b 82       	std	Y+3, r1	; 0x03
    622e:	1c 82       	std	Y+4, r1	; 0x04
    6230:	17 c0       	rjmp	.+46     	; 0x6260 <mfrc522_to_card+0xcc>
    {
		mfrc522_write(FIFODataReg, send_data[i]);
    6232:	29 81       	ldd	r18, Y+1	; 0x01
    6234:	3a 81       	ldd	r19, Y+2	; 0x02
    6236:	8c 85       	ldd	r24, Y+12	; 0x0c
    6238:	9d 85       	ldd	r25, Y+13	; 0x0d
    623a:	fc 01       	movw	r30, r24
    623c:	e2 0f       	add	r30, r18
    623e:	f3 1f       	adc	r31, r19
    6240:	90 81       	ld	r25, Z
    6242:	89 e0       	ldi	r24, 0x09	; 9
    6244:	69 2f       	mov	r22, r25
    6246:	0e 94 34 30 	call	0x6068	; 0x6068 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data

	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
    624a:	89 81       	ldd	r24, Y+1	; 0x01
    624c:	9a 81       	ldd	r25, Y+2	; 0x02
    624e:	ab 81       	ldd	r26, Y+3	; 0x03
    6250:	bc 81       	ldd	r27, Y+4	; 0x04
    6252:	01 96       	adiw	r24, 0x01	; 1
    6254:	a1 1d       	adc	r26, r1
    6256:	b1 1d       	adc	r27, r1
    6258:	89 83       	std	Y+1, r24	; 0x01
    625a:	9a 83       	std	Y+2, r25	; 0x02
    625c:	ab 83       	std	Y+3, r26	; 0x03
    625e:	bc 83       	std	Y+4, r27	; 0x04
    6260:	8e 85       	ldd	r24, Y+14	; 0x0e
    6262:	28 2f       	mov	r18, r24
    6264:	30 e0       	ldi	r19, 0x00	; 0
    6266:	40 e0       	ldi	r20, 0x00	; 0
    6268:	50 e0       	ldi	r21, 0x00	; 0
    626a:	89 81       	ldd	r24, Y+1	; 0x01
    626c:	9a 81       	ldd	r25, Y+2	; 0x02
    626e:	ab 81       	ldd	r26, Y+3	; 0x03
    6270:	bc 81       	ldd	r27, Y+4	; 0x04
    6272:	82 17       	cp	r24, r18
    6274:	93 07       	cpc	r25, r19
    6276:	a4 07       	cpc	r26, r20
    6278:	b5 07       	cpc	r27, r21
    627a:	d8 f2       	brcs	.-74     	; 0x6232 <mfrc522_to_card+0x9e>
    {
		mfrc522_write(FIFODataReg, send_data[i]);
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
    627c:	81 e0       	ldi	r24, 0x01	; 1
    627e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6280:	0e 94 34 30 	call	0x6068	; 0x6068 <mfrc522_write>
    if (cmd == Transceive_CMD)
    6284:	8b 85       	ldd	r24, Y+11	; 0x0b
    6286:	8c 30       	cpi	r24, 0x0C	; 12
    6288:	59 f4       	brne	.+22     	; 0x62a0 <mfrc522_to_card+0x10c>
    {
		n=mfrc522_read(BitFramingReg);
    628a:	8d e0       	ldi	r24, 0x0D	; 13
    628c:	0e 94 59 30 	call	0x60b2	; 0x60b2 <mfrc522_read>
    6290:	8e 83       	std	Y+6, r24	; 0x06
		mfrc522_write(BitFramingReg,n|0x80);
    6292:	8e 81       	ldd	r24, Y+6	; 0x06
    6294:	98 2f       	mov	r25, r24
    6296:	90 68       	ori	r25, 0x80	; 128
    6298:	8d e0       	ldi	r24, 0x0D	; 13
    629a:	69 2f       	mov	r22, r25
    629c:	0e 94 34 30 	call	0x6068	; 0x6068 <mfrc522_write>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    62a0:	80 ed       	ldi	r24, 0xD0	; 208
    62a2:	97 e0       	ldi	r25, 0x07	; 7
    62a4:	a0 e0       	ldi	r26, 0x00	; 0
    62a6:	b0 e0       	ldi	r27, 0x00	; 0
    62a8:	89 83       	std	Y+1, r24	; 0x01
    62aa:	9a 83       	std	Y+2, r25	; 0x02
    62ac:	ab 83       	std	Y+3, r26	; 0x03
    62ae:	bc 83       	std	Y+4, r27	; 0x04
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
    62b0:	84 e0       	ldi	r24, 0x04	; 4
    62b2:	0e 94 59 30 	call	0x60b2	; 0x60b2 <mfrc522_read>
    62b6:	8e 83       	std	Y+6, r24	; 0x06
        i--;
    62b8:	89 81       	ldd	r24, Y+1	; 0x01
    62ba:	9a 81       	ldd	r25, Y+2	; 0x02
    62bc:	ab 81       	ldd	r26, Y+3	; 0x03
    62be:	bc 81       	ldd	r27, Y+4	; 0x04
    62c0:	01 97       	sbiw	r24, 0x01	; 1
    62c2:	a1 09       	sbc	r26, r1
    62c4:	b1 09       	sbc	r27, r1
    62c6:	89 83       	std	Y+1, r24	; 0x01
    62c8:	9a 83       	std	Y+2, r25	; 0x02
    62ca:	ab 83       	std	Y+3, r26	; 0x03
    62cc:	bc 83       	std	Y+4, r27	; 0x04
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
    62ce:	89 81       	ldd	r24, Y+1	; 0x01
    62d0:	9a 81       	ldd	r25, Y+2	; 0x02
    62d2:	ab 81       	ldd	r26, Y+3	; 0x03
    62d4:	bc 81       	ldd	r27, Y+4	; 0x04
    62d6:	00 97       	sbiw	r24, 0x00	; 0
    62d8:	a1 05       	cpc	r26, r1
    62da:	b1 05       	cpc	r27, r1
    62dc:	61 f0       	breq	.+24     	; 0x62f6 <mfrc522_to_card+0x162>
    62de:	8e 81       	ldd	r24, Y+6	; 0x06
    62e0:	88 2f       	mov	r24, r24
    62e2:	90 e0       	ldi	r25, 0x00	; 0
    62e4:	81 70       	andi	r24, 0x01	; 1
    62e6:	90 70       	andi	r25, 0x00	; 0
    62e8:	00 97       	sbiw	r24, 0x00	; 0
    62ea:	29 f4       	brne	.+10     	; 0x62f6 <mfrc522_to_card+0x162>
    62ec:	8e 81       	ldd	r24, Y+6	; 0x06
    62ee:	98 85       	ldd	r25, Y+8	; 0x08
    62f0:	89 23       	and	r24, r25
    62f2:	88 23       	and	r24, r24
    62f4:	e9 f2       	breq	.-70     	; 0x62b0 <mfrc522_to_card+0x11c>

	tmp=mfrc522_read(BitFramingReg);
    62f6:	8d e0       	ldi	r24, 0x0D	; 13
    62f8:	0e 94 59 30 	call	0x60b2	; 0x60b2 <mfrc522_read>
    62fc:	8d 83       	std	Y+5, r24	; 0x05
	mfrc522_write(BitFramingReg,tmp&(~0x80));
    62fe:	8d 81       	ldd	r24, Y+5	; 0x05
    6300:	98 2f       	mov	r25, r24
    6302:	9f 77       	andi	r25, 0x7F	; 127
    6304:	8d e0       	ldi	r24, 0x0D	; 13
    6306:	69 2f       	mov	r22, r25
    6308:	0e 94 34 30 	call	0x6068	; 0x6068 <mfrc522_write>

    if (i != 0)
    630c:	89 81       	ldd	r24, Y+1	; 0x01
    630e:	9a 81       	ldd	r25, Y+2	; 0x02
    6310:	ab 81       	ldd	r26, Y+3	; 0x03
    6312:	bc 81       	ldd	r27, Y+4	; 0x04
    6314:	00 97       	sbiw	r24, 0x00	; 0
    6316:	a1 05       	cpc	r26, r1
    6318:	b1 05       	cpc	r27, r1
    631a:	09 f4       	brne	.+2      	; 0x631e <mfrc522_to_card+0x18a>
    631c:	8c c0       	rjmp	.+280    	; 0x6436 <mfrc522_to_card+0x2a2>
    {
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
    631e:	86 e0       	ldi	r24, 0x06	; 6
    6320:	0e 94 59 30 	call	0x60b2	; 0x60b2 <mfrc522_read>
    6324:	88 2f       	mov	r24, r24
    6326:	90 e0       	ldi	r25, 0x00	; 0
    6328:	8b 71       	andi	r24, 0x1B	; 27
    632a:	90 70       	andi	r25, 0x00	; 0
    632c:	00 97       	sbiw	r24, 0x00	; 0
    632e:	09 f0       	breq	.+2      	; 0x6332 <mfrc522_to_card+0x19e>
    6330:	80 c0       	rjmp	.+256    	; 0x6432 <mfrc522_to_card+0x29e>
        {
            status = CARD_FOUND;
    6332:	81 e0       	ldi	r24, 0x01	; 1
    6334:	8a 87       	std	Y+10, r24	; 0x0a
            if (n & irqEn & 0x01)
    6336:	9e 81       	ldd	r25, Y+6	; 0x06
    6338:	89 85       	ldd	r24, Y+9	; 0x09
    633a:	89 23       	and	r24, r25
    633c:	88 2f       	mov	r24, r24
    633e:	90 e0       	ldi	r25, 0x00	; 0
    6340:	81 70       	andi	r24, 0x01	; 1
    6342:	90 70       	andi	r25, 0x00	; 0
    6344:	88 23       	and	r24, r24
    6346:	11 f0       	breq	.+4      	; 0x634c <mfrc522_to_card+0x1b8>
            {
				status = CARD_NOT_FOUND;			//??
    6348:	82 e0       	ldi	r24, 0x02	; 2
    634a:	8a 87       	std	Y+10, r24	; 0x0a
			}

            if (cmd == Transceive_CMD)
    634c:	8b 85       	ldd	r24, Y+11	; 0x0b
    634e:	8c 30       	cpi	r24, 0x0C	; 12
    6350:	09 f0       	breq	.+2      	; 0x6354 <mfrc522_to_card+0x1c0>
    6352:	71 c0       	rjmp	.+226    	; 0x6436 <mfrc522_to_card+0x2a2>
            {
               	n = mfrc522_read(FIFOLevelReg);
    6354:	8a e0       	ldi	r24, 0x0A	; 10
    6356:	0e 94 59 30 	call	0x60b2	; 0x60b2 <mfrc522_read>
    635a:	8e 83       	std	Y+6, r24	; 0x06
              	lastBits = mfrc522_read(ControlReg) & 0x07;
    635c:	8c e0       	ldi	r24, 0x0C	; 12
    635e:	0e 94 59 30 	call	0x60b2	; 0x60b2 <mfrc522_read>
    6362:	87 70       	andi	r24, 0x07	; 7
    6364:	8f 83       	std	Y+7, r24	; 0x07
                if (lastBits)
    6366:	8f 81       	ldd	r24, Y+7	; 0x07
    6368:	88 23       	and	r24, r24
    636a:	d9 f0       	breq	.+54     	; 0x63a2 <mfrc522_to_card+0x20e>
                {
					*back_data_len = (n-1)*8 + lastBits;
    636c:	8e 81       	ldd	r24, Y+6	; 0x06
    636e:	88 2f       	mov	r24, r24
    6370:	90 e0       	ldi	r25, 0x00	; 0
    6372:	01 97       	sbiw	r24, 0x01	; 1
    6374:	9c 01       	movw	r18, r24
    6376:	22 0f       	add	r18, r18
    6378:	33 1f       	adc	r19, r19
    637a:	22 0f       	add	r18, r18
    637c:	33 1f       	adc	r19, r19
    637e:	22 0f       	add	r18, r18
    6380:	33 1f       	adc	r19, r19
    6382:	8f 81       	ldd	r24, Y+7	; 0x07
    6384:	88 2f       	mov	r24, r24
    6386:	90 e0       	ldi	r25, 0x00	; 0
    6388:	82 0f       	add	r24, r18
    638a:	93 1f       	adc	r25, r19
    638c:	aa 27       	eor	r26, r26
    638e:	97 fd       	sbrc	r25, 7
    6390:	a0 95       	com	r26
    6392:	ba 2f       	mov	r27, r26
    6394:	e9 89       	ldd	r30, Y+17	; 0x11
    6396:	fa 89       	ldd	r31, Y+18	; 0x12
    6398:	80 83       	st	Z, r24
    639a:	91 83       	std	Z+1, r25	; 0x01
    639c:	a2 83       	std	Z+2, r26	; 0x02
    639e:	b3 83       	std	Z+3, r27	; 0x03
    63a0:	13 c0       	rjmp	.+38     	; 0x63c8 <mfrc522_to_card+0x234>
				}
                else
                {
					*back_data_len = n*8;
    63a2:	8e 81       	ldd	r24, Y+6	; 0x06
    63a4:	88 2f       	mov	r24, r24
    63a6:	90 e0       	ldi	r25, 0x00	; 0
    63a8:	88 0f       	add	r24, r24
    63aa:	99 1f       	adc	r25, r25
    63ac:	88 0f       	add	r24, r24
    63ae:	99 1f       	adc	r25, r25
    63b0:	88 0f       	add	r24, r24
    63b2:	99 1f       	adc	r25, r25
    63b4:	aa 27       	eor	r26, r26
    63b6:	97 fd       	sbrc	r25, 7
    63b8:	a0 95       	com	r26
    63ba:	ba 2f       	mov	r27, r26
    63bc:	e9 89       	ldd	r30, Y+17	; 0x11
    63be:	fa 89       	ldd	r31, Y+18	; 0x12
    63c0:	80 83       	st	Z, r24
    63c2:	91 83       	std	Z+1, r25	; 0x01
    63c4:	a2 83       	std	Z+2, r26	; 0x02
    63c6:	b3 83       	std	Z+3, r27	; 0x03
				}

                if (n == 0)
    63c8:	8e 81       	ldd	r24, Y+6	; 0x06
    63ca:	88 23       	and	r24, r24
    63cc:	11 f4       	brne	.+4      	; 0x63d2 <mfrc522_to_card+0x23e>
                {
					n = 1;
    63ce:	81 e0       	ldi	r24, 0x01	; 1
    63d0:	8e 83       	std	Y+6, r24	; 0x06
				}
                if (n > MAX_LEN)
    63d2:	8e 81       	ldd	r24, Y+6	; 0x06
    63d4:	81 31       	cpi	r24, 0x11	; 17
    63d6:	10 f0       	brcs	.+4      	; 0x63dc <mfrc522_to_card+0x248>
                {
					n = MAX_LEN;
    63d8:	80 e1       	ldi	r24, 0x10	; 16
    63da:	8e 83       	std	Y+6, r24	; 0x06
				}

				//Reading the received data in FIFO
                for (i=0; i<n; i++)
    63dc:	19 82       	std	Y+1, r1	; 0x01
    63de:	1a 82       	std	Y+2, r1	; 0x02
    63e0:	1b 82       	std	Y+3, r1	; 0x03
    63e2:	1c 82       	std	Y+4, r1	; 0x04
    63e4:	17 c0       	rjmp	.+46     	; 0x6414 <mfrc522_to_card+0x280>
                {
					back_data[i] = mfrc522_read(FIFODataReg);
    63e6:	29 81       	ldd	r18, Y+1	; 0x01
    63e8:	3a 81       	ldd	r19, Y+2	; 0x02
    63ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    63ec:	98 89       	ldd	r25, Y+16	; 0x10
    63ee:	8c 01       	movw	r16, r24
    63f0:	02 0f       	add	r16, r18
    63f2:	13 1f       	adc	r17, r19
    63f4:	89 e0       	ldi	r24, 0x09	; 9
    63f6:	0e 94 59 30 	call	0x60b2	; 0x60b2 <mfrc522_read>
    63fa:	f8 01       	movw	r30, r16
    63fc:	80 83       	st	Z, r24
                {
					n = MAX_LEN;
				}

				//Reading the received data in FIFO
                for (i=0; i<n; i++)
    63fe:	89 81       	ldd	r24, Y+1	; 0x01
    6400:	9a 81       	ldd	r25, Y+2	; 0x02
    6402:	ab 81       	ldd	r26, Y+3	; 0x03
    6404:	bc 81       	ldd	r27, Y+4	; 0x04
    6406:	01 96       	adiw	r24, 0x01	; 1
    6408:	a1 1d       	adc	r26, r1
    640a:	b1 1d       	adc	r27, r1
    640c:	89 83       	std	Y+1, r24	; 0x01
    640e:	9a 83       	std	Y+2, r25	; 0x02
    6410:	ab 83       	std	Y+3, r26	; 0x03
    6412:	bc 83       	std	Y+4, r27	; 0x04
    6414:	8e 81       	ldd	r24, Y+6	; 0x06
    6416:	28 2f       	mov	r18, r24
    6418:	30 e0       	ldi	r19, 0x00	; 0
    641a:	40 e0       	ldi	r20, 0x00	; 0
    641c:	50 e0       	ldi	r21, 0x00	; 0
    641e:	89 81       	ldd	r24, Y+1	; 0x01
    6420:	9a 81       	ldd	r25, Y+2	; 0x02
    6422:	ab 81       	ldd	r26, Y+3	; 0x03
    6424:	bc 81       	ldd	r27, Y+4	; 0x04
    6426:	82 17       	cp	r24, r18
    6428:	93 07       	cpc	r25, r19
    642a:	a4 07       	cpc	r26, r20
    642c:	b5 07       	cpc	r27, r21
    642e:	d8 f2       	brcs	.-74     	; 0x63e6 <mfrc522_to_card+0x252>
    6430:	02 c0       	rjmp	.+4      	; 0x6436 <mfrc522_to_card+0x2a2>
				}
            }
        }
        else
        {
			status = ERROR;
    6432:	83 e0       	ldi	r24, 0x03	; 3
    6434:	8a 87       	std	Y+10, r24	; 0x0a
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE);

    return status;
    6436:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    6438:	64 96       	adiw	r28, 0x14	; 20
    643a:	0f b6       	in	r0, 0x3f	; 63
    643c:	f8 94       	cli
    643e:	de bf       	out	0x3e, r29	; 62
    6440:	0f be       	out	0x3f, r0	; 63
    6442:	cd bf       	out	0x3d, r28	; 61
    6444:	cf 91       	pop	r28
    6446:	df 91       	pop	r29
    6448:	1f 91       	pop	r17
    644a:	0f 91       	pop	r16
    644c:	08 95       	ret

0000644e <mfrc522_get_card_serial>:


uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
    644e:	0f 93       	push	r16
    6450:	1f 93       	push	r17
    6452:	df 93       	push	r29
    6454:	cf 93       	push	r28
    6456:	cd b7       	in	r28, 0x3d	; 61
    6458:	de b7       	in	r29, 0x3e	; 62
    645a:	29 97       	sbiw	r28, 0x09	; 9
    645c:	0f b6       	in	r0, 0x3f	; 63
    645e:	f8 94       	cli
    6460:	de bf       	out	0x3e, r29	; 62
    6462:	0f be       	out	0x3f, r0	; 63
    6464:	cd bf       	out	0x3d, r28	; 61
    6466:	99 87       	std	Y+9, r25	; 0x09
    6468:	88 87       	std	Y+8, r24	; 0x08
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    646a:	19 82       	std	Y+1, r1	; 0x01
    uint32_t unLen;

	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
    646c:	8d e0       	ldi	r24, 0x0D	; 13
    646e:	60 e0       	ldi	r22, 0x00	; 0
    6470:	0e 94 34 30 	call	0x6068	; 0x6068 <mfrc522_write>

    serial_out[0] = PICC_ANTICOLL;
    6474:	e8 85       	ldd	r30, Y+8	; 0x08
    6476:	f9 85       	ldd	r31, Y+9	; 0x09
    6478:	83 e9       	ldi	r24, 0x93	; 147
    647a:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
    647c:	88 85       	ldd	r24, Y+8	; 0x08
    647e:	99 85       	ldd	r25, Y+9	; 0x09
    6480:	fc 01       	movw	r30, r24
    6482:	31 96       	adiw	r30, 0x01	; 1
    6484:	80 e2       	ldi	r24, 0x20	; 32
    6486:	80 83       	st	Z, r24
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
    6488:	28 85       	ldd	r18, Y+8	; 0x08
    648a:	39 85       	ldd	r19, Y+9	; 0x09
    648c:	e8 85       	ldd	r30, Y+8	; 0x08
    648e:	f9 85       	ldd	r31, Y+9	; 0x09
    6490:	de 01       	movw	r26, r28
    6492:	14 96       	adiw	r26, 0x04	; 4
    6494:	8c e0       	ldi	r24, 0x0C	; 12
    6496:	b9 01       	movw	r22, r18
    6498:	42 e0       	ldi	r20, 0x02	; 2
    649a:	9f 01       	movw	r18, r30
    649c:	8d 01       	movw	r16, r26
    649e:	0e 94 ca 30 	call	0x6194	; 0x6194 <mfrc522_to_card>
    64a2:	8b 83       	std	Y+3, r24	; 0x03

    if (status == CARD_FOUND)
    64a4:	8b 81       	ldd	r24, Y+3	; 0x03
    64a6:	81 30       	cpi	r24, 0x01	; 1
    64a8:	11 f5       	brne	.+68     	; 0x64ee <mfrc522_get_card_serial+0xa0>
	{
		//Check card serial number
		for (i=0; i<4; i++)
    64aa:	1a 82       	std	Y+2, r1	; 0x02
    64ac:	0f c0       	rjmp	.+30     	; 0x64cc <mfrc522_get_card_serial+0x7e>
		{
		 	serNumCheck ^= serial_out[i];
    64ae:	8a 81       	ldd	r24, Y+2	; 0x02
    64b0:	28 2f       	mov	r18, r24
    64b2:	30 e0       	ldi	r19, 0x00	; 0
    64b4:	88 85       	ldd	r24, Y+8	; 0x08
    64b6:	99 85       	ldd	r25, Y+9	; 0x09
    64b8:	fc 01       	movw	r30, r24
    64ba:	e2 0f       	add	r30, r18
    64bc:	f3 1f       	adc	r31, r19
    64be:	90 81       	ld	r25, Z
    64c0:	89 81       	ldd	r24, Y+1	; 0x01
    64c2:	89 27       	eor	r24, r25
    64c4:	89 83       	std	Y+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
    64c6:	8a 81       	ldd	r24, Y+2	; 0x02
    64c8:	8f 5f       	subi	r24, 0xFF	; 255
    64ca:	8a 83       	std	Y+2, r24	; 0x02
    64cc:	8a 81       	ldd	r24, Y+2	; 0x02
    64ce:	84 30       	cpi	r24, 0x04	; 4
    64d0:	70 f3       	brcs	.-36     	; 0x64ae <mfrc522_get_card_serial+0x60>
		{
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
    64d2:	8a 81       	ldd	r24, Y+2	; 0x02
    64d4:	28 2f       	mov	r18, r24
    64d6:	30 e0       	ldi	r19, 0x00	; 0
    64d8:	88 85       	ldd	r24, Y+8	; 0x08
    64da:	99 85       	ldd	r25, Y+9	; 0x09
    64dc:	fc 01       	movw	r30, r24
    64de:	e2 0f       	add	r30, r18
    64e0:	f3 1f       	adc	r31, r19
    64e2:	90 81       	ld	r25, Z
    64e4:	89 81       	ldd	r24, Y+1	; 0x01
    64e6:	98 17       	cp	r25, r24
    64e8:	11 f0       	breq	.+4      	; 0x64ee <mfrc522_get_card_serial+0xa0>
		{
			status = ERROR;
    64ea:	83 e0       	ldi	r24, 0x03	; 3
    64ec:	8b 83       	std	Y+3, r24	; 0x03
		}
    }
    return status;
    64ee:	8b 81       	ldd	r24, Y+3	; 0x03
}
    64f0:	29 96       	adiw	r28, 0x09	; 9
    64f2:	0f b6       	in	r0, 0x3f	; 63
    64f4:	f8 94       	cli
    64f6:	de bf       	out	0x3e, r29	; 62
    64f8:	0f be       	out	0x3f, r0	; 63
    64fa:	cd bf       	out	0x3d, r28	; 61
    64fc:	cf 91       	pop	r28
    64fe:	df 91       	pop	r29
    6500:	1f 91       	pop	r17
    6502:	0f 91       	pop	r16
    6504:	08 95       	ret

00006506 <spi_init>:
#include "spi.h"

#if SPI_CONFIG_AS_MASTER        // defined in spi_config.h as 1
void spi_init()
{
    6506:	df 93       	push	r29
    6508:	cf 93       	push	r28
    650a:	cd b7       	in	r28, 0x3d	; 61
    650c:	de b7       	in	r29, 0x3e	; 62
	SPI_DDR = (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
    650e:	e7 e3       	ldi	r30, 0x37	; 55
    6510:	f0 e0       	ldi	r31, 0x00	; 0
    6512:	80 eb       	ldi	r24, 0xB0	; 176
    6514:	80 83       	st	Z, r24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//prescaler 16
    6516:	ed e2       	ldi	r30, 0x2D	; 45
    6518:	f0 e0       	ldi	r31, 0x00	; 0
    651a:	81 e5       	ldi	r24, 0x51	; 81
    651c:	80 83       	st	Z, r24
    //  SPCR = 0x00;
}
    651e:	cf 91       	pop	r28
    6520:	df 91       	pop	r29
    6522:	08 95       	ret

00006524 <spi_transmit>:


uint8_t spi_transmit(uint8_t data)
{
    6524:	df 93       	push	r29
    6526:	cf 93       	push	r28
    6528:	0f 92       	push	r0
    652a:	cd b7       	in	r28, 0x3d	; 61
    652c:	de b7       	in	r29, 0x3e	; 62
    652e:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    6530:	ef e2       	ldi	r30, 0x2F	; 47
    6532:	f0 e0       	ldi	r31, 0x00	; 0
    6534:	89 81       	ldd	r24, Y+1	; 0x01
    6536:	80 83       	st	Z, r24
	while(!(SPSR & (1<<SPIF)));
    6538:	ee e2       	ldi	r30, 0x2E	; 46
    653a:	f0 e0       	ldi	r31, 0x00	; 0
    653c:	80 81       	ld	r24, Z
    653e:	88 23       	and	r24, r24
    6540:	dc f7       	brge	.-10     	; 0x6538 <spi_transmit+0x14>

	return SPDR;
    6542:	ef e2       	ldi	r30, 0x2F	; 47
    6544:	f0 e0       	ldi	r31, 0x00	; 0
    6546:	80 81       	ld	r24, Z
}
    6548:	0f 90       	pop	r0
    654a:	cf 91       	pop	r28
    654c:	df 91       	pop	r29
    654e:	08 95       	ret

00006550 <ESP_Read_Response>:
volatile int16_t Counter1 = 0, pointer = 0;
uint32_t TimeOut1 = 0;
char RESPONSE_BUFFER1[DEFAULT_BUFFER_SIZE1];

void ESP_Read_Response(char* _Expected_Response)
{
    6550:	df 93       	push	r29
    6552:	cf 93       	push	r28
    6554:	cd b7       	in	r28, 0x3d	; 61
    6556:	de b7       	in	r29, 0x3e	; 62
    6558:	e1 97       	sbiw	r28, 0x31	; 49
    655a:	0f b6       	in	r0, 0x3f	; 63
    655c:	f8 94       	cli
    655e:	de bf       	out	0x3e, r29	; 62
    6560:	0f be       	out	0x3f, r0	; 63
    6562:	cd bf       	out	0x3d, r28	; 61
    6564:	9b a7       	std	Y+43, r25	; 0x2b
    6566:	8a a7       	std	Y+42, r24	; 0x2a
			}
		}
		_delay_ms(1);
		TimeCount++;
	}
}
    6568:	2d b7       	in	r18, 0x3d	; 61
    656a:	3e b7       	in	r19, 0x3e	; 62
    656c:	39 ab       	std	Y+49, r19	; 0x31
    656e:	28 ab       	std	Y+48, r18	; 0x30
volatile int16_t Counter1 = 0, pointer = 0;
uint32_t TimeOut1 = 0;
char RESPONSE_BUFFER1[DEFAULT_BUFFER_SIZE1];

void ESP_Read_Response(char* _Expected_Response)
{
    6570:	8d b7       	in	r24, 0x3d	; 61
    6572:	9e b7       	in	r25, 0x3e	; 62
    6574:	9d a7       	std	Y+45, r25	; 0x2d
    6576:	8c a7       	std	Y+44, r24	; 0x2c
	uint8_t EXPECTED_RESPONSE_LENGTH = strlen(_Expected_Response);
    6578:	8a a5       	ldd	r24, Y+42	; 0x2a
    657a:	9b a5       	ldd	r25, Y+43	; 0x2b
    657c:	0e 94 a1 3a 	call	0x7542	; 0x7542 <strlen>
    6580:	8f a3       	std	Y+39, r24	; 0x27
	uint32_t TimeCount = 0, ResponseBufferLength;
    6582:	1b a2       	std	Y+35, r1	; 0x23
    6584:	1c a2       	std	Y+36, r1	; 0x24
    6586:	1d a2       	std	Y+37, r1	; 0x25
    6588:	1e a2       	std	Y+38, r1	; 0x26
	char RECEIVED_CRLF_BUF[EXPECTED_RESPONSE_LENGTH];
    658a:	8f a1       	ldd	r24, Y+39	; 0x27
    658c:	88 2f       	mov	r24, r24
    658e:	90 e0       	ldi	r25, 0x00	; 0
    6590:	2d b7       	in	r18, 0x3d	; 61
    6592:	3e b7       	in	r19, 0x3e	; 62
    6594:	28 1b       	sub	r18, r24
    6596:	39 0b       	sbc	r19, r25
    6598:	0f b6       	in	r0, 0x3f	; 63
    659a:	f8 94       	cli
    659c:	3e bf       	out	0x3e, r19	; 62
    659e:	0f be       	out	0x3f, r0	; 63
    65a0:	2d bf       	out	0x3d, r18	; 61
    65a2:	8d b7       	in	r24, 0x3d	; 61
    65a4:	9e b7       	in	r25, 0x3e	; 62
    65a6:	01 96       	adiw	r24, 0x01	; 1
    65a8:	9f a7       	std	Y+47, r25	; 0x2f
    65aa:	8e a7       	std	Y+46, r24	; 0x2e
    65ac:	8e a5       	ldd	r24, Y+46	; 0x2e
    65ae:	9f a5       	ldd	r25, Y+47	; 0x2f
    65b0:	00 96       	adiw	r24, 0x00	; 0
    65b2:	9f a7       	std	Y+47, r25	; 0x2f
    65b4:	8e a7       	std	Y+46, r24	; 0x2e
    65b6:	2e a5       	ldd	r18, Y+46	; 0x2e
    65b8:	3f a5       	ldd	r19, Y+47	; 0x2f
    65ba:	39 a7       	std	Y+41, r19	; 0x29
    65bc:	28 a7       	std	Y+40, r18	; 0x28

	while(1)
	{
		if(TimeCount >= (DEFAULT_TIMEOUT1+TimeOut1))
    65be:	80 91 31 05 	lds	r24, 0x0531
    65c2:	90 91 32 05 	lds	r25, 0x0532
    65c6:	a0 91 33 05 	lds	r26, 0x0533
    65ca:	b0 91 34 05 	lds	r27, 0x0534
    65ce:	9c 01       	movw	r18, r24
    65d0:	ad 01       	movw	r20, r26
    65d2:	20 5f       	subi	r18, 0xF0	; 240
    65d4:	38 4d       	sbci	r19, 0xD8	; 216
    65d6:	4f 4f       	sbci	r20, 0xFF	; 255
    65d8:	5f 4f       	sbci	r21, 0xFF	; 255
    65da:	8b a1       	ldd	r24, Y+35	; 0x23
    65dc:	9c a1       	ldd	r25, Y+36	; 0x24
    65de:	ad a1       	ldd	r26, Y+37	; 0x25
    65e0:	be a1       	ldd	r27, Y+38	; 0x26
    65e2:	82 17       	cp	r24, r18
    65e4:	93 07       	cpc	r25, r19
    65e6:	a4 07       	cpc	r26, r20
    65e8:	b5 07       	cpc	r27, r21
    65ea:	60 f0       	brcs	.+24     	; 0x6604 <ESP_Read_Response+0xb4>
		{
			TimeOut1 = 0;
    65ec:	10 92 31 05 	sts	0x0531, r1
    65f0:	10 92 32 05 	sts	0x0532, r1
    65f4:	10 92 33 05 	sts	0x0533, r1
    65f8:	10 92 34 05 	sts	0x0534, r1
			Response_Status1 = ESP8266_RESPONSE_TIMEOUT;
    65fc:	82 e0       	ldi	r24, 0x02	; 2
    65fe:	80 93 38 07 	sts	0x0738, r24
    6602:	7a c1       	rjmp	.+756    	; 0x68f8 <ESP_Read_Response+0x3a8>
			return;
		}

		if(Response_Status1 == ESP8266_RESPONSE_STARTING)
    6604:	80 91 38 07 	lds	r24, 0x0738
    6608:	84 30       	cpi	r24, 0x04	; 4
    660a:	11 f4       	brne	.+4      	; 0x6610 <ESP_Read_Response+0xc0>
		{
			Response_Status1 = ESP8266_RESPONSE_WAITING;
    660c:	10 92 38 07 	sts	0x0738, r1
		}
		ResponseBufferLength = strlen(RESPONSE_BUFFER1);
    6610:	89 e3       	ldi	r24, 0x39	; 57
    6612:	97 e0       	ldi	r25, 0x07	; 7
    6614:	0e 94 a1 3a 	call	0x7542	; 0x7542 <strlen>
    6618:	cc 01       	movw	r24, r24
    661a:	a0 e0       	ldi	r26, 0x00	; 0
    661c:	b0 e0       	ldi	r27, 0x00	; 0
    661e:	8f 8f       	std	Y+31, r24	; 0x1f
    6620:	98 a3       	std	Y+32, r25	; 0x20
    6622:	a9 a3       	std	Y+33, r26	; 0x21
    6624:	ba a3       	std	Y+34, r27	; 0x22
		if (ResponseBufferLength)
    6626:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6628:	98 a1       	ldd	r25, Y+32	; 0x20
    662a:	a9 a1       	ldd	r26, Y+33	; 0x21
    662c:	ba a1       	ldd	r27, Y+34	; 0x22
    662e:	00 97       	sbiw	r24, 0x00	; 0
    6630:	a1 05       	cpc	r26, r1
    6632:	b1 05       	cpc	r27, r1
    6634:	09 f4       	brne	.+2      	; 0x6638 <ESP_Read_Response+0xe8>
    6636:	e2 c0       	rjmp	.+452    	; 0x67fc <ESP_Read_Response+0x2ac>
    6638:	80 e0       	ldi	r24, 0x00	; 0
    663a:	90 e0       	ldi	r25, 0x00	; 0
    663c:	a0 e8       	ldi	r26, 0x80	; 128
    663e:	bf e3       	ldi	r27, 0x3F	; 63
    6640:	89 8f       	std	Y+25, r24	; 0x19
    6642:	9a 8f       	std	Y+26, r25	; 0x1a
    6644:	ab 8f       	std	Y+27, r26	; 0x1b
    6646:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6648:	69 8d       	ldd	r22, Y+25	; 0x19
    664a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    664c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    664e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6650:	20 e0       	ldi	r18, 0x00	; 0
    6652:	30 e0       	ldi	r19, 0x00	; 0
    6654:	4a ef       	ldi	r20, 0xFA	; 250
    6656:	54 e4       	ldi	r21, 0x44	; 68
    6658:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    665c:	dc 01       	movw	r26, r24
    665e:	cb 01       	movw	r24, r22
    6660:	8d 8b       	std	Y+21, r24	; 0x15
    6662:	9e 8b       	std	Y+22, r25	; 0x16
    6664:	af 8b       	std	Y+23, r26	; 0x17
    6666:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6668:	6d 89       	ldd	r22, Y+21	; 0x15
    666a:	7e 89       	ldd	r23, Y+22	; 0x16
    666c:	8f 89       	ldd	r24, Y+23	; 0x17
    666e:	98 8d       	ldd	r25, Y+24	; 0x18
    6670:	20 e0       	ldi	r18, 0x00	; 0
    6672:	30 e0       	ldi	r19, 0x00	; 0
    6674:	40 e8       	ldi	r20, 0x80	; 128
    6676:	5f e3       	ldi	r21, 0x3F	; 63
    6678:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    667c:	88 23       	and	r24, r24
    667e:	2c f4       	brge	.+10     	; 0x668a <ESP_Read_Response+0x13a>
		__ticks = 1;
    6680:	81 e0       	ldi	r24, 0x01	; 1
    6682:	90 e0       	ldi	r25, 0x00	; 0
    6684:	9c 8b       	std	Y+20, r25	; 0x14
    6686:	8b 8b       	std	Y+19, r24	; 0x13
    6688:	3f c0       	rjmp	.+126    	; 0x6708 <ESP_Read_Response+0x1b8>
	else if (__tmp > 65535)
    668a:	6d 89       	ldd	r22, Y+21	; 0x15
    668c:	7e 89       	ldd	r23, Y+22	; 0x16
    668e:	8f 89       	ldd	r24, Y+23	; 0x17
    6690:	98 8d       	ldd	r25, Y+24	; 0x18
    6692:	20 e0       	ldi	r18, 0x00	; 0
    6694:	3f ef       	ldi	r19, 0xFF	; 255
    6696:	4f e7       	ldi	r20, 0x7F	; 127
    6698:	57 e4       	ldi	r21, 0x47	; 71
    669a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    669e:	18 16       	cp	r1, r24
    66a0:	4c f5       	brge	.+82     	; 0x66f4 <ESP_Read_Response+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    66a2:	69 8d       	ldd	r22, Y+25	; 0x19
    66a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    66a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    66a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    66aa:	20 e0       	ldi	r18, 0x00	; 0
    66ac:	30 e0       	ldi	r19, 0x00	; 0
    66ae:	40 e2       	ldi	r20, 0x20	; 32
    66b0:	51 e4       	ldi	r21, 0x41	; 65
    66b2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    66b6:	dc 01       	movw	r26, r24
    66b8:	cb 01       	movw	r24, r22
    66ba:	bc 01       	movw	r22, r24
    66bc:	cd 01       	movw	r24, r26
    66be:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    66c2:	dc 01       	movw	r26, r24
    66c4:	cb 01       	movw	r24, r22
    66c6:	9c 8b       	std	Y+20, r25	; 0x14
    66c8:	8b 8b       	std	Y+19, r24	; 0x13
    66ca:	0f c0       	rjmp	.+30     	; 0x66ea <ESP_Read_Response+0x19a>
    66cc:	88 ec       	ldi	r24, 0xC8	; 200
    66ce:	90 e0       	ldi	r25, 0x00	; 0
    66d0:	9a 8b       	std	Y+18, r25	; 0x12
    66d2:	89 8b       	std	Y+17, r24	; 0x11
    66d4:	89 89       	ldd	r24, Y+17	; 0x11
    66d6:	9a 89       	ldd	r25, Y+18	; 0x12
    66d8:	01 97       	sbiw	r24, 0x01	; 1
    66da:	f1 f7       	brne	.-4      	; 0x66d8 <ESP_Read_Response+0x188>
    66dc:	9a 8b       	std	Y+18, r25	; 0x12
    66de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    66e0:	8b 89       	ldd	r24, Y+19	; 0x13
    66e2:	9c 89       	ldd	r25, Y+20	; 0x14
    66e4:	01 97       	sbiw	r24, 0x01	; 1
    66e6:	9c 8b       	std	Y+20, r25	; 0x14
    66e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    66ea:	8b 89       	ldd	r24, Y+19	; 0x13
    66ec:	9c 89       	ldd	r25, Y+20	; 0x14
    66ee:	00 97       	sbiw	r24, 0x00	; 0
    66f0:	69 f7       	brne	.-38     	; 0x66cc <ESP_Read_Response+0x17c>
    66f2:	14 c0       	rjmp	.+40     	; 0x671c <ESP_Read_Response+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    66f4:	6d 89       	ldd	r22, Y+21	; 0x15
    66f6:	7e 89       	ldd	r23, Y+22	; 0x16
    66f8:	8f 89       	ldd	r24, Y+23	; 0x17
    66fa:	98 8d       	ldd	r25, Y+24	; 0x18
    66fc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    6700:	dc 01       	movw	r26, r24
    6702:	cb 01       	movw	r24, r22
    6704:	9c 8b       	std	Y+20, r25	; 0x14
    6706:	8b 8b       	std	Y+19, r24	; 0x13
    6708:	8b 89       	ldd	r24, Y+19	; 0x13
    670a:	9c 89       	ldd	r25, Y+20	; 0x14
    670c:	98 8b       	std	Y+16, r25	; 0x10
    670e:	8f 87       	std	Y+15, r24	; 0x0f
    6710:	8f 85       	ldd	r24, Y+15	; 0x0f
    6712:	98 89       	ldd	r25, Y+16	; 0x10
    6714:	01 97       	sbiw	r24, 0x01	; 1
    6716:	f1 f7       	brne	.-4      	; 0x6714 <ESP_Read_Response+0x1c4>
    6718:	98 8b       	std	Y+16, r25	; 0x10
    671a:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(1);
			TimeCount++;
    671c:	8b a1       	ldd	r24, Y+35	; 0x23
    671e:	9c a1       	ldd	r25, Y+36	; 0x24
    6720:	ad a1       	ldd	r26, Y+37	; 0x25
    6722:	be a1       	ldd	r27, Y+38	; 0x26
    6724:	01 96       	adiw	r24, 0x01	; 1
    6726:	a1 1d       	adc	r26, r1
    6728:	b1 1d       	adc	r27, r1
    672a:	8b a3       	std	Y+35, r24	; 0x23
    672c:	9c a3       	std	Y+36, r25	; 0x24
    672e:	ad a3       	std	Y+37, r26	; 0x25
    6730:	be a3       	std	Y+38, r27	; 0x26
			if (ResponseBufferLength==strlen(RESPONSE_BUFFER1))
    6732:	89 e3       	ldi	r24, 0x39	; 57
    6734:	97 e0       	ldi	r25, 0x07	; 7
    6736:	0e 94 a1 3a 	call	0x7542	; 0x7542 <strlen>
    673a:	9c 01       	movw	r18, r24
    673c:	40 e0       	ldi	r20, 0x00	; 0
    673e:	50 e0       	ldi	r21, 0x00	; 0
    6740:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6742:	98 a1       	ldd	r25, Y+32	; 0x20
    6744:	a9 a1       	ldd	r26, Y+33	; 0x21
    6746:	ba a1       	ldd	r27, Y+34	; 0x22
    6748:	28 17       	cp	r18, r24
    674a:	39 07       	cpc	r19, r25
    674c:	4a 07       	cpc	r20, r26
    674e:	5b 07       	cpc	r21, r27
    6750:	09 f0       	breq	.+2      	; 0x6754 <ESP_Read_Response+0x204>
    6752:	54 c0       	rjmp	.+168    	; 0x67fc <ESP_Read_Response+0x2ac>
			{
				for (uint16_t i=0;i<ResponseBufferLength;i++)
    6754:	1e 8e       	std	Y+30, r1	; 0x1e
    6756:	1d 8e       	std	Y+29, r1	; 0x1d
    6758:	42 c0       	rjmp	.+132    	; 0x67de <ESP_Read_Response+0x28e>
				{
					memmove(RECEIVED_CRLF_BUF, RECEIVED_CRLF_BUF + 1, EXPECTED_RESPONSE_LENGTH-1);
    675a:	68 a5       	ldd	r22, Y+40	; 0x28
    675c:	79 a5       	ldd	r23, Y+41	; 0x29
    675e:	88 a5       	ldd	r24, Y+40	; 0x28
    6760:	99 a5       	ldd	r25, Y+41	; 0x29
    6762:	ac 01       	movw	r20, r24
    6764:	4f 5f       	subi	r20, 0xFF	; 255
    6766:	5f 4f       	sbci	r21, 0xFF	; 255
    6768:	8f a1       	ldd	r24, Y+39	; 0x27
    676a:	88 2f       	mov	r24, r24
    676c:	90 e0       	ldi	r25, 0x00	; 0
    676e:	01 97       	sbiw	r24, 0x01	; 1
    6770:	9c 01       	movw	r18, r24
    6772:	cb 01       	movw	r24, r22
    6774:	ba 01       	movw	r22, r20
    6776:	a9 01       	movw	r20, r18
    6778:	0e 94 88 3a 	call	0x7510	; 0x7510 <memmove>
					RECEIVED_CRLF_BUF[EXPECTED_RESPONSE_LENGTH-1] = RESPONSE_BUFFER1[i];
    677c:	8f a1       	ldd	r24, Y+39	; 0x27
    677e:	88 2f       	mov	r24, r24
    6780:	90 e0       	ldi	r25, 0x00	; 0
    6782:	9c 01       	movw	r18, r24
    6784:	21 50       	subi	r18, 0x01	; 1
    6786:	30 40       	sbci	r19, 0x00	; 0
    6788:	8d 8d       	ldd	r24, Y+29	; 0x1d
    678a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    678c:	fc 01       	movw	r30, r24
    678e:	e7 5c       	subi	r30, 0xC7	; 199
    6790:	f8 4f       	sbci	r31, 0xF8	; 248
    6792:	40 81       	ld	r20, Z
    6794:	88 a5       	ldd	r24, Y+40	; 0x28
    6796:	99 a5       	ldd	r25, Y+41	; 0x29
    6798:	fc 01       	movw	r30, r24
    679a:	e2 0f       	add	r30, r18
    679c:	f3 1f       	adc	r31, r19
    679e:	40 83       	st	Z, r20
					if(!strncmp(RECEIVED_CRLF_BUF, _Expected_Response, EXPECTED_RESPONSE_LENGTH))
    67a0:	48 a5       	ldd	r20, Y+40	; 0x28
    67a2:	59 a5       	ldd	r21, Y+41	; 0x29
    67a4:	8f a1       	ldd	r24, Y+39	; 0x27
    67a6:	e8 2f       	mov	r30, r24
    67a8:	f0 e0       	ldi	r31, 0x00	; 0
    67aa:	2a a5       	ldd	r18, Y+42	; 0x2a
    67ac:	3b a5       	ldd	r19, Y+43	; 0x2b
    67ae:	ca 01       	movw	r24, r20
    67b0:	b9 01       	movw	r22, r18
    67b2:	af 01       	movw	r20, r30
    67b4:	0e 94 aa 3a 	call	0x7554	; 0x7554 <strncmp>
    67b8:	00 97       	sbiw	r24, 0x00	; 0
    67ba:	61 f4       	brne	.+24     	; 0x67d4 <ESP_Read_Response+0x284>
					{
						TimeOut1 = 0;
    67bc:	10 92 31 05 	sts	0x0531, r1
    67c0:	10 92 32 05 	sts	0x0532, r1
    67c4:	10 92 33 05 	sts	0x0533, r1
    67c8:	10 92 34 05 	sts	0x0534, r1
						Response_Status1 = ESP8266_RESPONSE_FINISHED;
    67cc:	81 e0       	ldi	r24, 0x01	; 1
    67ce:	80 93 38 07 	sts	0x0738, r24
    67d2:	92 c0       	rjmp	.+292    	; 0x68f8 <ESP_Read_Response+0x3a8>
		{
			_delay_ms(1);
			TimeCount++;
			if (ResponseBufferLength==strlen(RESPONSE_BUFFER1))
			{
				for (uint16_t i=0;i<ResponseBufferLength;i++)
    67d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    67d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    67d8:	01 96       	adiw	r24, 0x01	; 1
    67da:	9e 8f       	std	Y+30, r25	; 0x1e
    67dc:	8d 8f       	std	Y+29, r24	; 0x1d
    67de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    67e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    67e2:	9c 01       	movw	r18, r24
    67e4:	40 e0       	ldi	r20, 0x00	; 0
    67e6:	50 e0       	ldi	r21, 0x00	; 0
    67e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    67ea:	98 a1       	ldd	r25, Y+32	; 0x20
    67ec:	a9 a1       	ldd	r26, Y+33	; 0x21
    67ee:	ba a1       	ldd	r27, Y+34	; 0x22
    67f0:	28 17       	cp	r18, r24
    67f2:	39 07       	cpc	r19, r25
    67f4:	4a 07       	cpc	r20, r26
    67f6:	5b 07       	cpc	r21, r27
    67f8:	08 f4       	brcc	.+2      	; 0x67fc <ESP_Read_Response+0x2ac>
    67fa:	af cf       	rjmp	.-162    	; 0x675a <ESP_Read_Response+0x20a>
    67fc:	80 e0       	ldi	r24, 0x00	; 0
    67fe:	90 e0       	ldi	r25, 0x00	; 0
    6800:	a0 e8       	ldi	r26, 0x80	; 128
    6802:	bf e3       	ldi	r27, 0x3F	; 63
    6804:	8b 87       	std	Y+11, r24	; 0x0b
    6806:	9c 87       	std	Y+12, r25	; 0x0c
    6808:	ad 87       	std	Y+13, r26	; 0x0d
    680a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    680c:	6b 85       	ldd	r22, Y+11	; 0x0b
    680e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6810:	8d 85       	ldd	r24, Y+13	; 0x0d
    6812:	9e 85       	ldd	r25, Y+14	; 0x0e
    6814:	20 e0       	ldi	r18, 0x00	; 0
    6816:	30 e0       	ldi	r19, 0x00	; 0
    6818:	4a ef       	ldi	r20, 0xFA	; 250
    681a:	54 e4       	ldi	r21, 0x44	; 68
    681c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    6820:	dc 01       	movw	r26, r24
    6822:	cb 01       	movw	r24, r22
    6824:	8f 83       	std	Y+7, r24	; 0x07
    6826:	98 87       	std	Y+8, r25	; 0x08
    6828:	a9 87       	std	Y+9, r26	; 0x09
    682a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    682c:	6f 81       	ldd	r22, Y+7	; 0x07
    682e:	78 85       	ldd	r23, Y+8	; 0x08
    6830:	89 85       	ldd	r24, Y+9	; 0x09
    6832:	9a 85       	ldd	r25, Y+10	; 0x0a
    6834:	20 e0       	ldi	r18, 0x00	; 0
    6836:	30 e0       	ldi	r19, 0x00	; 0
    6838:	40 e8       	ldi	r20, 0x80	; 128
    683a:	5f e3       	ldi	r21, 0x3F	; 63
    683c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    6840:	88 23       	and	r24, r24
    6842:	2c f4       	brge	.+10     	; 0x684e <ESP_Read_Response+0x2fe>
		__ticks = 1;
    6844:	81 e0       	ldi	r24, 0x01	; 1
    6846:	90 e0       	ldi	r25, 0x00	; 0
    6848:	9e 83       	std	Y+6, r25	; 0x06
    684a:	8d 83       	std	Y+5, r24	; 0x05
    684c:	3f c0       	rjmp	.+126    	; 0x68cc <ESP_Read_Response+0x37c>
	else if (__tmp > 65535)
    684e:	6f 81       	ldd	r22, Y+7	; 0x07
    6850:	78 85       	ldd	r23, Y+8	; 0x08
    6852:	89 85       	ldd	r24, Y+9	; 0x09
    6854:	9a 85       	ldd	r25, Y+10	; 0x0a
    6856:	20 e0       	ldi	r18, 0x00	; 0
    6858:	3f ef       	ldi	r19, 0xFF	; 255
    685a:	4f e7       	ldi	r20, 0x7F	; 127
    685c:	57 e4       	ldi	r21, 0x47	; 71
    685e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    6862:	18 16       	cp	r1, r24
    6864:	4c f5       	brge	.+82     	; 0x68b8 <ESP_Read_Response+0x368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6866:	6b 85       	ldd	r22, Y+11	; 0x0b
    6868:	7c 85       	ldd	r23, Y+12	; 0x0c
    686a:	8d 85       	ldd	r24, Y+13	; 0x0d
    686c:	9e 85       	ldd	r25, Y+14	; 0x0e
    686e:	20 e0       	ldi	r18, 0x00	; 0
    6870:	30 e0       	ldi	r19, 0x00	; 0
    6872:	40 e2       	ldi	r20, 0x20	; 32
    6874:	51 e4       	ldi	r21, 0x41	; 65
    6876:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    687a:	dc 01       	movw	r26, r24
    687c:	cb 01       	movw	r24, r22
    687e:	bc 01       	movw	r22, r24
    6880:	cd 01       	movw	r24, r26
    6882:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    6886:	dc 01       	movw	r26, r24
    6888:	cb 01       	movw	r24, r22
    688a:	9e 83       	std	Y+6, r25	; 0x06
    688c:	8d 83       	std	Y+5, r24	; 0x05
    688e:	0f c0       	rjmp	.+30     	; 0x68ae <ESP_Read_Response+0x35e>
    6890:	88 ec       	ldi	r24, 0xC8	; 200
    6892:	90 e0       	ldi	r25, 0x00	; 0
    6894:	9c 83       	std	Y+4, r25	; 0x04
    6896:	8b 83       	std	Y+3, r24	; 0x03
    6898:	8b 81       	ldd	r24, Y+3	; 0x03
    689a:	9c 81       	ldd	r25, Y+4	; 0x04
    689c:	01 97       	sbiw	r24, 0x01	; 1
    689e:	f1 f7       	brne	.-4      	; 0x689c <ESP_Read_Response+0x34c>
    68a0:	9c 83       	std	Y+4, r25	; 0x04
    68a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68a4:	8d 81       	ldd	r24, Y+5	; 0x05
    68a6:	9e 81       	ldd	r25, Y+6	; 0x06
    68a8:	01 97       	sbiw	r24, 0x01	; 1
    68aa:	9e 83       	std	Y+6, r25	; 0x06
    68ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68ae:	8d 81       	ldd	r24, Y+5	; 0x05
    68b0:	9e 81       	ldd	r25, Y+6	; 0x06
    68b2:	00 97       	sbiw	r24, 0x00	; 0
    68b4:	69 f7       	brne	.-38     	; 0x6890 <ESP_Read_Response+0x340>
    68b6:	14 c0       	rjmp	.+40     	; 0x68e0 <ESP_Read_Response+0x390>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68b8:	6f 81       	ldd	r22, Y+7	; 0x07
    68ba:	78 85       	ldd	r23, Y+8	; 0x08
    68bc:	89 85       	ldd	r24, Y+9	; 0x09
    68be:	9a 85       	ldd	r25, Y+10	; 0x0a
    68c0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    68c4:	dc 01       	movw	r26, r24
    68c6:	cb 01       	movw	r24, r22
    68c8:	9e 83       	std	Y+6, r25	; 0x06
    68ca:	8d 83       	std	Y+5, r24	; 0x05
    68cc:	8d 81       	ldd	r24, Y+5	; 0x05
    68ce:	9e 81       	ldd	r25, Y+6	; 0x06
    68d0:	9a 83       	std	Y+2, r25	; 0x02
    68d2:	89 83       	std	Y+1, r24	; 0x01
    68d4:	89 81       	ldd	r24, Y+1	; 0x01
    68d6:	9a 81       	ldd	r25, Y+2	; 0x02
    68d8:	01 97       	sbiw	r24, 0x01	; 1
    68da:	f1 f7       	brne	.-4      	; 0x68d8 <ESP_Read_Response+0x388>
    68dc:	9a 83       	std	Y+2, r25	; 0x02
    68de:	89 83       	std	Y+1, r24	; 0x01
					}
				}
			}
		}
		_delay_ms(1);
		TimeCount++;
    68e0:	8b a1       	ldd	r24, Y+35	; 0x23
    68e2:	9c a1       	ldd	r25, Y+36	; 0x24
    68e4:	ad a1       	ldd	r26, Y+37	; 0x25
    68e6:	be a1       	ldd	r27, Y+38	; 0x26
    68e8:	01 96       	adiw	r24, 0x01	; 1
    68ea:	a1 1d       	adc	r26, r1
    68ec:	b1 1d       	adc	r27, r1
    68ee:	8b a3       	std	Y+35, r24	; 0x23
    68f0:	9c a3       	std	Y+36, r25	; 0x24
    68f2:	ad a3       	std	Y+37, r26	; 0x25
    68f4:	be a3       	std	Y+38, r27	; 0x26
    68f6:	63 ce       	rjmp	.-826    	; 0x65be <ESP_Read_Response+0x6e>
	}
    68f8:	8c a5       	ldd	r24, Y+44	; 0x2c
    68fa:	9d a5       	ldd	r25, Y+45	; 0x2d
    68fc:	0f b6       	in	r0, 0x3f	; 63
    68fe:	f8 94       	cli
    6900:	9e bf       	out	0x3e, r25	; 62
    6902:	0f be       	out	0x3f, r0	; 63
    6904:	8d bf       	out	0x3d, r24	; 61
}
    6906:	28 a9       	ldd	r18, Y+48	; 0x30
    6908:	39 a9       	ldd	r19, Y+49	; 0x31
    690a:	0f b6       	in	r0, 0x3f	; 63
    690c:	f8 94       	cli
    690e:	3e bf       	out	0x3e, r19	; 62
    6910:	0f be       	out	0x3f, r0	; 63
    6912:	2d bf       	out	0x3d, r18	; 61
    6914:	e1 96       	adiw	r28, 0x31	; 49
    6916:	0f b6       	in	r0, 0x3f	; 63
    6918:	f8 94       	cli
    691a:	de bf       	out	0x3e, r29	; 62
    691c:	0f be       	out	0x3f, r0	; 63
    691e:	cd bf       	out	0x3d, r28	; 61
    6920:	cf 91       	pop	r28
    6922:	df 91       	pop	r29
    6924:	08 95       	ret

00006926 <ESP8266_Clear>:

void ESP8266_Clear()
{
    6926:	df 93       	push	r29
    6928:	cf 93       	push	r28
    692a:	cd b7       	in	r28, 0x3d	; 61
    692c:	de b7       	in	r29, 0x3e	; 62
	memset(RESPONSE_BUFFER1,0,DEFAULT_BUFFER_SIZE1);
    692e:	89 e3       	ldi	r24, 0x39	; 57
    6930:	97 e0       	ldi	r25, 0x07	; 7
    6932:	60 e0       	ldi	r22, 0x00	; 0
    6934:	70 e0       	ldi	r23, 0x00	; 0
    6936:	40 ea       	ldi	r20, 0xA0	; 160
    6938:	50 e0       	ldi	r21, 0x00	; 0
    693a:	0e 94 9a 3a 	call	0x7534	; 0x7534 <memset>
	Counter1 = 0;	pointer = 0;
    693e:	10 92 2e 05 	sts	0x052E, r1
    6942:	10 92 2d 05 	sts	0x052D, r1
    6946:	10 92 30 05 	sts	0x0530, r1
    694a:	10 92 2f 05 	sts	0x052F, r1
}
    694e:	cf 91       	pop	r28
    6950:	df 91       	pop	r29
    6952:	08 95       	ret

00006954 <ESP_Start_Read_Response>:

void ESP_Start_Read_Response(char* _ExpectedResponse)
{
    6954:	df 93       	push	r29
    6956:	cf 93       	push	r28
    6958:	00 d0       	rcall	.+0      	; 0x695a <ESP_Start_Read_Response+0x6>
    695a:	cd b7       	in	r28, 0x3d	; 61
    695c:	de b7       	in	r29, 0x3e	; 62
    695e:	9a 83       	std	Y+2, r25	; 0x02
    6960:	89 83       	std	Y+1, r24	; 0x01
	Response_Status1 = ESP8266_RESPONSE_STARTING;
    6962:	84 e0       	ldi	r24, 0x04	; 4
    6964:	80 93 38 07 	sts	0x0738, r24
	do {
		Read_Response(_ExpectedResponse);
    6968:	89 81       	ldd	r24, Y+1	; 0x01
    696a:	9a 81       	ldd	r25, Y+2	; 0x02
    696c:	0e 94 16 10 	call	0x202c	; 0x202c <Read_Response>
	} while(Response_Status1 == ESP8266_RESPONSE_WAITING);
    6970:	80 91 38 07 	lds	r24, 0x0738
    6974:	88 23       	and	r24, r24
    6976:	c1 f3       	breq	.-16     	; 0x6968 <ESP_Start_Read_Response+0x14>

}
    6978:	0f 90       	pop	r0
    697a:	0f 90       	pop	r0
    697c:	cf 91       	pop	r28
    697e:	df 91       	pop	r29
    6980:	08 95       	ret

00006982 <ESP_GetResponseBody>:

void ESP_GetResponseBody(char* Response, uint16_t ResponseLength)
{
    6982:	df 93       	push	r29
    6984:	cf 93       	push	r28
    6986:	cd b7       	in	r28, 0x3d	; 61
    6988:	de b7       	in	r29, 0x3e	; 62
    698a:	2d 97       	sbiw	r28, 0x0d	; 13
    698c:	0f b6       	in	r0, 0x3f	; 63
    698e:	f8 94       	cli
    6990:	de bf       	out	0x3e, r29	; 62
    6992:	0f be       	out	0x3f, r0	; 63
    6994:	cd bf       	out	0x3d, r28	; 61
    6996:	9b 87       	std	Y+11, r25	; 0x0b
    6998:	8a 87       	std	Y+10, r24	; 0x0a
    699a:	7d 87       	std	Y+13, r23	; 0x0d
    699c:	6c 87       	std	Y+12, r22	; 0x0c

	uint16_t i = 12;
    699e:	8c e0       	ldi	r24, 0x0C	; 12
    69a0:	90 e0       	ldi	r25, 0x00	; 0
    69a2:	9c 83       	std	Y+4, r25	; 0x04
    69a4:	8b 83       	std	Y+3, r24	; 0x03
    69a6:	05 c0       	rjmp	.+10     	; 0x69b2 <ESP_GetResponseBody+0x30>
	char buffer[5];
	while(Response[i] != '\r')
	++i;
    69a8:	8b 81       	ldd	r24, Y+3	; 0x03
    69aa:	9c 81       	ldd	r25, Y+4	; 0x04
    69ac:	01 96       	adiw	r24, 0x01	; 1
    69ae:	9c 83       	std	Y+4, r25	; 0x04
    69b0:	8b 83       	std	Y+3, r24	; 0x03
void ESP_GetResponseBody(char* Response, uint16_t ResponseLength)
{

	uint16_t i = 12;
	char buffer[5];
	while(Response[i] != '\r')
    69b2:	2a 85       	ldd	r18, Y+10	; 0x0a
    69b4:	3b 85       	ldd	r19, Y+11	; 0x0b
    69b6:	8b 81       	ldd	r24, Y+3	; 0x03
    69b8:	9c 81       	ldd	r25, Y+4	; 0x04
    69ba:	f9 01       	movw	r30, r18
    69bc:	e8 0f       	add	r30, r24
    69be:	f9 1f       	adc	r31, r25
    69c0:	80 81       	ld	r24, Z
    69c2:	8d 30       	cpi	r24, 0x0D	; 13
    69c4:	89 f7       	brne	.-30     	; 0x69a8 <ESP_GetResponseBody+0x26>
	++i;

	strncpy(buffer, Response + 12, (i - 12));
    69c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    69c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    69ca:	ac 01       	movw	r20, r24
    69cc:	44 5f       	subi	r20, 0xF4	; 244
    69ce:	5f 4f       	sbci	r21, 0xFF	; 255
    69d0:	8b 81       	ldd	r24, Y+3	; 0x03
    69d2:	9c 81       	ldd	r25, Y+4	; 0x04
    69d4:	9c 01       	movw	r18, r24
    69d6:	2c 50       	subi	r18, 0x0C	; 12
    69d8:	30 40       	sbci	r19, 0x00	; 0
    69da:	ce 01       	movw	r24, r28
    69dc:	05 96       	adiw	r24, 0x05	; 5
    69de:	ba 01       	movw	r22, r20
    69e0:	a9 01       	movw	r20, r18
    69e2:	0e 94 b8 3a 	call	0x7570	; 0x7570 <strncpy>
	ResponseLength = atoi(buffer);
    69e6:	ce 01       	movw	r24, r28
    69e8:	05 96       	adiw	r24, 0x05	; 5
    69ea:	0e 94 3a 3a 	call	0x7474	; 0x7474 <atoi>
    69ee:	9d 87       	std	Y+13, r25	; 0x0d
    69f0:	8c 87       	std	Y+12, r24	; 0x0c

	i += 2;
    69f2:	8b 81       	ldd	r24, Y+3	; 0x03
    69f4:	9c 81       	ldd	r25, Y+4	; 0x04
    69f6:	02 96       	adiw	r24, 0x02	; 2
    69f8:	9c 83       	std	Y+4, r25	; 0x04
    69fa:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t tmp = strlen(Response) - i;
    69fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    69fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    6a00:	0e 94 a1 3a 	call	0x7542	; 0x7542 <strlen>
    6a04:	9c 01       	movw	r18, r24
    6a06:	8b 81       	ldd	r24, Y+3	; 0x03
    6a08:	9c 81       	ldd	r25, Y+4	; 0x04
    6a0a:	a9 01       	movw	r20, r18
    6a0c:	48 1b       	sub	r20, r24
    6a0e:	59 0b       	sbc	r21, r25
    6a10:	ca 01       	movw	r24, r20
    6a12:	9a 83       	std	Y+2, r25	; 0x02
    6a14:	89 83       	std	Y+1, r24	; 0x01
	memcpy(Response, Response + i, tmp);
    6a16:	2a 85       	ldd	r18, Y+10	; 0x0a
    6a18:	3b 85       	ldd	r19, Y+11	; 0x0b
    6a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    6a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    6a1e:	a9 01       	movw	r20, r18
    6a20:	48 0f       	add	r20, r24
    6a22:	59 1f       	adc	r21, r25
    6a24:	8a 85       	ldd	r24, Y+10	; 0x0a
    6a26:	9b 85       	ldd	r25, Y+11	; 0x0b
    6a28:	29 81       	ldd	r18, Y+1	; 0x01
    6a2a:	3a 81       	ldd	r19, Y+2	; 0x02
    6a2c:	ba 01       	movw	r22, r20
    6a2e:	a9 01       	movw	r20, r18
    6a30:	0e 94 7f 3a 	call	0x74fe	; 0x74fe <memcpy>

	if(!strncmp(Response + tmp - 6, "\r\nOK\r\n", 6))
    6a34:	89 81       	ldd	r24, Y+1	; 0x01
    6a36:	9a 81       	ldd	r25, Y+2	; 0x02
    6a38:	9c 01       	movw	r18, r24
    6a3a:	26 50       	subi	r18, 0x06	; 6
    6a3c:	30 40       	sbci	r19, 0x00	; 0
    6a3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6a40:	9b 85       	ldd	r25, Y+11	; 0x0b
    6a42:	82 0f       	add	r24, r18
    6a44:	93 1f       	adc	r25, r19
    6a46:	29 ed       	ldi	r18, 0xD9	; 217
    6a48:	32 e0       	ldi	r19, 0x02	; 2
    6a4a:	b9 01       	movw	r22, r18
    6a4c:	46 e0       	ldi	r20, 0x06	; 6
    6a4e:	50 e0       	ldi	r21, 0x00	; 0
    6a50:	0e 94 aa 3a 	call	0x7554	; 0x7554 <strncmp>
    6a54:	00 97       	sbiw	r24, 0x00	; 0
    6a56:	99 f4       	brne	.+38     	; 0x6a7e <ESP_GetResponseBody+0xfc>
	memset(Response + tmp - 6, 0, i + 6);
    6a58:	89 81       	ldd	r24, Y+1	; 0x01
    6a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    6a5c:	9c 01       	movw	r18, r24
    6a5e:	26 50       	subi	r18, 0x06	; 6
    6a60:	30 40       	sbci	r19, 0x00	; 0
    6a62:	8a 85       	ldd	r24, Y+10	; 0x0a
    6a64:	9b 85       	ldd	r25, Y+11	; 0x0b
    6a66:	28 0f       	add	r18, r24
    6a68:	39 1f       	adc	r19, r25
    6a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    6a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    6a6e:	ac 01       	movw	r20, r24
    6a70:	4a 5f       	subi	r20, 0xFA	; 250
    6a72:	5f 4f       	sbci	r21, 0xFF	; 255
    6a74:	c9 01       	movw	r24, r18
    6a76:	60 e0       	ldi	r22, 0x00	; 0
    6a78:	70 e0       	ldi	r23, 0x00	; 0
    6a7a:	0e 94 9a 3a 	call	0x7534	; 0x7534 <memset>
}
    6a7e:	2d 96       	adiw	r28, 0x0d	; 13
    6a80:	0f b6       	in	r0, 0x3f	; 63
    6a82:	f8 94       	cli
    6a84:	de bf       	out	0x3e, r29	; 62
    6a86:	0f be       	out	0x3f, r0	; 63
    6a88:	cd bf       	out	0x3d, r28	; 61
    6a8a:	cf 91       	pop	r28
    6a8c:	df 91       	pop	r29
    6a8e:	08 95       	ret

00006a90 <ESP_WaitForExpectedResponse>:

bool ESP_WaitForExpectedResponse(char* ExpectedResponse)
{
    6a90:	df 93       	push	r29
    6a92:	cf 93       	push	r28
    6a94:	00 d0       	rcall	.+0      	; 0x6a96 <ESP_WaitForExpectedResponse+0x6>
    6a96:	0f 92       	push	r0
    6a98:	cd b7       	in	r28, 0x3d	; 61
    6a9a:	de b7       	in	r29, 0x3e	; 62
    6a9c:	9a 83       	std	Y+2, r25	; 0x02
    6a9e:	89 83       	std	Y+1, r24	; 0x01
	Start_Read_Response(ExpectedResponse);	/* First read response */
    6aa0:	89 81       	ldd	r24, Y+1	; 0x01
    6aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    6aa4:	0e 94 d7 11 	call	0x23ae	; 0x23ae <Start_Read_Response>
	if((Response_Status1 != ESP8266_RESPONSE_TIMEOUT))
    6aa8:	80 91 38 07 	lds	r24, 0x0738
    6aac:	82 30       	cpi	r24, 0x02	; 2
    6aae:	19 f0       	breq	.+6      	; 0x6ab6 <ESP_WaitForExpectedResponse+0x26>
	return true;							/* Return true for success */
    6ab0:	81 e0       	ldi	r24, 0x01	; 1
    6ab2:	8b 83       	std	Y+3, r24	; 0x03
    6ab4:	01 c0       	rjmp	.+2      	; 0x6ab8 <ESP_WaitForExpectedResponse+0x28>
	return false;							/* Else return false */
    6ab6:	1b 82       	std	Y+3, r1	; 0x03
    6ab8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    6aba:	0f 90       	pop	r0
    6abc:	0f 90       	pop	r0
    6abe:	0f 90       	pop	r0
    6ac0:	cf 91       	pop	r28
    6ac2:	df 91       	pop	r29
    6ac4:	08 95       	ret

00006ac6 <ESP_SendATandExpectResponse>:

bool ESP_SendATandExpectResponse(char* ATCommand, char* ExpectedResponse)
{
    6ac6:	df 93       	push	r29
    6ac8:	cf 93       	push	r28
    6aca:	00 d0       	rcall	.+0      	; 0x6acc <ESP_SendATandExpectResponse+0x6>
    6acc:	00 d0       	rcall	.+0      	; 0x6ace <ESP_SendATandExpectResponse+0x8>
    6ace:	0f 92       	push	r0
    6ad0:	cd b7       	in	r28, 0x3d	; 61
    6ad2:	de b7       	in	r29, 0x3e	; 62
    6ad4:	9a 83       	std	Y+2, r25	; 0x02
    6ad6:	89 83       	std	Y+1, r24	; 0x01
    6ad8:	7c 83       	std	Y+4, r23	; 0x04
    6ada:	6b 83       	std	Y+3, r22	; 0x03
	ESP8266_Clear();
    6adc:	0e 94 93 34 	call	0x6926	; 0x6926 <ESP8266_Clear>
	USART_SendString(ATCommand);			/* Send AT command to ESP8266 */
    6ae0:	89 81       	ldd	r24, Y+1	; 0x01
    6ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    6ae4:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	USART_SendString("\r\n");
    6ae8:	80 ee       	ldi	r24, 0xE0	; 224
    6aea:	92 e0       	ldi	r25, 0x02	; 2
    6aec:	0e 94 91 0c 	call	0x1922	; 0x1922 <USART_SendString>
	return WaitForExpectedResponse(ExpectedResponse);
    6af0:	8b 81       	ldd	r24, Y+3	; 0x03
    6af2:	9c 81       	ldd	r25, Y+4	; 0x04
    6af4:	0e 94 86 12 	call	0x250c	; 0x250c <WaitForExpectedResponse>
    6af8:	1d 82       	std	Y+5, r1	; 0x05
    6afa:	00 97       	sbiw	r24, 0x00	; 0
    6afc:	11 f0       	breq	.+4      	; 0x6b02 <ESP_SendATandExpectResponse+0x3c>
    6afe:	81 e0       	ldi	r24, 0x01	; 1
    6b00:	8d 83       	std	Y+5, r24	; 0x05
    6b02:	8d 81       	ldd	r24, Y+5	; 0x05
}
    6b04:	0f 90       	pop	r0
    6b06:	0f 90       	pop	r0
    6b08:	0f 90       	pop	r0
    6b0a:	0f 90       	pop	r0
    6b0c:	0f 90       	pop	r0
    6b0e:	cf 91       	pop	r28
    6b10:	df 91       	pop	r29
    6b12:	08 95       	ret

00006b14 <ESP8266_ApplicationMode>:

bool ESP8266_ApplicationMode(uint8_t Mode)
{
    6b14:	df 93       	push	r29
    6b16:	cf 93       	push	r28
    6b18:	cd b7       	in	r28, 0x3d	; 61
    6b1a:	de b7       	in	r29, 0x3e	; 62
    6b1c:	66 97       	sbiw	r28, 0x16	; 22
    6b1e:	0f b6       	in	r0, 0x3f	; 63
    6b20:	f8 94       	cli
    6b22:	de bf       	out	0x3e, r29	; 62
    6b24:	0f be       	out	0x3f, r0	; 63
    6b26:	cd bf       	out	0x3d, r28	; 61
    6b28:	8d 8b       	std	Y+21, r24	; 0x15
	char _atCommand[20];
	memset(_atCommand, 0, 20);
    6b2a:	ce 01       	movw	r24, r28
    6b2c:	01 96       	adiw	r24, 0x01	; 1
    6b2e:	60 e0       	ldi	r22, 0x00	; 0
    6b30:	70 e0       	ldi	r23, 0x00	; 0
    6b32:	44 e1       	ldi	r20, 0x14	; 20
    6b34:	50 e0       	ldi	r21, 0x00	; 0
    6b36:	0e 94 9a 3a 	call	0x7534	; 0x7534 <memset>
	sprintf(_atCommand, "AT+CIPMODE=%d", Mode);
    6b3a:	8d 89       	ldd	r24, Y+21	; 0x15
    6b3c:	28 2f       	mov	r18, r24
    6b3e:	30 e0       	ldi	r19, 0x00	; 0
    6b40:	00 d0       	rcall	.+0      	; 0x6b42 <ESP8266_ApplicationMode+0x2e>
    6b42:	00 d0       	rcall	.+0      	; 0x6b44 <ESP8266_ApplicationMode+0x30>
    6b44:	00 d0       	rcall	.+0      	; 0x6b46 <ESP8266_ApplicationMode+0x32>
    6b46:	ed b7       	in	r30, 0x3d	; 61
    6b48:	fe b7       	in	r31, 0x3e	; 62
    6b4a:	31 96       	adiw	r30, 0x01	; 1
    6b4c:	ce 01       	movw	r24, r28
    6b4e:	01 96       	adiw	r24, 0x01	; 1
    6b50:	91 83       	std	Z+1, r25	; 0x01
    6b52:	80 83       	st	Z, r24
    6b54:	83 ee       	ldi	r24, 0xE3	; 227
    6b56:	92 e0       	ldi	r25, 0x02	; 2
    6b58:	93 83       	std	Z+3, r25	; 0x03
    6b5a:	82 83       	std	Z+2, r24	; 0x02
    6b5c:	35 83       	std	Z+5, r19	; 0x05
    6b5e:	24 83       	std	Z+4, r18	; 0x04
    6b60:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <sprintf>
    6b64:	8d b7       	in	r24, 0x3d	; 61
    6b66:	9e b7       	in	r25, 0x3e	; 62
    6b68:	06 96       	adiw	r24, 0x06	; 6
    6b6a:	0f b6       	in	r0, 0x3f	; 63
    6b6c:	f8 94       	cli
    6b6e:	9e bf       	out	0x3e, r25	; 62
    6b70:	0f be       	out	0x3f, r0	; 63
    6b72:	8d bf       	out	0x3d, r24	; 61
	_atCommand[19] = 0;
    6b74:	1c 8a       	std	Y+20, r1	; 0x14
	return SendATandExpectResponse(_atCommand, "\r\nOK\r\n");
    6b76:	29 ed       	ldi	r18, 0xD9	; 217
    6b78:	32 e0       	ldi	r19, 0x02	; 2
    6b7a:	ce 01       	movw	r24, r28
    6b7c:	01 96       	adiw	r24, 0x01	; 1
    6b7e:	b9 01       	movw	r22, r18
    6b80:	0e 94 23 13 	call	0x2646	; 0x2646 <SendATandExpectResponse>
    6b84:	1e 8a       	std	Y+22, r1	; 0x16
    6b86:	00 97       	sbiw	r24, 0x00	; 0
    6b88:	11 f0       	breq	.+4      	; 0x6b8e <ESP8266_ApplicationMode+0x7a>
    6b8a:	91 e0       	ldi	r25, 0x01	; 1
    6b8c:	9e 8b       	std	Y+22, r25	; 0x16
    6b8e:	8e 89       	ldd	r24, Y+22	; 0x16
}
    6b90:	66 96       	adiw	r28, 0x16	; 22
    6b92:	0f b6       	in	r0, 0x3f	; 63
    6b94:	f8 94       	cli
    6b96:	de bf       	out	0x3e, r29	; 62
    6b98:	0f be       	out	0x3f, r0	; 63
    6b9a:	cd bf       	out	0x3d, r28	; 61
    6b9c:	cf 91       	pop	r28
    6b9e:	df 91       	pop	r29
    6ba0:	08 95       	ret

00006ba2 <ESP8266_ConnectionMode>:

bool ESP8266_ConnectionMode(uint8_t Mode)
{
    6ba2:	df 93       	push	r29
    6ba4:	cf 93       	push	r28
    6ba6:	cd b7       	in	r28, 0x3d	; 61
    6ba8:	de b7       	in	r29, 0x3e	; 62
    6baa:	66 97       	sbiw	r28, 0x16	; 22
    6bac:	0f b6       	in	r0, 0x3f	; 63
    6bae:	f8 94       	cli
    6bb0:	de bf       	out	0x3e, r29	; 62
    6bb2:	0f be       	out	0x3f, r0	; 63
    6bb4:	cd bf       	out	0x3d, r28	; 61
    6bb6:	8d 8b       	std	Y+21, r24	; 0x15
	char _atCommand[20];
	memset(_atCommand, 0, 20);
    6bb8:	ce 01       	movw	r24, r28
    6bba:	01 96       	adiw	r24, 0x01	; 1
    6bbc:	60 e0       	ldi	r22, 0x00	; 0
    6bbe:	70 e0       	ldi	r23, 0x00	; 0
    6bc0:	44 e1       	ldi	r20, 0x14	; 20
    6bc2:	50 e0       	ldi	r21, 0x00	; 0
    6bc4:	0e 94 9a 3a 	call	0x7534	; 0x7534 <memset>
	sprintf(_atCommand, "AT+CIPMUX=%d", Mode);
    6bc8:	8d 89       	ldd	r24, Y+21	; 0x15
    6bca:	28 2f       	mov	r18, r24
    6bcc:	30 e0       	ldi	r19, 0x00	; 0
    6bce:	00 d0       	rcall	.+0      	; 0x6bd0 <ESP8266_ConnectionMode+0x2e>
    6bd0:	00 d0       	rcall	.+0      	; 0x6bd2 <ESP8266_ConnectionMode+0x30>
    6bd2:	00 d0       	rcall	.+0      	; 0x6bd4 <ESP8266_ConnectionMode+0x32>
    6bd4:	ed b7       	in	r30, 0x3d	; 61
    6bd6:	fe b7       	in	r31, 0x3e	; 62
    6bd8:	31 96       	adiw	r30, 0x01	; 1
    6bda:	ce 01       	movw	r24, r28
    6bdc:	01 96       	adiw	r24, 0x01	; 1
    6bde:	91 83       	std	Z+1, r25	; 0x01
    6be0:	80 83       	st	Z, r24
    6be2:	81 ef       	ldi	r24, 0xF1	; 241
    6be4:	92 e0       	ldi	r25, 0x02	; 2
    6be6:	93 83       	std	Z+3, r25	; 0x03
    6be8:	82 83       	std	Z+2, r24	; 0x02
    6bea:	35 83       	std	Z+5, r19	; 0x05
    6bec:	24 83       	std	Z+4, r18	; 0x04
    6bee:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <sprintf>
    6bf2:	8d b7       	in	r24, 0x3d	; 61
    6bf4:	9e b7       	in	r25, 0x3e	; 62
    6bf6:	06 96       	adiw	r24, 0x06	; 6
    6bf8:	0f b6       	in	r0, 0x3f	; 63
    6bfa:	f8 94       	cli
    6bfc:	9e bf       	out	0x3e, r25	; 62
    6bfe:	0f be       	out	0x3f, r0	; 63
    6c00:	8d bf       	out	0x3d, r24	; 61
	_atCommand[19] = 0;
    6c02:	1c 8a       	std	Y+20, r1	; 0x14
	return SendATandExpectResponse(_atCommand, "\r\nOK\r\n");
    6c04:	29 ed       	ldi	r18, 0xD9	; 217
    6c06:	32 e0       	ldi	r19, 0x02	; 2
    6c08:	ce 01       	movw	r24, r28
    6c0a:	01 96       	adiw	r24, 0x01	; 1
    6c0c:	b9 01       	movw	r22, r18
    6c0e:	0e 94 23 13 	call	0x2646	; 0x2646 <SendATandExpectResponse>
    6c12:	1e 8a       	std	Y+22, r1	; 0x16
    6c14:	00 97       	sbiw	r24, 0x00	; 0
    6c16:	11 f0       	breq	.+4      	; 0x6c1c <ESP8266_ConnectionMode+0x7a>
    6c18:	91 e0       	ldi	r25, 0x01	; 1
    6c1a:	9e 8b       	std	Y+22, r25	; 0x16
    6c1c:	8e 89       	ldd	r24, Y+22	; 0x16
}
    6c1e:	66 96       	adiw	r28, 0x16	; 22
    6c20:	0f b6       	in	r0, 0x3f	; 63
    6c22:	f8 94       	cli
    6c24:	de bf       	out	0x3e, r29	; 62
    6c26:	0f be       	out	0x3f, r0	; 63
    6c28:	cd bf       	out	0x3d, r28	; 61
    6c2a:	cf 91       	pop	r28
    6c2c:	df 91       	pop	r29
    6c2e:	08 95       	ret

00006c30 <ESP8266_Begin>:

bool ESP8266_Begin()
{
    6c30:	df 93       	push	r29
    6c32:	cf 93       	push	r28
    6c34:	00 d0       	rcall	.+0      	; 0x6c36 <ESP8266_Begin+0x6>
    6c36:	cd b7       	in	r28, 0x3d	; 61
    6c38:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t i=0;i<5;i++)
    6c3a:	19 82       	std	Y+1, r1	; 0x01
    6c3c:	18 c0       	rjmp	.+48     	; 0x6c6e <ESP8266_Begin+0x3e>
	{
		if(SendATandExpectResponse("ATE0","\r\nOK\r\n")||SendATandExpectResponse("AT","\r\nOK\r\n"))
    6c3e:	8e ef       	ldi	r24, 0xFE	; 254
    6c40:	92 e0       	ldi	r25, 0x02	; 2
    6c42:	29 ed       	ldi	r18, 0xD9	; 217
    6c44:	32 e0       	ldi	r19, 0x02	; 2
    6c46:	b9 01       	movw	r22, r18
    6c48:	0e 94 23 13 	call	0x2646	; 0x2646 <SendATandExpectResponse>
    6c4c:	00 97       	sbiw	r24, 0x00	; 0
    6c4e:	49 f4       	brne	.+18     	; 0x6c62 <ESP8266_Begin+0x32>
    6c50:	83 e0       	ldi	r24, 0x03	; 3
    6c52:	93 e0       	ldi	r25, 0x03	; 3
    6c54:	29 ed       	ldi	r18, 0xD9	; 217
    6c56:	32 e0       	ldi	r19, 0x02	; 2
    6c58:	b9 01       	movw	r22, r18
    6c5a:	0e 94 23 13 	call	0x2646	; 0x2646 <SendATandExpectResponse>
    6c5e:	00 97       	sbiw	r24, 0x00	; 0
    6c60:	19 f0       	breq	.+6      	; 0x6c68 <ESP8266_Begin+0x38>
		return true;
    6c62:	81 e0       	ldi	r24, 0x01	; 1
    6c64:	8a 83       	std	Y+2, r24	; 0x02
    6c66:	07 c0       	rjmp	.+14     	; 0x6c76 <ESP8266_Begin+0x46>
	return SendATandExpectResponse(_atCommand, "\r\nOK\r\n");
}

bool ESP8266_Begin()
{
	for (uint8_t i=0;i<5;i++)
    6c68:	89 81       	ldd	r24, Y+1	; 0x01
    6c6a:	8f 5f       	subi	r24, 0xFF	; 255
    6c6c:	89 83       	std	Y+1, r24	; 0x01
    6c6e:	89 81       	ldd	r24, Y+1	; 0x01
    6c70:	85 30       	cpi	r24, 0x05	; 5
    6c72:	28 f3       	brcs	.-54     	; 0x6c3e <ESP8266_Begin+0xe>
	{
		if(SendATandExpectResponse("ATE0","\r\nOK\r\n")||SendATandExpectResponse("AT","\r\nOK\r\n"))
		return true;
	}
	return false;
    6c74:	1a 82       	std	Y+2, r1	; 0x02
    6c76:	8a 81       	ldd	r24, Y+2	; 0x02
}
    6c78:	0f 90       	pop	r0
    6c7a:	0f 90       	pop	r0
    6c7c:	cf 91       	pop	r28
    6c7e:	df 91       	pop	r29
    6c80:	08 95       	ret

00006c82 <ESP8266_Close>:

bool ESP8266_Close()
{
    6c82:	df 93       	push	r29
    6c84:	cf 93       	push	r28
    6c86:	0f 92       	push	r0
    6c88:	cd b7       	in	r28, 0x3d	; 61
    6c8a:	de b7       	in	r29, 0x3e	; 62
	return SendATandExpectResponse("AT+CIPCLOSE=1", "\r\nOK\r\n");
    6c8c:	86 e0       	ldi	r24, 0x06	; 6
    6c8e:	93 e0       	ldi	r25, 0x03	; 3
    6c90:	29 ed       	ldi	r18, 0xD9	; 217
    6c92:	32 e0       	ldi	r19, 0x02	; 2
    6c94:	b9 01       	movw	r22, r18
    6c96:	0e 94 23 13 	call	0x2646	; 0x2646 <SendATandExpectResponse>
    6c9a:	19 82       	std	Y+1, r1	; 0x01
    6c9c:	00 97       	sbiw	r24, 0x00	; 0
    6c9e:	11 f0       	breq	.+4      	; 0x6ca4 <ESP8266_Close+0x22>
    6ca0:	81 e0       	ldi	r24, 0x01	; 1
    6ca2:	89 83       	std	Y+1, r24	; 0x01
    6ca4:	89 81       	ldd	r24, Y+1	; 0x01
}
    6ca6:	0f 90       	pop	r0
    6ca8:	cf 91       	pop	r28
    6caa:	df 91       	pop	r29
    6cac:	08 95       	ret

00006cae <ESP8266_WIFIMode>:

bool ESP8266_WIFIMode(uint8_t _mode)
{
    6cae:	df 93       	push	r29
    6cb0:	cf 93       	push	r28
    6cb2:	cd b7       	in	r28, 0x3d	; 61
    6cb4:	de b7       	in	r29, 0x3e	; 62
    6cb6:	66 97       	sbiw	r28, 0x16	; 22
    6cb8:	0f b6       	in	r0, 0x3f	; 63
    6cba:	f8 94       	cli
    6cbc:	de bf       	out	0x3e, r29	; 62
    6cbe:	0f be       	out	0x3f, r0	; 63
    6cc0:	cd bf       	out	0x3d, r28	; 61
    6cc2:	8d 8b       	std	Y+21, r24	; 0x15
	char _atCommand[20];
	memset(_atCommand, 0, 20);
    6cc4:	ce 01       	movw	r24, r28
    6cc6:	01 96       	adiw	r24, 0x01	; 1
    6cc8:	60 e0       	ldi	r22, 0x00	; 0
    6cca:	70 e0       	ldi	r23, 0x00	; 0
    6ccc:	44 e1       	ldi	r20, 0x14	; 20
    6cce:	50 e0       	ldi	r21, 0x00	; 0
    6cd0:	0e 94 9a 3a 	call	0x7534	; 0x7534 <memset>
	sprintf(_atCommand, "AT+CWMODE=%d", _mode);
    6cd4:	8d 89       	ldd	r24, Y+21	; 0x15
    6cd6:	28 2f       	mov	r18, r24
    6cd8:	30 e0       	ldi	r19, 0x00	; 0
    6cda:	00 d0       	rcall	.+0      	; 0x6cdc <ESP8266_WIFIMode+0x2e>
    6cdc:	00 d0       	rcall	.+0      	; 0x6cde <ESP8266_WIFIMode+0x30>
    6cde:	00 d0       	rcall	.+0      	; 0x6ce0 <ESP8266_WIFIMode+0x32>
    6ce0:	ed b7       	in	r30, 0x3d	; 61
    6ce2:	fe b7       	in	r31, 0x3e	; 62
    6ce4:	31 96       	adiw	r30, 0x01	; 1
    6ce6:	ce 01       	movw	r24, r28
    6ce8:	01 96       	adiw	r24, 0x01	; 1
    6cea:	91 83       	std	Z+1, r25	; 0x01
    6cec:	80 83       	st	Z, r24
    6cee:	84 e1       	ldi	r24, 0x14	; 20
    6cf0:	93 e0       	ldi	r25, 0x03	; 3
    6cf2:	93 83       	std	Z+3, r25	; 0x03
    6cf4:	82 83       	std	Z+2, r24	; 0x02
    6cf6:	35 83       	std	Z+5, r19	; 0x05
    6cf8:	24 83       	std	Z+4, r18	; 0x04
    6cfa:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <sprintf>
    6cfe:	8d b7       	in	r24, 0x3d	; 61
    6d00:	9e b7       	in	r25, 0x3e	; 62
    6d02:	06 96       	adiw	r24, 0x06	; 6
    6d04:	0f b6       	in	r0, 0x3f	; 63
    6d06:	f8 94       	cli
    6d08:	9e bf       	out	0x3e, r25	; 62
    6d0a:	0f be       	out	0x3f, r0	; 63
    6d0c:	8d bf       	out	0x3d, r24	; 61
	_atCommand[19] = 0;
    6d0e:	1c 8a       	std	Y+20, r1	; 0x14
	return SendATandExpectResponse(_atCommand, "\r\nOK\r\n");
    6d10:	29 ed       	ldi	r18, 0xD9	; 217
    6d12:	32 e0       	ldi	r19, 0x02	; 2
    6d14:	ce 01       	movw	r24, r28
    6d16:	01 96       	adiw	r24, 0x01	; 1
    6d18:	b9 01       	movw	r22, r18
    6d1a:	0e 94 23 13 	call	0x2646	; 0x2646 <SendATandExpectResponse>
    6d1e:	1e 8a       	std	Y+22, r1	; 0x16
    6d20:	00 97       	sbiw	r24, 0x00	; 0
    6d22:	11 f0       	breq	.+4      	; 0x6d28 <ESP8266_WIFIMode+0x7a>
    6d24:	91 e0       	ldi	r25, 0x01	; 1
    6d26:	9e 8b       	std	Y+22, r25	; 0x16
    6d28:	8e 89       	ldd	r24, Y+22	; 0x16
}
    6d2a:	66 96       	adiw	r28, 0x16	; 22
    6d2c:	0f b6       	in	r0, 0x3f	; 63
    6d2e:	f8 94       	cli
    6d30:	de bf       	out	0x3e, r29	; 62
    6d32:	0f be       	out	0x3f, r0	; 63
    6d34:	cd bf       	out	0x3d, r28	; 61
    6d36:	cf 91       	pop	r28
    6d38:	df 91       	pop	r29
    6d3a:	08 95       	ret

00006d3c <ESP8266_JoinAccessPoint>:

uint8_t ESP8266_JoinAccessPoint(char* _SSID, char* _PASSWORD)
{
    6d3c:	df 93       	push	r29
    6d3e:	cf 93       	push	r28
    6d40:	cd b7       	in	r28, 0x3d	; 61
    6d42:	de b7       	in	r29, 0x3e	; 62
    6d44:	c1 54       	subi	r28, 0x41	; 65
    6d46:	d0 40       	sbci	r29, 0x00	; 0
    6d48:	0f b6       	in	r0, 0x3f	; 63
    6d4a:	f8 94       	cli
    6d4c:	de bf       	out	0x3e, r29	; 62
    6d4e:	0f be       	out	0x3f, r0	; 63
    6d50:	cd bf       	out	0x3d, r28	; 61
    6d52:	9e af       	std	Y+62, r25	; 0x3e
    6d54:	8d af       	std	Y+61, r24	; 0x3d
    6d56:	fe 01       	movw	r30, r28
    6d58:	ff 96       	adiw	r30, 0x3f	; 63
    6d5a:	71 83       	std	Z+1, r23	; 0x01
    6d5c:	60 83       	st	Z, r22
	char _atCommand[60];
	memset(_atCommand, 0, 60);
    6d5e:	ce 01       	movw	r24, r28
    6d60:	01 96       	adiw	r24, 0x01	; 1
    6d62:	60 e0       	ldi	r22, 0x00	; 0
    6d64:	70 e0       	ldi	r23, 0x00	; 0
    6d66:	4c e3       	ldi	r20, 0x3C	; 60
    6d68:	50 e0       	ldi	r21, 0x00	; 0
    6d6a:	0e 94 9a 3a 	call	0x7534	; 0x7534 <memset>
	sprintf(_atCommand, "AT+CWJAP=\"%s\",\"%s\"", _SSID, _PASSWORD);
    6d6e:	8d b7       	in	r24, 0x3d	; 61
    6d70:	9e b7       	in	r25, 0x3e	; 62
    6d72:	08 97       	sbiw	r24, 0x08	; 8
    6d74:	0f b6       	in	r0, 0x3f	; 63
    6d76:	f8 94       	cli
    6d78:	9e bf       	out	0x3e, r25	; 62
    6d7a:	0f be       	out	0x3f, r0	; 63
    6d7c:	8d bf       	out	0x3d, r24	; 61
    6d7e:	ad b7       	in	r26, 0x3d	; 61
    6d80:	be b7       	in	r27, 0x3e	; 62
    6d82:	11 96       	adiw	r26, 0x01	; 1
    6d84:	ce 01       	movw	r24, r28
    6d86:	01 96       	adiw	r24, 0x01	; 1
    6d88:	11 96       	adiw	r26, 0x01	; 1
    6d8a:	9c 93       	st	X, r25
    6d8c:	8e 93       	st	-X, r24
    6d8e:	81 e2       	ldi	r24, 0x21	; 33
    6d90:	93 e0       	ldi	r25, 0x03	; 3
    6d92:	13 96       	adiw	r26, 0x03	; 3
    6d94:	9c 93       	st	X, r25
    6d96:	8e 93       	st	-X, r24
    6d98:	12 97       	sbiw	r26, 0x02	; 2
    6d9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    6d9c:	9e ad       	ldd	r25, Y+62	; 0x3e
    6d9e:	15 96       	adiw	r26, 0x05	; 5
    6da0:	9c 93       	st	X, r25
    6da2:	8e 93       	st	-X, r24
    6da4:	14 97       	sbiw	r26, 0x04	; 4
    6da6:	fe 01       	movw	r30, r28
    6da8:	ff 96       	adiw	r30, 0x3f	; 63
    6daa:	80 81       	ld	r24, Z
    6dac:	91 81       	ldd	r25, Z+1	; 0x01
    6dae:	17 96       	adiw	r26, 0x07	; 7
    6db0:	9c 93       	st	X, r25
    6db2:	8e 93       	st	-X, r24
    6db4:	16 97       	sbiw	r26, 0x06	; 6
    6db6:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <sprintf>
    6dba:	8d b7       	in	r24, 0x3d	; 61
    6dbc:	9e b7       	in	r25, 0x3e	; 62
    6dbe:	08 96       	adiw	r24, 0x08	; 8
    6dc0:	0f b6       	in	r0, 0x3f	; 63
    6dc2:	f8 94       	cli
    6dc4:	9e bf       	out	0x3e, r25	; 62
    6dc6:	0f be       	out	0x3f, r0	; 63
    6dc8:	8d bf       	out	0x3d, r24	; 61
	_atCommand[59] = 0;
    6dca:	1c ae       	std	Y+60, r1	; 0x3c
	if(SendATandExpectResponse(_atCommand, "\r\nWIFI CONNECTED\r\n"))
    6dcc:	24 e3       	ldi	r18, 0x34	; 52
    6dce:	33 e0       	ldi	r19, 0x03	; 3
    6dd0:	ce 01       	movw	r24, r28
    6dd2:	01 96       	adiw	r24, 0x01	; 1
    6dd4:	b9 01       	movw	r22, r18
    6dd6:	0e 94 23 13 	call	0x2646	; 0x2646 <SendATandExpectResponse>
    6dda:	00 97       	sbiw	r24, 0x00	; 0
    6ddc:	21 f0       	breq	.+8      	; 0x6de6 <ESP8266_JoinAccessPoint+0xaa>
	return ESP8266_WIFI_CONNECTED;
    6dde:	22 96       	adiw	r28, 0x02	; 2
    6de0:	1f ae       	std	Y+63, r1	; 0x3f
    6de2:	22 97       	sbiw	r28, 0x02	; 2
    6de4:	3c c0       	rjmp	.+120    	; 0x6e5e <ESP8266_JoinAccessPoint+0x122>
	else{
		if(strstr(RESPONSE_BUFFER1, "+CWJAP:1"))
    6de6:	89 e3       	ldi	r24, 0x39	; 57
    6de8:	97 e0       	ldi	r25, 0x07	; 7
    6dea:	27 e4       	ldi	r18, 0x47	; 71
    6dec:	33 e0       	ldi	r19, 0x03	; 3
    6dee:	b9 01       	movw	r22, r18
    6df0:	0e 94 c7 3a 	call	0x758e	; 0x758e <strstr>
    6df4:	00 97       	sbiw	r24, 0x00	; 0
    6df6:	29 f0       	breq	.+10     	; 0x6e02 <ESP8266_JoinAccessPoint+0xc6>
		return ESP8266_CONNECTION_TIMEOUT;
    6df8:	91 e0       	ldi	r25, 0x01	; 1
    6dfa:	22 96       	adiw	r28, 0x02	; 2
    6dfc:	9f af       	std	Y+63, r25	; 0x3f
    6dfe:	22 97       	sbiw	r28, 0x02	; 2
    6e00:	2e c0       	rjmp	.+92     	; 0x6e5e <ESP8266_JoinAccessPoint+0x122>
		else if(strstr(RESPONSE_BUFFER1, "+CWJAP:2"))
    6e02:	89 e3       	ldi	r24, 0x39	; 57
    6e04:	97 e0       	ldi	r25, 0x07	; 7
    6e06:	20 e5       	ldi	r18, 0x50	; 80
    6e08:	33 e0       	ldi	r19, 0x03	; 3
    6e0a:	b9 01       	movw	r22, r18
    6e0c:	0e 94 c7 3a 	call	0x758e	; 0x758e <strstr>
    6e10:	00 97       	sbiw	r24, 0x00	; 0
    6e12:	29 f0       	breq	.+10     	; 0x6e1e <ESP8266_JoinAccessPoint+0xe2>
		return ESP8266_WRONG_PASSWORD;
    6e14:	82 e0       	ldi	r24, 0x02	; 2
    6e16:	22 96       	adiw	r28, 0x02	; 2
    6e18:	8f af       	std	Y+63, r24	; 0x3f
    6e1a:	22 97       	sbiw	r28, 0x02	; 2
    6e1c:	20 c0       	rjmp	.+64     	; 0x6e5e <ESP8266_JoinAccessPoint+0x122>
		else if(strstr(RESPONSE_BUFFER1, "+CWJAP:3"))
    6e1e:	89 e3       	ldi	r24, 0x39	; 57
    6e20:	97 e0       	ldi	r25, 0x07	; 7
    6e22:	29 e5       	ldi	r18, 0x59	; 89
    6e24:	33 e0       	ldi	r19, 0x03	; 3
    6e26:	b9 01       	movw	r22, r18
    6e28:	0e 94 c7 3a 	call	0x758e	; 0x758e <strstr>
    6e2c:	00 97       	sbiw	r24, 0x00	; 0
    6e2e:	29 f0       	breq	.+10     	; 0x6e3a <ESP8266_JoinAccessPoint+0xfe>
		return ESP8266_NOT_FOUND_TARGET_AP;
    6e30:	93 e0       	ldi	r25, 0x03	; 3
    6e32:	22 96       	adiw	r28, 0x02	; 2
    6e34:	9f af       	std	Y+63, r25	; 0x3f
    6e36:	22 97       	sbiw	r28, 0x02	; 2
    6e38:	12 c0       	rjmp	.+36     	; 0x6e5e <ESP8266_JoinAccessPoint+0x122>
		else if(strstr(RESPONSE_BUFFER1, "+CWJAP:4"))
    6e3a:	89 e3       	ldi	r24, 0x39	; 57
    6e3c:	97 e0       	ldi	r25, 0x07	; 7
    6e3e:	22 e6       	ldi	r18, 0x62	; 98
    6e40:	33 e0       	ldi	r19, 0x03	; 3
    6e42:	b9 01       	movw	r22, r18
    6e44:	0e 94 c7 3a 	call	0x758e	; 0x758e <strstr>
    6e48:	00 97       	sbiw	r24, 0x00	; 0
    6e4a:	29 f0       	breq	.+10     	; 0x6e56 <ESP8266_JoinAccessPoint+0x11a>
		return ESP8266_CONNECTION_FAILED;
    6e4c:	84 e0       	ldi	r24, 0x04	; 4
    6e4e:	22 96       	adiw	r28, 0x02	; 2
    6e50:	8f af       	std	Y+63, r24	; 0x3f
    6e52:	22 97       	sbiw	r28, 0x02	; 2
    6e54:	04 c0       	rjmp	.+8      	; 0x6e5e <ESP8266_JoinAccessPoint+0x122>
		else
		return ESP8266_JOIN_UNKNOWN_ERROR;
    6e56:	95 e0       	ldi	r25, 0x05	; 5
    6e58:	22 96       	adiw	r28, 0x02	; 2
    6e5a:	9f af       	std	Y+63, r25	; 0x3f
    6e5c:	22 97       	sbiw	r28, 0x02	; 2
    6e5e:	22 96       	adiw	r28, 0x02	; 2
    6e60:	8f ad       	ldd	r24, Y+63	; 0x3f
    6e62:	22 97       	sbiw	r28, 0x02	; 2
	}
}
    6e64:	cf 5b       	subi	r28, 0xBF	; 191
    6e66:	df 4f       	sbci	r29, 0xFF	; 255
    6e68:	0f b6       	in	r0, 0x3f	; 63
    6e6a:	f8 94       	cli
    6e6c:	de bf       	out	0x3e, r29	; 62
    6e6e:	0f be       	out	0x3f, r0	; 63
    6e70:	cd bf       	out	0x3d, r28	; 61
    6e72:	cf 91       	pop	r28
    6e74:	df 91       	pop	r29
    6e76:	08 95       	ret

00006e78 <ESP8266_connected>:

uint8_t ESP8266_connected()
{
    6e78:	df 93       	push	r29
    6e7a:	cf 93       	push	r28
    6e7c:	0f 92       	push	r0
    6e7e:	cd b7       	in	r28, 0x3d	; 61
    6e80:	de b7       	in	r29, 0x3e	; 62
	SendATandExpectResponse("AT+CIPSTATUS", "\r\nOK\r\n");
    6e82:	8b e6       	ldi	r24, 0x6B	; 107
    6e84:	93 e0       	ldi	r25, 0x03	; 3
    6e86:	29 ed       	ldi	r18, 0xD9	; 217
    6e88:	32 e0       	ldi	r19, 0x02	; 2
    6e8a:	b9 01       	movw	r22, r18
    6e8c:	0e 94 23 13 	call	0x2646	; 0x2646 <SendATandExpectResponse>
	if(strstr(RESPONSE_BUFFER1, "STATUS:2"))
    6e90:	89 e3       	ldi	r24, 0x39	; 57
    6e92:	97 e0       	ldi	r25, 0x07	; 7
    6e94:	28 e7       	ldi	r18, 0x78	; 120
    6e96:	33 e0       	ldi	r19, 0x03	; 3
    6e98:	b9 01       	movw	r22, r18
    6e9a:	0e 94 c7 3a 	call	0x758e	; 0x758e <strstr>
    6e9e:	00 97       	sbiw	r24, 0x00	; 0
    6ea0:	11 f0       	breq	.+4      	; 0x6ea6 <ESP8266_connected+0x2e>
	return ESP8266_CONNECTED_TO_AP;
    6ea2:	19 82       	std	Y+1, r1	; 0x01
    6ea4:	26 c0       	rjmp	.+76     	; 0x6ef2 <ESP8266_connected+0x7a>
	else if(strstr(RESPONSE_BUFFER1, "STATUS:3"))
    6ea6:	89 e3       	ldi	r24, 0x39	; 57
    6ea8:	97 e0       	ldi	r25, 0x07	; 7
    6eaa:	21 e8       	ldi	r18, 0x81	; 129
    6eac:	33 e0       	ldi	r19, 0x03	; 3
    6eae:	b9 01       	movw	r22, r18
    6eb0:	0e 94 c7 3a 	call	0x758e	; 0x758e <strstr>
    6eb4:	00 97       	sbiw	r24, 0x00	; 0
    6eb6:	19 f0       	breq	.+6      	; 0x6ebe <ESP8266_connected+0x46>
	return ESP8266_CREATED_TRANSMISSION;
    6eb8:	81 e0       	ldi	r24, 0x01	; 1
    6eba:	89 83       	std	Y+1, r24	; 0x01
    6ebc:	1a c0       	rjmp	.+52     	; 0x6ef2 <ESP8266_connected+0x7a>
	else if(strstr(RESPONSE_BUFFER1, "STATUS:4"))
    6ebe:	89 e3       	ldi	r24, 0x39	; 57
    6ec0:	97 e0       	ldi	r25, 0x07	; 7
    6ec2:	2a e8       	ldi	r18, 0x8A	; 138
    6ec4:	33 e0       	ldi	r19, 0x03	; 3
    6ec6:	b9 01       	movw	r22, r18
    6ec8:	0e 94 c7 3a 	call	0x758e	; 0x758e <strstr>
    6ecc:	00 97       	sbiw	r24, 0x00	; 0
    6ece:	19 f0       	breq	.+6      	; 0x6ed6 <ESP8266_connected+0x5e>
	return ESP8266_TRANSMISSION_DISCONNECTED;
    6ed0:	82 e0       	ldi	r24, 0x02	; 2
    6ed2:	89 83       	std	Y+1, r24	; 0x01
    6ed4:	0e c0       	rjmp	.+28     	; 0x6ef2 <ESP8266_connected+0x7a>
	else if(strstr(RESPONSE_BUFFER1, "STATUS:5"))
    6ed6:	89 e3       	ldi	r24, 0x39	; 57
    6ed8:	97 e0       	ldi	r25, 0x07	; 7
    6eda:	23 e9       	ldi	r18, 0x93	; 147
    6edc:	33 e0       	ldi	r19, 0x03	; 3
    6ede:	b9 01       	movw	r22, r18
    6ee0:	0e 94 c7 3a 	call	0x758e	; 0x758e <strstr>
    6ee4:	00 97       	sbiw	r24, 0x00	; 0
    6ee6:	19 f0       	breq	.+6      	; 0x6eee <ESP8266_connected+0x76>
	return ESP8266_NOT_CONNECTED_TO_AP;
    6ee8:	83 e0       	ldi	r24, 0x03	; 3
    6eea:	89 83       	std	Y+1, r24	; 0x01
    6eec:	02 c0       	rjmp	.+4      	; 0x6ef2 <ESP8266_connected+0x7a>
	else
	return ESP8266_CONNECT_UNKNOWN_ERROR;
    6eee:	84 e0       	ldi	r24, 0x04	; 4
    6ef0:	89 83       	std	Y+1, r24	; 0x01
    6ef2:	89 81       	ldd	r24, Y+1	; 0x01
}
    6ef4:	0f 90       	pop	r0
    6ef6:	cf 91       	pop	r28
    6ef8:	df 91       	pop	r29
    6efa:	08 95       	ret

00006efc <ESP8266_Start>:

uint8_t ESP8266_Start(uint8_t _ConnectionNumber, char* Domain, char* Port)
{
    6efc:	df 93       	push	r29
    6efe:	cf 93       	push	r28
    6f00:	cd b7       	in	r28, 0x3d	; 61
    6f02:	de b7       	in	r29, 0x3e	; 62
    6f04:	c3 54       	subi	r28, 0x43	; 67
    6f06:	d0 40       	sbci	r29, 0x00	; 0
    6f08:	0f b6       	in	r0, 0x3f	; 63
    6f0a:	f8 94       	cli
    6f0c:	de bf       	out	0x3e, r29	; 62
    6f0e:	0f be       	out	0x3f, r0	; 63
    6f10:	cd bf       	out	0x3d, r28	; 61
    6f12:	8e af       	std	Y+62, r24	; 0x3e
    6f14:	fe 01       	movw	r30, r28
    6f16:	ff 96       	adiw	r30, 0x3f	; 63
    6f18:	71 83       	std	Z+1, r23	; 0x01
    6f1a:	60 83       	st	Z, r22
    6f1c:	fe 01       	movw	r30, r28
    6f1e:	ef 5b       	subi	r30, 0xBF	; 191
    6f20:	ff 4f       	sbci	r31, 0xFF	; 255
    6f22:	51 83       	std	Z+1, r21	; 0x01
    6f24:	40 83       	st	Z, r20
	bool _startResponse;
	char _atCommand[60];
	memset(_atCommand, 0, 60);
    6f26:	ce 01       	movw	r24, r28
    6f28:	02 96       	adiw	r24, 0x02	; 2
    6f2a:	60 e0       	ldi	r22, 0x00	; 0
    6f2c:	70 e0       	ldi	r23, 0x00	; 0
    6f2e:	4c e3       	ldi	r20, 0x3C	; 60
    6f30:	50 e0       	ldi	r21, 0x00	; 0
    6f32:	0e 94 9a 3a 	call	0x7534	; 0x7534 <memset>
	_atCommand[59] = 0;
    6f36:	1d ae       	std	Y+61, r1	; 0x3d

	if(SendATandExpectResponse("AT+CIPMUX?", "CIPMUX:0"))
    6f38:	8c e9       	ldi	r24, 0x9C	; 156
    6f3a:	93 e0       	ldi	r25, 0x03	; 3
    6f3c:	27 ea       	ldi	r18, 0xA7	; 167
    6f3e:	33 e0       	ldi	r19, 0x03	; 3
    6f40:	b9 01       	movw	r22, r18
    6f42:	0e 94 23 13 	call	0x2646	; 0x2646 <SendATandExpectResponse>
    6f46:	00 97       	sbiw	r24, 0x00	; 0
    6f48:	91 f1       	breq	.+100    	; 0x6fae <ESP8266_Start+0xb2>
		sprintf(_atCommand, "AT+CIPSTART=\"TCP\",\"%s\",%s", Domain, Port);
    6f4a:	8d b7       	in	r24, 0x3d	; 61
    6f4c:	9e b7       	in	r25, 0x3e	; 62
    6f4e:	08 97       	sbiw	r24, 0x08	; 8
    6f50:	0f b6       	in	r0, 0x3f	; 63
    6f52:	f8 94       	cli
    6f54:	9e bf       	out	0x3e, r25	; 62
    6f56:	0f be       	out	0x3f, r0	; 63
    6f58:	8d bf       	out	0x3d, r24	; 61
    6f5a:	ad b7       	in	r26, 0x3d	; 61
    6f5c:	be b7       	in	r27, 0x3e	; 62
    6f5e:	11 96       	adiw	r26, 0x01	; 1
    6f60:	ce 01       	movw	r24, r28
    6f62:	02 96       	adiw	r24, 0x02	; 2
    6f64:	11 96       	adiw	r26, 0x01	; 1
    6f66:	9c 93       	st	X, r25
    6f68:	8e 93       	st	-X, r24
    6f6a:	80 eb       	ldi	r24, 0xB0	; 176
    6f6c:	93 e0       	ldi	r25, 0x03	; 3
    6f6e:	13 96       	adiw	r26, 0x03	; 3
    6f70:	9c 93       	st	X, r25
    6f72:	8e 93       	st	-X, r24
    6f74:	12 97       	sbiw	r26, 0x02	; 2
    6f76:	fe 01       	movw	r30, r28
    6f78:	ff 96       	adiw	r30, 0x3f	; 63
    6f7a:	80 81       	ld	r24, Z
    6f7c:	91 81       	ldd	r25, Z+1	; 0x01
    6f7e:	15 96       	adiw	r26, 0x05	; 5
    6f80:	9c 93       	st	X, r25
    6f82:	8e 93       	st	-X, r24
    6f84:	14 97       	sbiw	r26, 0x04	; 4
    6f86:	fe 01       	movw	r30, r28
    6f88:	ef 5b       	subi	r30, 0xBF	; 191
    6f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    6f8c:	80 81       	ld	r24, Z
    6f8e:	91 81       	ldd	r25, Z+1	; 0x01
    6f90:	17 96       	adiw	r26, 0x07	; 7
    6f92:	9c 93       	st	X, r25
    6f94:	8e 93       	st	-X, r24
    6f96:	16 97       	sbiw	r26, 0x06	; 6
    6f98:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <sprintf>
    6f9c:	8d b7       	in	r24, 0x3d	; 61
    6f9e:	9e b7       	in	r25, 0x3e	; 62
    6fa0:	08 96       	adiw	r24, 0x08	; 8
    6fa2:	0f b6       	in	r0, 0x3f	; 63
    6fa4:	f8 94       	cli
    6fa6:	9e bf       	out	0x3e, r25	; 62
    6fa8:	0f be       	out	0x3f, r0	; 63
    6faa:	8d bf       	out	0x3d, r24	; 61
    6fac:	38 c0       	rjmp	.+112    	; 0x701e <ESP8266_Start+0x122>
	else
		sprintf(_atCommand, "AT+CIPSTART=\"%d\",\"TCP\",\"%s\",%s", _ConnectionNumber, Domain, Port);
    6fae:	8e ad       	ldd	r24, Y+62	; 0x3e
    6fb0:	28 2f       	mov	r18, r24
    6fb2:	30 e0       	ldi	r19, 0x00	; 0
    6fb4:	8d b7       	in	r24, 0x3d	; 61
    6fb6:	9e b7       	in	r25, 0x3e	; 62
    6fb8:	0a 97       	sbiw	r24, 0x0a	; 10
    6fba:	0f b6       	in	r0, 0x3f	; 63
    6fbc:	f8 94       	cli
    6fbe:	9e bf       	out	0x3e, r25	; 62
    6fc0:	0f be       	out	0x3f, r0	; 63
    6fc2:	8d bf       	out	0x3d, r24	; 61
    6fc4:	ad b7       	in	r26, 0x3d	; 61
    6fc6:	be b7       	in	r27, 0x3e	; 62
    6fc8:	11 96       	adiw	r26, 0x01	; 1
    6fca:	ce 01       	movw	r24, r28
    6fcc:	02 96       	adiw	r24, 0x02	; 2
    6fce:	11 96       	adiw	r26, 0x01	; 1
    6fd0:	9c 93       	st	X, r25
    6fd2:	8e 93       	st	-X, r24
    6fd4:	8a ec       	ldi	r24, 0xCA	; 202
    6fd6:	93 e0       	ldi	r25, 0x03	; 3
    6fd8:	13 96       	adiw	r26, 0x03	; 3
    6fda:	9c 93       	st	X, r25
    6fdc:	8e 93       	st	-X, r24
    6fde:	12 97       	sbiw	r26, 0x02	; 2
    6fe0:	15 96       	adiw	r26, 0x05	; 5
    6fe2:	3c 93       	st	X, r19
    6fe4:	2e 93       	st	-X, r18
    6fe6:	14 97       	sbiw	r26, 0x04	; 4
    6fe8:	fe 01       	movw	r30, r28
    6fea:	ff 96       	adiw	r30, 0x3f	; 63
    6fec:	80 81       	ld	r24, Z
    6fee:	91 81       	ldd	r25, Z+1	; 0x01
    6ff0:	17 96       	adiw	r26, 0x07	; 7
    6ff2:	9c 93       	st	X, r25
    6ff4:	8e 93       	st	-X, r24
    6ff6:	16 97       	sbiw	r26, 0x06	; 6
    6ff8:	fe 01       	movw	r30, r28
    6ffa:	ef 5b       	subi	r30, 0xBF	; 191
    6ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    6ffe:	80 81       	ld	r24, Z
    7000:	91 81       	ldd	r25, Z+1	; 0x01
    7002:	19 96       	adiw	r26, 0x09	; 9
    7004:	9c 93       	st	X, r25
    7006:	8e 93       	st	-X, r24
    7008:	18 97       	sbiw	r26, 0x08	; 8
    700a:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <sprintf>
    700e:	8d b7       	in	r24, 0x3d	; 61
    7010:	9e b7       	in	r25, 0x3e	; 62
    7012:	0a 96       	adiw	r24, 0x0a	; 10
    7014:	0f b6       	in	r0, 0x3f	; 63
    7016:	f8 94       	cli
    7018:	9e bf       	out	0x3e, r25	; 62
    701a:	0f be       	out	0x3f, r0	; 63
    701c:	8d bf       	out	0x3d, r24	; 61

	_startResponse = SendATandExpectResponse(_atCommand, "CONNECT\r\n");
    701e:	ce 01       	movw	r24, r28
    7020:	02 96       	adiw	r24, 0x02	; 2
    7022:	29 ee       	ldi	r18, 0xE9	; 233
    7024:	33 e0       	ldi	r19, 0x03	; 3
    7026:	b9 01       	movw	r22, r18
    7028:	0e 94 23 13 	call	0x2646	; 0x2646 <SendATandExpectResponse>
    702c:	19 82       	std	Y+1, r1	; 0x01
    702e:	00 97       	sbiw	r24, 0x00	; 0
    7030:	11 f0       	breq	.+4      	; 0x7036 <ESP8266_Start+0x13a>
    7032:	81 e0       	ldi	r24, 0x01	; 1
    7034:	89 83       	std	Y+1, r24	; 0x01
	if(!_startResponse)
    7036:	89 81       	ldd	r24, Y+1	; 0x01
    7038:	91 e0       	ldi	r25, 0x01	; 1
    703a:	89 27       	eor	r24, r25
    703c:	88 23       	and	r24, r24
    703e:	71 f0       	breq	.+28     	; 0x705c <ESP8266_Start+0x160>
	{
		if(Response_Status1 == ESP8266_RESPONSE_TIMEOUT)
    7040:	80 91 38 07 	lds	r24, 0x0738
    7044:	82 30       	cpi	r24, 0x02	; 2
    7046:	29 f4       	brne	.+10     	; 0x7052 <ESP8266_Start+0x156>
		return ESP8266_RESPONSE_TIMEOUT;
    7048:	92 e0       	ldi	r25, 0x02	; 2
    704a:	24 96       	adiw	r28, 0x04	; 4
    704c:	9f af       	std	Y+63, r25	; 0x3f
    704e:	24 97       	sbiw	r28, 0x04	; 4
    7050:	09 c0       	rjmp	.+18     	; 0x7064 <ESP8266_Start+0x168>
		return ESP8266_RESPONSE_ERROR;
    7052:	85 e0       	ldi	r24, 0x05	; 5
    7054:	24 96       	adiw	r28, 0x04	; 4
    7056:	8f af       	std	Y+63, r24	; 0x3f
    7058:	24 97       	sbiw	r28, 0x04	; 4
    705a:	04 c0       	rjmp	.+8      	; 0x7064 <ESP8266_Start+0x168>
	}
	return ESP8266_RESPONSE_FINISHED;
    705c:	91 e0       	ldi	r25, 0x01	; 1
    705e:	24 96       	adiw	r28, 0x04	; 4
    7060:	9f af       	std	Y+63, r25	; 0x3f
    7062:	24 97       	sbiw	r28, 0x04	; 4
    7064:	24 96       	adiw	r28, 0x04	; 4
    7066:	8f ad       	ldd	r24, Y+63	; 0x3f
    7068:	24 97       	sbiw	r28, 0x04	; 4
}
    706a:	cd 5b       	subi	r28, 0xBD	; 189
    706c:	df 4f       	sbci	r29, 0xFF	; 255
    706e:	0f b6       	in	r0, 0x3f	; 63
    7070:	f8 94       	cli
    7072:	de bf       	out	0x3e, r29	; 62
    7074:	0f be       	out	0x3f, r0	; 63
    7076:	cd bf       	out	0x3d, r28	; 61
    7078:	cf 91       	pop	r28
    707a:	df 91       	pop	r29
    707c:	08 95       	ret

0000707e <ESP8266_Send>:

uint8_t ESP8266_Send(char* Data)
{
    707e:	df 93       	push	r29
    7080:	cf 93       	push	r28
    7082:	cd b7       	in	r28, 0x3d	; 61
    7084:	de b7       	in	r29, 0x3e	; 62
    7086:	67 97       	sbiw	r28, 0x17	; 23
    7088:	0f b6       	in	r0, 0x3f	; 63
    708a:	f8 94       	cli
    708c:	de bf       	out	0x3e, r29	; 62
    708e:	0f be       	out	0x3f, r0	; 63
    7090:	cd bf       	out	0x3d, r28	; 61
    7092:	9e 8b       	std	Y+22, r25	; 0x16
    7094:	8d 8b       	std	Y+21, r24	; 0x15
	char _atCommand[20];
	memset(_atCommand, 0, 20);
    7096:	ce 01       	movw	r24, r28
    7098:	01 96       	adiw	r24, 0x01	; 1
    709a:	60 e0       	ldi	r22, 0x00	; 0
    709c:	70 e0       	ldi	r23, 0x00	; 0
    709e:	44 e1       	ldi	r20, 0x14	; 20
    70a0:	50 e0       	ldi	r21, 0x00	; 0
    70a2:	0e 94 9a 3a 	call	0x7534	; 0x7534 <memset>
	sprintf(_atCommand, "AT+CIPSEND=%d", (strlen(Data)+2));
    70a6:	8d 89       	ldd	r24, Y+21	; 0x15
    70a8:	9e 89       	ldd	r25, Y+22	; 0x16
    70aa:	0e 94 a1 3a 	call	0x7542	; 0x7542 <strlen>
    70ae:	9c 01       	movw	r18, r24
    70b0:	2e 5f       	subi	r18, 0xFE	; 254
    70b2:	3f 4f       	sbci	r19, 0xFF	; 255
    70b4:	00 d0       	rcall	.+0      	; 0x70b6 <ESP8266_Send+0x38>
    70b6:	00 d0       	rcall	.+0      	; 0x70b8 <ESP8266_Send+0x3a>
    70b8:	00 d0       	rcall	.+0      	; 0x70ba <ESP8266_Send+0x3c>
    70ba:	ed b7       	in	r30, 0x3d	; 61
    70bc:	fe b7       	in	r31, 0x3e	; 62
    70be:	31 96       	adiw	r30, 0x01	; 1
    70c0:	ce 01       	movw	r24, r28
    70c2:	01 96       	adiw	r24, 0x01	; 1
    70c4:	91 83       	std	Z+1, r25	; 0x01
    70c6:	80 83       	st	Z, r24
    70c8:	83 ef       	ldi	r24, 0xF3	; 243
    70ca:	93 e0       	ldi	r25, 0x03	; 3
    70cc:	93 83       	std	Z+3, r25	; 0x03
    70ce:	82 83       	std	Z+2, r24	; 0x02
    70d0:	35 83       	std	Z+5, r19	; 0x05
    70d2:	24 83       	std	Z+4, r18	; 0x04
    70d4:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <sprintf>
    70d8:	8d b7       	in	r24, 0x3d	; 61
    70da:	9e b7       	in	r25, 0x3e	; 62
    70dc:	06 96       	adiw	r24, 0x06	; 6
    70de:	0f b6       	in	r0, 0x3f	; 63
    70e0:	f8 94       	cli
    70e2:	9e bf       	out	0x3e, r25	; 62
    70e4:	0f be       	out	0x3f, r0	; 63
    70e6:	8d bf       	out	0x3d, r24	; 61
	_atCommand[19] = 0;
    70e8:	1c 8a       	std	Y+20, r1	; 0x14
	SendATandExpectResponse(_atCommand, "\r\nOK\r\n>");
    70ea:	21 e0       	ldi	r18, 0x01	; 1
    70ec:	34 e0       	ldi	r19, 0x04	; 4
    70ee:	ce 01       	movw	r24, r28
    70f0:	01 96       	adiw	r24, 0x01	; 1
    70f2:	b9 01       	movw	r22, r18
    70f4:	0e 94 23 13 	call	0x2646	; 0x2646 <SendATandExpectResponse>
	if(!SendATandExpectResponse(Data, "\r\nSEND OK\r\n"))
    70f8:	8d 89       	ldd	r24, Y+21	; 0x15
    70fa:	9e 89       	ldd	r25, Y+22	; 0x16
    70fc:	29 e0       	ldi	r18, 0x09	; 9
    70fe:	34 e0       	ldi	r19, 0x04	; 4
    7100:	b9 01       	movw	r22, r18
    7102:	0e 94 23 13 	call	0x2646	; 0x2646 <SendATandExpectResponse>
    7106:	00 97       	sbiw	r24, 0x00	; 0
    7108:	51 f4       	brne	.+20     	; 0x711e <ESP8266_Send+0xa0>
	{
		if(Response_Status1 == ESP8266_RESPONSE_TIMEOUT)
    710a:	80 91 38 07 	lds	r24, 0x0738
    710e:	82 30       	cpi	r24, 0x02	; 2
    7110:	19 f4       	brne	.+6      	; 0x7118 <ESP8266_Send+0x9a>
		return ESP8266_RESPONSE_TIMEOUT;
    7112:	92 e0       	ldi	r25, 0x02	; 2
    7114:	9f 8b       	std	Y+23, r25	; 0x17
    7116:	05 c0       	rjmp	.+10     	; 0x7122 <ESP8266_Send+0xa4>
		return ESP8266_RESPONSE_ERROR;
    7118:	85 e0       	ldi	r24, 0x05	; 5
    711a:	8f 8b       	std	Y+23, r24	; 0x17
    711c:	02 c0       	rjmp	.+4      	; 0x7122 <ESP8266_Send+0xa4>
	}
	return ESP8266_RESPONSE_FINISHED;
    711e:	91 e0       	ldi	r25, 0x01	; 1
    7120:	9f 8b       	std	Y+23, r25	; 0x17
    7122:	8f 89       	ldd	r24, Y+23	; 0x17
}
    7124:	67 96       	adiw	r28, 0x17	; 23
    7126:	0f b6       	in	r0, 0x3f	; 63
    7128:	f8 94       	cli
    712a:	de bf       	out	0x3e, r29	; 62
    712c:	0f be       	out	0x3f, r0	; 63
    712e:	cd bf       	out	0x3d, r28	; 61
    7130:	cf 91       	pop	r28
    7132:	df 91       	pop	r29
    7134:	08 95       	ret

00007136 <ESP8266_DataAvailable>:

int16_t ESP8266_DataAvailable()
{
    7136:	df 93       	push	r29
    7138:	cf 93       	push	r28
    713a:	cd b7       	in	r28, 0x3d	; 61
    713c:	de b7       	in	r29, 0x3e	; 62
	return (Counter1 - pointer);
    713e:	20 91 2d 05 	lds	r18, 0x052D
    7142:	30 91 2e 05 	lds	r19, 0x052E
    7146:	80 91 2f 05 	lds	r24, 0x052F
    714a:	90 91 30 05 	lds	r25, 0x0530
    714e:	a9 01       	movw	r20, r18
    7150:	48 1b       	sub	r20, r24
    7152:	59 0b       	sbc	r21, r25
    7154:	ca 01       	movw	r24, r20
}
    7156:	cf 91       	pop	r28
    7158:	df 91       	pop	r29
    715a:	08 95       	ret

0000715c <ESP8266_DataRead>:

uint8_t ESP8266_DataRead()
{
    715c:	df 93       	push	r29
    715e:	cf 93       	push	r28
    7160:	0f 92       	push	r0
    7162:	cd b7       	in	r28, 0x3d	; 61
    7164:	de b7       	in	r29, 0x3e	; 62
	if(pointer < Counter1)
    7166:	20 91 2f 05 	lds	r18, 0x052F
    716a:	30 91 30 05 	lds	r19, 0x0530
    716e:	80 91 2d 05 	lds	r24, 0x052D
    7172:	90 91 2e 05 	lds	r25, 0x052E
    7176:	28 17       	cp	r18, r24
    7178:	39 07       	cpc	r19, r25
    717a:	7c f4       	brge	.+30     	; 0x719a <ESP8266_DataRead+0x3e>
	return RESPONSE_BUFFER1[pointer++];
    717c:	80 91 2f 05 	lds	r24, 0x052F
    7180:	90 91 30 05 	lds	r25, 0x0530
    7184:	fc 01       	movw	r30, r24
    7186:	e7 5c       	subi	r30, 0xC7	; 199
    7188:	f8 4f       	sbci	r31, 0xF8	; 248
    718a:	20 81       	ld	r18, Z
    718c:	29 83       	std	Y+1, r18	; 0x01
    718e:	01 96       	adiw	r24, 0x01	; 1
    7190:	90 93 30 05 	sts	0x0530, r25
    7194:	80 93 2f 05 	sts	0x052F, r24
    7198:	03 c0       	rjmp	.+6      	; 0x71a0 <ESP8266_DataRead+0x44>
	else{
		ESP8266_Clear();
    719a:	0e 94 93 34 	call	0x6926	; 0x6926 <ESP8266_Clear>
		return 0;
    719e:	19 82       	std	Y+1, r1	; 0x01
    71a0:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    71a2:	0f 90       	pop	r0
    71a4:	cf 91       	pop	r28
    71a6:	df 91       	pop	r29
    71a8:	08 95       	ret

000071aa <Read_Data>:

uint16_t Read_Data(char* _buffer)
{
    71aa:	0f 93       	push	r16
    71ac:	1f 93       	push	r17
    71ae:	df 93       	push	r29
    71b0:	cf 93       	push	r28
    71b2:	cd b7       	in	r28, 0x3d	; 61
    71b4:	de b7       	in	r29, 0x3e	; 62
    71b6:	62 97       	sbiw	r28, 0x12	; 18
    71b8:	0f b6       	in	r0, 0x3f	; 63
    71ba:	f8 94       	cli
    71bc:	de bf       	out	0x3e, r29	; 62
    71be:	0f be       	out	0x3f, r0	; 63
    71c0:	cd bf       	out	0x3d, r28	; 61
    71c2:	9a 8b       	std	Y+18, r25	; 0x12
    71c4:	89 8b       	std	Y+17, r24	; 0x11
	uint16_t len = 0;
    71c6:	18 8a       	std	Y+16, r1	; 0x10
    71c8:	1f 86       	std	Y+15, r1	; 0x0f
    71ca:	80 e0       	ldi	r24, 0x00	; 0
    71cc:	90 e0       	ldi	r25, 0x00	; 0
    71ce:	a8 ec       	ldi	r26, 0xC8	; 200
    71d0:	b2 e4       	ldi	r27, 0x42	; 66
    71d2:	8b 87       	std	Y+11, r24	; 0x0b
    71d4:	9c 87       	std	Y+12, r25	; 0x0c
    71d6:	ad 87       	std	Y+13, r26	; 0x0d
    71d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    71da:	6b 85       	ldd	r22, Y+11	; 0x0b
    71dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    71de:	8d 85       	ldd	r24, Y+13	; 0x0d
    71e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    71e2:	20 e0       	ldi	r18, 0x00	; 0
    71e4:	30 e0       	ldi	r19, 0x00	; 0
    71e6:	4a ef       	ldi	r20, 0xFA	; 250
    71e8:	54 e4       	ldi	r21, 0x44	; 68
    71ea:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    71ee:	dc 01       	movw	r26, r24
    71f0:	cb 01       	movw	r24, r22
    71f2:	8f 83       	std	Y+7, r24	; 0x07
    71f4:	98 87       	std	Y+8, r25	; 0x08
    71f6:	a9 87       	std	Y+9, r26	; 0x09
    71f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    71fa:	6f 81       	ldd	r22, Y+7	; 0x07
    71fc:	78 85       	ldd	r23, Y+8	; 0x08
    71fe:	89 85       	ldd	r24, Y+9	; 0x09
    7200:	9a 85       	ldd	r25, Y+10	; 0x0a
    7202:	20 e0       	ldi	r18, 0x00	; 0
    7204:	30 e0       	ldi	r19, 0x00	; 0
    7206:	40 e8       	ldi	r20, 0x80	; 128
    7208:	5f e3       	ldi	r21, 0x3F	; 63
    720a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    720e:	88 23       	and	r24, r24
    7210:	2c f4       	brge	.+10     	; 0x721c <Read_Data+0x72>
		__ticks = 1;
    7212:	81 e0       	ldi	r24, 0x01	; 1
    7214:	90 e0       	ldi	r25, 0x00	; 0
    7216:	9e 83       	std	Y+6, r25	; 0x06
    7218:	8d 83       	std	Y+5, r24	; 0x05
    721a:	3f c0       	rjmp	.+126    	; 0x729a <Read_Data+0xf0>
	else if (__tmp > 65535)
    721c:	6f 81       	ldd	r22, Y+7	; 0x07
    721e:	78 85       	ldd	r23, Y+8	; 0x08
    7220:	89 85       	ldd	r24, Y+9	; 0x09
    7222:	9a 85       	ldd	r25, Y+10	; 0x0a
    7224:	20 e0       	ldi	r18, 0x00	; 0
    7226:	3f ef       	ldi	r19, 0xFF	; 255
    7228:	4f e7       	ldi	r20, 0x7F	; 127
    722a:	57 e4       	ldi	r21, 0x47	; 71
    722c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    7230:	18 16       	cp	r1, r24
    7232:	4c f5       	brge	.+82     	; 0x7286 <Read_Data+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7234:	6b 85       	ldd	r22, Y+11	; 0x0b
    7236:	7c 85       	ldd	r23, Y+12	; 0x0c
    7238:	8d 85       	ldd	r24, Y+13	; 0x0d
    723a:	9e 85       	ldd	r25, Y+14	; 0x0e
    723c:	20 e0       	ldi	r18, 0x00	; 0
    723e:	30 e0       	ldi	r19, 0x00	; 0
    7240:	40 e2       	ldi	r20, 0x20	; 32
    7242:	51 e4       	ldi	r21, 0x41	; 65
    7244:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    7248:	dc 01       	movw	r26, r24
    724a:	cb 01       	movw	r24, r22
    724c:	bc 01       	movw	r22, r24
    724e:	cd 01       	movw	r24, r26
    7250:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    7254:	dc 01       	movw	r26, r24
    7256:	cb 01       	movw	r24, r22
    7258:	9e 83       	std	Y+6, r25	; 0x06
    725a:	8d 83       	std	Y+5, r24	; 0x05
    725c:	0f c0       	rjmp	.+30     	; 0x727c <Read_Data+0xd2>
    725e:	88 ec       	ldi	r24, 0xC8	; 200
    7260:	90 e0       	ldi	r25, 0x00	; 0
    7262:	9c 83       	std	Y+4, r25	; 0x04
    7264:	8b 83       	std	Y+3, r24	; 0x03
    7266:	8b 81       	ldd	r24, Y+3	; 0x03
    7268:	9c 81       	ldd	r25, Y+4	; 0x04
    726a:	01 97       	sbiw	r24, 0x01	; 1
    726c:	f1 f7       	brne	.-4      	; 0x726a <Read_Data+0xc0>
    726e:	9c 83       	std	Y+4, r25	; 0x04
    7270:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7272:	8d 81       	ldd	r24, Y+5	; 0x05
    7274:	9e 81       	ldd	r25, Y+6	; 0x06
    7276:	01 97       	sbiw	r24, 0x01	; 1
    7278:	9e 83       	std	Y+6, r25	; 0x06
    727a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    727c:	8d 81       	ldd	r24, Y+5	; 0x05
    727e:	9e 81       	ldd	r25, Y+6	; 0x06
    7280:	00 97       	sbiw	r24, 0x00	; 0
    7282:	69 f7       	brne	.-38     	; 0x725e <Read_Data+0xb4>
    7284:	25 c0       	rjmp	.+74     	; 0x72d0 <Read_Data+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7286:	6f 81       	ldd	r22, Y+7	; 0x07
    7288:	78 85       	ldd	r23, Y+8	; 0x08
    728a:	89 85       	ldd	r24, Y+9	; 0x09
    728c:	9a 85       	ldd	r25, Y+10	; 0x0a
    728e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    7292:	dc 01       	movw	r26, r24
    7294:	cb 01       	movw	r24, r22
    7296:	9e 83       	std	Y+6, r25	; 0x06
    7298:	8d 83       	std	Y+5, r24	; 0x05
    729a:	8d 81       	ldd	r24, Y+5	; 0x05
    729c:	9e 81       	ldd	r25, Y+6	; 0x06
    729e:	9a 83       	std	Y+2, r25	; 0x02
    72a0:	89 83       	std	Y+1, r24	; 0x01
    72a2:	89 81       	ldd	r24, Y+1	; 0x01
    72a4:	9a 81       	ldd	r25, Y+2	; 0x02
    72a6:	01 97       	sbiw	r24, 0x01	; 1
    72a8:	f1 f7       	brne	.-4      	; 0x72a6 <Read_Data+0xfc>
    72aa:	9a 83       	std	Y+2, r25	; 0x02
    72ac:	89 83       	std	Y+1, r24	; 0x01
    72ae:	10 c0       	rjmp	.+32     	; 0x72d0 <Read_Data+0x126>
	_delay_ms(100);
	while(ESP8266_DataAvailable() > 0)
	_buffer[len++] = ESP8266_DataRead();
    72b0:	29 89       	ldd	r18, Y+17	; 0x11
    72b2:	3a 89       	ldd	r19, Y+18	; 0x12
    72b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    72b6:	98 89       	ldd	r25, Y+16	; 0x10
    72b8:	89 01       	movw	r16, r18
    72ba:	08 0f       	add	r16, r24
    72bc:	19 1f       	adc	r17, r25
    72be:	0e 94 ae 38 	call	0x715c	; 0x715c <ESP8266_DataRead>
    72c2:	f8 01       	movw	r30, r16
    72c4:	80 83       	st	Z, r24
    72c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    72c8:	98 89       	ldd	r25, Y+16	; 0x10
    72ca:	01 96       	adiw	r24, 0x01	; 1
    72cc:	98 8b       	std	Y+16, r25	; 0x10
    72ce:	8f 87       	std	Y+15, r24	; 0x0f

uint16_t Read_Data(char* _buffer)
{
	uint16_t len = 0;
	_delay_ms(100);
	while(ESP8266_DataAvailable() > 0)
    72d0:	0e 94 9b 38 	call	0x7136	; 0x7136 <ESP8266_DataAvailable>
    72d4:	18 16       	cp	r1, r24
    72d6:	19 06       	cpc	r1, r25
    72d8:	5c f3       	brlt	.-42     	; 0x72b0 <Read_Data+0x106>
	_buffer[len++] = ESP8266_DataRead();
	return len;
    72da:	8f 85       	ldd	r24, Y+15	; 0x0f
    72dc:	98 89       	ldd	r25, Y+16	; 0x10
}
    72de:	62 96       	adiw	r28, 0x12	; 18
    72e0:	0f b6       	in	r0, 0x3f	; 63
    72e2:	f8 94       	cli
    72e4:	de bf       	out	0x3e, r29	; 62
    72e6:	0f be       	out	0x3f, r0	; 63
    72e8:	cd bf       	out	0x3d, r28	; 61
    72ea:	cf 91       	pop	r28
    72ec:	df 91       	pop	r29
    72ee:	1f 91       	pop	r17
    72f0:	0f 91       	pop	r16
    72f2:	08 95       	ret

000072f4 <__mulsi3>:
    72f4:	62 9f       	mul	r22, r18
    72f6:	d0 01       	movw	r26, r0
    72f8:	73 9f       	mul	r23, r19
    72fa:	f0 01       	movw	r30, r0
    72fc:	82 9f       	mul	r24, r18
    72fe:	e0 0d       	add	r30, r0
    7300:	f1 1d       	adc	r31, r1
    7302:	64 9f       	mul	r22, r20
    7304:	e0 0d       	add	r30, r0
    7306:	f1 1d       	adc	r31, r1
    7308:	92 9f       	mul	r25, r18
    730a:	f0 0d       	add	r31, r0
    730c:	83 9f       	mul	r24, r19
    730e:	f0 0d       	add	r31, r0
    7310:	74 9f       	mul	r23, r20
    7312:	f0 0d       	add	r31, r0
    7314:	65 9f       	mul	r22, r21
    7316:	f0 0d       	add	r31, r0
    7318:	99 27       	eor	r25, r25
    731a:	72 9f       	mul	r23, r18
    731c:	b0 0d       	add	r27, r0
    731e:	e1 1d       	adc	r30, r1
    7320:	f9 1f       	adc	r31, r25
    7322:	63 9f       	mul	r22, r19
    7324:	b0 0d       	add	r27, r0
    7326:	e1 1d       	adc	r30, r1
    7328:	f9 1f       	adc	r31, r25
    732a:	bd 01       	movw	r22, r26
    732c:	cf 01       	movw	r24, r30
    732e:	11 24       	eor	r1, r1
    7330:	08 95       	ret

00007332 <__divmodhi4>:
    7332:	97 fb       	bst	r25, 7
    7334:	09 2e       	mov	r0, r25
    7336:	07 26       	eor	r0, r23
    7338:	0a d0       	rcall	.+20     	; 0x734e <__divmodhi4_neg1>
    733a:	77 fd       	sbrc	r23, 7
    733c:	04 d0       	rcall	.+8      	; 0x7346 <__divmodhi4_neg2>
    733e:	2e d0       	rcall	.+92     	; 0x739c <__udivmodhi4>
    7340:	06 d0       	rcall	.+12     	; 0x734e <__divmodhi4_neg1>
    7342:	00 20       	and	r0, r0
    7344:	1a f4       	brpl	.+6      	; 0x734c <__divmodhi4_exit>

00007346 <__divmodhi4_neg2>:
    7346:	70 95       	com	r23
    7348:	61 95       	neg	r22
    734a:	7f 4f       	sbci	r23, 0xFF	; 255

0000734c <__divmodhi4_exit>:
    734c:	08 95       	ret

0000734e <__divmodhi4_neg1>:
    734e:	f6 f7       	brtc	.-4      	; 0x734c <__divmodhi4_exit>
    7350:	90 95       	com	r25
    7352:	81 95       	neg	r24
    7354:	9f 4f       	sbci	r25, 0xFF	; 255
    7356:	08 95       	ret

00007358 <__udivmodsi4>:
    7358:	a1 e2       	ldi	r26, 0x21	; 33
    735a:	1a 2e       	mov	r1, r26
    735c:	aa 1b       	sub	r26, r26
    735e:	bb 1b       	sub	r27, r27
    7360:	fd 01       	movw	r30, r26
    7362:	0d c0       	rjmp	.+26     	; 0x737e <__udivmodsi4_ep>

00007364 <__udivmodsi4_loop>:
    7364:	aa 1f       	adc	r26, r26
    7366:	bb 1f       	adc	r27, r27
    7368:	ee 1f       	adc	r30, r30
    736a:	ff 1f       	adc	r31, r31
    736c:	a2 17       	cp	r26, r18
    736e:	b3 07       	cpc	r27, r19
    7370:	e4 07       	cpc	r30, r20
    7372:	f5 07       	cpc	r31, r21
    7374:	20 f0       	brcs	.+8      	; 0x737e <__udivmodsi4_ep>
    7376:	a2 1b       	sub	r26, r18
    7378:	b3 0b       	sbc	r27, r19
    737a:	e4 0b       	sbc	r30, r20
    737c:	f5 0b       	sbc	r31, r21

0000737e <__udivmodsi4_ep>:
    737e:	66 1f       	adc	r22, r22
    7380:	77 1f       	adc	r23, r23
    7382:	88 1f       	adc	r24, r24
    7384:	99 1f       	adc	r25, r25
    7386:	1a 94       	dec	r1
    7388:	69 f7       	brne	.-38     	; 0x7364 <__udivmodsi4_loop>
    738a:	60 95       	com	r22
    738c:	70 95       	com	r23
    738e:	80 95       	com	r24
    7390:	90 95       	com	r25
    7392:	9b 01       	movw	r18, r22
    7394:	ac 01       	movw	r20, r24
    7396:	bd 01       	movw	r22, r26
    7398:	cf 01       	movw	r24, r30
    739a:	08 95       	ret

0000739c <__udivmodhi4>:
    739c:	aa 1b       	sub	r26, r26
    739e:	bb 1b       	sub	r27, r27
    73a0:	51 e1       	ldi	r21, 0x11	; 17
    73a2:	07 c0       	rjmp	.+14     	; 0x73b2 <__udivmodhi4_ep>

000073a4 <__udivmodhi4_loop>:
    73a4:	aa 1f       	adc	r26, r26
    73a6:	bb 1f       	adc	r27, r27
    73a8:	a6 17       	cp	r26, r22
    73aa:	b7 07       	cpc	r27, r23
    73ac:	10 f0       	brcs	.+4      	; 0x73b2 <__udivmodhi4_ep>
    73ae:	a6 1b       	sub	r26, r22
    73b0:	b7 0b       	sbc	r27, r23

000073b2 <__udivmodhi4_ep>:
    73b2:	88 1f       	adc	r24, r24
    73b4:	99 1f       	adc	r25, r25
    73b6:	5a 95       	dec	r21
    73b8:	a9 f7       	brne	.-22     	; 0x73a4 <__udivmodhi4_loop>
    73ba:	80 95       	com	r24
    73bc:	90 95       	com	r25
    73be:	bc 01       	movw	r22, r24
    73c0:	cd 01       	movw	r24, r26
    73c2:	08 95       	ret

000073c4 <__prologue_saves__>:
    73c4:	2f 92       	push	r2
    73c6:	3f 92       	push	r3
    73c8:	4f 92       	push	r4
    73ca:	5f 92       	push	r5
    73cc:	6f 92       	push	r6
    73ce:	7f 92       	push	r7
    73d0:	8f 92       	push	r8
    73d2:	9f 92       	push	r9
    73d4:	af 92       	push	r10
    73d6:	bf 92       	push	r11
    73d8:	cf 92       	push	r12
    73da:	df 92       	push	r13
    73dc:	ef 92       	push	r14
    73de:	ff 92       	push	r15
    73e0:	0f 93       	push	r16
    73e2:	1f 93       	push	r17
    73e4:	cf 93       	push	r28
    73e6:	df 93       	push	r29
    73e8:	cd b7       	in	r28, 0x3d	; 61
    73ea:	de b7       	in	r29, 0x3e	; 62
    73ec:	ca 1b       	sub	r28, r26
    73ee:	db 0b       	sbc	r29, r27
    73f0:	0f b6       	in	r0, 0x3f	; 63
    73f2:	f8 94       	cli
    73f4:	de bf       	out	0x3e, r29	; 62
    73f6:	0f be       	out	0x3f, r0	; 63
    73f8:	cd bf       	out	0x3d, r28	; 61
    73fa:	09 94       	ijmp

000073fc <__epilogue_restores__>:
    73fc:	2a 88       	ldd	r2, Y+18	; 0x12
    73fe:	39 88       	ldd	r3, Y+17	; 0x11
    7400:	48 88       	ldd	r4, Y+16	; 0x10
    7402:	5f 84       	ldd	r5, Y+15	; 0x0f
    7404:	6e 84       	ldd	r6, Y+14	; 0x0e
    7406:	7d 84       	ldd	r7, Y+13	; 0x0d
    7408:	8c 84       	ldd	r8, Y+12	; 0x0c
    740a:	9b 84       	ldd	r9, Y+11	; 0x0b
    740c:	aa 84       	ldd	r10, Y+10	; 0x0a
    740e:	b9 84       	ldd	r11, Y+9	; 0x09
    7410:	c8 84       	ldd	r12, Y+8	; 0x08
    7412:	df 80       	ldd	r13, Y+7	; 0x07
    7414:	ee 80       	ldd	r14, Y+6	; 0x06
    7416:	fd 80       	ldd	r15, Y+5	; 0x05
    7418:	0c 81       	ldd	r16, Y+4	; 0x04
    741a:	1b 81       	ldd	r17, Y+3	; 0x03
    741c:	aa 81       	ldd	r26, Y+2	; 0x02
    741e:	b9 81       	ldd	r27, Y+1	; 0x01
    7420:	ce 0f       	add	r28, r30
    7422:	d1 1d       	adc	r29, r1
    7424:	0f b6       	in	r0, 0x3f	; 63
    7426:	f8 94       	cli
    7428:	de bf       	out	0x3e, r29	; 62
    742a:	0f be       	out	0x3f, r0	; 63
    742c:	cd bf       	out	0x3d, r28	; 61
    742e:	ed 01       	movw	r28, r26
    7430:	08 95       	ret

00007432 <dtostrf>:
    7432:	ef 92       	push	r14
    7434:	ff 92       	push	r15
    7436:	0f 93       	push	r16
    7438:	1f 93       	push	r17
    743a:	f2 2f       	mov	r31, r18
    743c:	f0 2e       	mov	r15, r16
    743e:	47 fd       	sbrc	r20, 7
    7440:	02 c0       	rjmp	.+4      	; 0x7446 <dtostrf+0x14>
    7442:	e4 e0       	ldi	r30, 0x04	; 4
    7444:	01 c0       	rjmp	.+2      	; 0x7448 <dtostrf+0x16>
    7446:	e4 e1       	ldi	r30, 0x14	; 20
    7448:	24 2f       	mov	r18, r20
    744a:	33 27       	eor	r19, r19
    744c:	27 fd       	sbrc	r18, 7
    744e:	30 95       	com	r19
    7450:	37 ff       	sbrs	r19, 7
    7452:	03 c0       	rjmp	.+6      	; 0x745a <dtostrf+0x28>
    7454:	30 95       	com	r19
    7456:	21 95       	neg	r18
    7458:	3f 4f       	sbci	r19, 0xFF	; 255
    745a:	4f 2d       	mov	r20, r15
    745c:	51 2f       	mov	r21, r17
    745e:	0f 2f       	mov	r16, r31
    7460:	ee 2e       	mov	r14, r30
    7462:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <dtoa_prf>
    7466:	8f 2d       	mov	r24, r15
    7468:	91 2f       	mov	r25, r17
    746a:	1f 91       	pop	r17
    746c:	0f 91       	pop	r16
    746e:	ff 90       	pop	r15
    7470:	ef 90       	pop	r14
    7472:	08 95       	ret

00007474 <atoi>:
    7474:	fc 01       	movw	r30, r24
    7476:	88 27       	eor	r24, r24
    7478:	99 27       	eor	r25, r25
    747a:	e8 94       	clt
    747c:	21 91       	ld	r18, Z+
    747e:	20 32       	cpi	r18, 0x20	; 32
    7480:	e9 f3       	breq	.-6      	; 0x747c <atoi+0x8>
    7482:	29 30       	cpi	r18, 0x09	; 9
    7484:	10 f0       	brcs	.+4      	; 0x748a <atoi+0x16>
    7486:	2e 30       	cpi	r18, 0x0E	; 14
    7488:	c8 f3       	brcs	.-14     	; 0x747c <atoi+0x8>
    748a:	2b 32       	cpi	r18, 0x2B	; 43
    748c:	41 f0       	breq	.+16     	; 0x749e <atoi+0x2a>
    748e:	2d 32       	cpi	r18, 0x2D	; 45
    7490:	39 f4       	brne	.+14     	; 0x74a0 <atoi+0x2c>
    7492:	68 94       	set
    7494:	04 c0       	rjmp	.+8      	; 0x749e <atoi+0x2a>
    7496:	0e 94 f6 3a 	call	0x75ec	; 0x75ec <__mulhi_const_10>
    749a:	82 0f       	add	r24, r18
    749c:	91 1d       	adc	r25, r1
    749e:	21 91       	ld	r18, Z+
    74a0:	20 53       	subi	r18, 0x30	; 48
    74a2:	2a 30       	cpi	r18, 0x0A	; 10
    74a4:	c0 f3       	brcs	.-16     	; 0x7496 <atoi+0x22>
    74a6:	1e f4       	brtc	.+6      	; 0x74ae <atoi+0x3a>
    74a8:	90 95       	com	r25
    74aa:	81 95       	neg	r24
    74ac:	9f 4f       	sbci	r25, 0xFF	; 255
    74ae:	08 95       	ret

000074b0 <atol>:
    74b0:	1f 93       	push	r17
    74b2:	fc 01       	movw	r30, r24
    74b4:	99 27       	eor	r25, r25
    74b6:	88 27       	eor	r24, r24
    74b8:	bc 01       	movw	r22, r24
    74ba:	e8 94       	clt
    74bc:	11 91       	ld	r17, Z+
    74be:	10 32       	cpi	r17, 0x20	; 32
    74c0:	e9 f3       	breq	.-6      	; 0x74bc <atol+0xc>
    74c2:	19 30       	cpi	r17, 0x09	; 9
    74c4:	10 f0       	brcs	.+4      	; 0x74ca <atol+0x1a>
    74c6:	1e 30       	cpi	r17, 0x0E	; 14
    74c8:	c8 f3       	brcs	.-14     	; 0x74bc <atol+0xc>
    74ca:	1b 32       	cpi	r17, 0x2B	; 43
    74cc:	51 f0       	breq	.+20     	; 0x74e2 <atol+0x32>
    74ce:	1d 32       	cpi	r17, 0x2D	; 45
    74d0:	49 f4       	brne	.+18     	; 0x74e4 <atol+0x34>
    74d2:	68 94       	set
    74d4:	06 c0       	rjmp	.+12     	; 0x74e2 <atol+0x32>
    74d6:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__mulsi_const_10>
    74da:	61 0f       	add	r22, r17
    74dc:	71 1d       	adc	r23, r1
    74de:	81 1d       	adc	r24, r1
    74e0:	91 1d       	adc	r25, r1
    74e2:	11 91       	ld	r17, Z+
    74e4:	10 53       	subi	r17, 0x30	; 48
    74e6:	1a 30       	cpi	r17, 0x0A	; 10
    74e8:	b0 f3       	brcs	.-20     	; 0x74d6 <atol+0x26>
    74ea:	3e f4       	brtc	.+14     	; 0x74fa <atol+0x4a>
    74ec:	90 95       	com	r25
    74ee:	80 95       	com	r24
    74f0:	70 95       	com	r23
    74f2:	61 95       	neg	r22
    74f4:	7f 4f       	sbci	r23, 0xFF	; 255
    74f6:	8f 4f       	sbci	r24, 0xFF	; 255
    74f8:	9f 4f       	sbci	r25, 0xFF	; 255
    74fa:	1f 91       	pop	r17
    74fc:	08 95       	ret

000074fe <memcpy>:
    74fe:	fb 01       	movw	r30, r22
    7500:	dc 01       	movw	r26, r24
    7502:	02 c0       	rjmp	.+4      	; 0x7508 <memcpy+0xa>
    7504:	01 90       	ld	r0, Z+
    7506:	0d 92       	st	X+, r0
    7508:	41 50       	subi	r20, 0x01	; 1
    750a:	50 40       	sbci	r21, 0x00	; 0
    750c:	d8 f7       	brcc	.-10     	; 0x7504 <memcpy+0x6>
    750e:	08 95       	ret

00007510 <memmove>:
    7510:	68 17       	cp	r22, r24
    7512:	79 07       	cpc	r23, r25
    7514:	68 f4       	brcc	.+26     	; 0x7530 <memmove+0x20>
    7516:	fb 01       	movw	r30, r22
    7518:	dc 01       	movw	r26, r24
    751a:	e4 0f       	add	r30, r20
    751c:	f5 1f       	adc	r31, r21
    751e:	a4 0f       	add	r26, r20
    7520:	b5 1f       	adc	r27, r21
    7522:	02 c0       	rjmp	.+4      	; 0x7528 <memmove+0x18>
    7524:	02 90       	ld	r0, -Z
    7526:	0e 92       	st	-X, r0
    7528:	41 50       	subi	r20, 0x01	; 1
    752a:	50 40       	sbci	r21, 0x00	; 0
    752c:	d8 f7       	brcc	.-10     	; 0x7524 <memmove+0x14>
    752e:	08 95       	ret
    7530:	0c 94 7f 3a 	jmp	0x74fe	; 0x74fe <memcpy>

00007534 <memset>:
    7534:	dc 01       	movw	r26, r24
    7536:	01 c0       	rjmp	.+2      	; 0x753a <memset+0x6>
    7538:	6d 93       	st	X+, r22
    753a:	41 50       	subi	r20, 0x01	; 1
    753c:	50 40       	sbci	r21, 0x00	; 0
    753e:	e0 f7       	brcc	.-8      	; 0x7538 <memset+0x4>
    7540:	08 95       	ret

00007542 <strlen>:
    7542:	fc 01       	movw	r30, r24
    7544:	01 90       	ld	r0, Z+
    7546:	00 20       	and	r0, r0
    7548:	e9 f7       	brne	.-6      	; 0x7544 <strlen+0x2>
    754a:	80 95       	com	r24
    754c:	90 95       	com	r25
    754e:	8e 0f       	add	r24, r30
    7550:	9f 1f       	adc	r25, r31
    7552:	08 95       	ret

00007554 <strncmp>:
    7554:	fb 01       	movw	r30, r22
    7556:	dc 01       	movw	r26, r24
    7558:	41 50       	subi	r20, 0x01	; 1
    755a:	50 40       	sbci	r21, 0x00	; 0
    755c:	30 f0       	brcs	.+12     	; 0x756a <strncmp+0x16>
    755e:	8d 91       	ld	r24, X+
    7560:	01 90       	ld	r0, Z+
    7562:	80 19       	sub	r24, r0
    7564:	19 f4       	brne	.+6      	; 0x756c <strncmp+0x18>
    7566:	00 20       	and	r0, r0
    7568:	b9 f7       	brne	.-18     	; 0x7558 <strncmp+0x4>
    756a:	88 1b       	sub	r24, r24
    756c:	99 0b       	sbc	r25, r25
    756e:	08 95       	ret

00007570 <strncpy>:
    7570:	fb 01       	movw	r30, r22
    7572:	dc 01       	movw	r26, r24
    7574:	41 50       	subi	r20, 0x01	; 1
    7576:	50 40       	sbci	r21, 0x00	; 0
    7578:	48 f0       	brcs	.+18     	; 0x758c <strncpy+0x1c>
    757a:	01 90       	ld	r0, Z+
    757c:	0d 92       	st	X+, r0
    757e:	00 20       	and	r0, r0
    7580:	c9 f7       	brne	.-14     	; 0x7574 <strncpy+0x4>
    7582:	01 c0       	rjmp	.+2      	; 0x7586 <strncpy+0x16>
    7584:	1d 92       	st	X+, r1
    7586:	41 50       	subi	r20, 0x01	; 1
    7588:	50 40       	sbci	r21, 0x00	; 0
    758a:	e0 f7       	brcc	.-8      	; 0x7584 <strncpy+0x14>
    758c:	08 95       	ret

0000758e <strstr>:
    758e:	fb 01       	movw	r30, r22
    7590:	51 91       	ld	r21, Z+
    7592:	55 23       	and	r21, r21
    7594:	a9 f0       	breq	.+42     	; 0x75c0 <strstr+0x32>
    7596:	bf 01       	movw	r22, r30
    7598:	dc 01       	movw	r26, r24
    759a:	4d 91       	ld	r20, X+
    759c:	45 17       	cp	r20, r21
    759e:	41 11       	cpse	r20, r1
    75a0:	e1 f7       	brne	.-8      	; 0x759a <strstr+0xc>
    75a2:	59 f4       	brne	.+22     	; 0x75ba <strstr+0x2c>
    75a4:	cd 01       	movw	r24, r26
    75a6:	01 90       	ld	r0, Z+
    75a8:	00 20       	and	r0, r0
    75aa:	49 f0       	breq	.+18     	; 0x75be <strstr+0x30>
    75ac:	4d 91       	ld	r20, X+
    75ae:	40 15       	cp	r20, r0
    75b0:	41 11       	cpse	r20, r1
    75b2:	c9 f3       	breq	.-14     	; 0x75a6 <strstr+0x18>
    75b4:	fb 01       	movw	r30, r22
    75b6:	41 11       	cpse	r20, r1
    75b8:	ef cf       	rjmp	.-34     	; 0x7598 <strstr+0xa>
    75ba:	81 e0       	ldi	r24, 0x01	; 1
    75bc:	90 e0       	ldi	r25, 0x00	; 0
    75be:	01 97       	sbiw	r24, 0x01	; 1
    75c0:	08 95       	ret

000075c2 <__mulsi_const_10>:
    75c2:	59 2f       	mov	r21, r25
    75c4:	48 2f       	mov	r20, r24
    75c6:	37 2f       	mov	r19, r23
    75c8:	26 2f       	mov	r18, r22
    75ca:	66 0f       	add	r22, r22
    75cc:	77 1f       	adc	r23, r23
    75ce:	88 1f       	adc	r24, r24
    75d0:	99 1f       	adc	r25, r25
    75d2:	66 0f       	add	r22, r22
    75d4:	77 1f       	adc	r23, r23
    75d6:	88 1f       	adc	r24, r24
    75d8:	99 1f       	adc	r25, r25
    75da:	62 0f       	add	r22, r18
    75dc:	73 1f       	adc	r23, r19
    75de:	84 1f       	adc	r24, r20
    75e0:	95 1f       	adc	r25, r21
    75e2:	66 0f       	add	r22, r22
    75e4:	77 1f       	adc	r23, r23
    75e6:	88 1f       	adc	r24, r24
    75e8:	99 1f       	adc	r25, r25
    75ea:	08 95       	ret

000075ec <__mulhi_const_10>:
    75ec:	7a e0       	ldi	r23, 0x0A	; 10
    75ee:	97 9f       	mul	r25, r23
    75f0:	90 2d       	mov	r25, r0
    75f2:	87 9f       	mul	r24, r23
    75f4:	80 2d       	mov	r24, r0
    75f6:	91 0d       	add	r25, r1
    75f8:	11 24       	eor	r1, r1
    75fa:	08 95       	ret

000075fc <sprintf>:
    75fc:	ae e0       	ldi	r26, 0x0E	; 14
    75fe:	b0 e0       	ldi	r27, 0x00	; 0
    7600:	e4 e0       	ldi	r30, 0x04	; 4
    7602:	fb e3       	ldi	r31, 0x3B	; 59
    7604:	0c 94 f0 39 	jmp	0x73e0	; 0x73e0 <__prologue_saves__+0x1c>
    7608:	0d 89       	ldd	r16, Y+21	; 0x15
    760a:	1e 89       	ldd	r17, Y+22	; 0x16
    760c:	86 e0       	ldi	r24, 0x06	; 6
    760e:	8c 83       	std	Y+4, r24	; 0x04
    7610:	1a 83       	std	Y+2, r17	; 0x02
    7612:	09 83       	std	Y+1, r16	; 0x01
    7614:	8f ef       	ldi	r24, 0xFF	; 255
    7616:	9f e7       	ldi	r25, 0x7F	; 127
    7618:	9e 83       	std	Y+6, r25	; 0x06
    761a:	8d 83       	std	Y+5, r24	; 0x05
    761c:	9e 01       	movw	r18, r28
    761e:	27 5e       	subi	r18, 0xE7	; 231
    7620:	3f 4f       	sbci	r19, 0xFF	; 255
    7622:	ce 01       	movw	r24, r28
    7624:	01 96       	adiw	r24, 0x01	; 1
    7626:	6f 89       	ldd	r22, Y+23	; 0x17
    7628:	78 8d       	ldd	r23, Y+24	; 0x18
    762a:	a9 01       	movw	r20, r18
    762c:	0e 94 22 3b 	call	0x7644	; 0x7644 <vfprintf>
    7630:	2f 81       	ldd	r18, Y+7	; 0x07
    7632:	38 85       	ldd	r19, Y+8	; 0x08
    7634:	02 0f       	add	r16, r18
    7636:	13 1f       	adc	r17, r19
    7638:	f8 01       	movw	r30, r16
    763a:	10 82       	st	Z, r1
    763c:	2e 96       	adiw	r28, 0x0e	; 14
    763e:	e4 e0       	ldi	r30, 0x04	; 4
    7640:	0c 94 0c 3a 	jmp	0x7418	; 0x7418 <__epilogue_restores__+0x1c>

00007644 <vfprintf>:
    7644:	ab e0       	ldi	r26, 0x0B	; 11
    7646:	b0 e0       	ldi	r27, 0x00	; 0
    7648:	e8 e2       	ldi	r30, 0x28	; 40
    764a:	fb e3       	ldi	r31, 0x3B	; 59
    764c:	0c 94 e2 39 	jmp	0x73c4	; 0x73c4 <__prologue_saves__>
    7650:	3c 01       	movw	r6, r24
    7652:	2b 01       	movw	r4, r22
    7654:	5a 01       	movw	r10, r20
    7656:	fc 01       	movw	r30, r24
    7658:	17 82       	std	Z+7, r1	; 0x07
    765a:	16 82       	std	Z+6, r1	; 0x06
    765c:	83 81       	ldd	r24, Z+3	; 0x03
    765e:	81 fd       	sbrc	r24, 1
    7660:	03 c0       	rjmp	.+6      	; 0x7668 <vfprintf+0x24>
    7662:	6f ef       	ldi	r22, 0xFF	; 255
    7664:	7f ef       	ldi	r23, 0xFF	; 255
    7666:	c6 c1       	rjmp	.+908    	; 0x79f4 <vfprintf+0x3b0>
    7668:	9a e0       	ldi	r25, 0x0A	; 10
    766a:	89 2e       	mov	r8, r25
    766c:	1e 01       	movw	r2, r28
    766e:	08 94       	sec
    7670:	21 1c       	adc	r2, r1
    7672:	31 1c       	adc	r3, r1
    7674:	f3 01       	movw	r30, r6
    7676:	23 81       	ldd	r18, Z+3	; 0x03
    7678:	f2 01       	movw	r30, r4
    767a:	23 fd       	sbrc	r18, 3
    767c:	85 91       	lpm	r24, Z+
    767e:	23 ff       	sbrs	r18, 3
    7680:	81 91       	ld	r24, Z+
    7682:	2f 01       	movw	r4, r30
    7684:	88 23       	and	r24, r24
    7686:	09 f4       	brne	.+2      	; 0x768a <vfprintf+0x46>
    7688:	b2 c1       	rjmp	.+868    	; 0x79ee <vfprintf+0x3aa>
    768a:	85 32       	cpi	r24, 0x25	; 37
    768c:	39 f4       	brne	.+14     	; 0x769c <vfprintf+0x58>
    768e:	23 fd       	sbrc	r18, 3
    7690:	85 91       	lpm	r24, Z+
    7692:	23 ff       	sbrs	r18, 3
    7694:	81 91       	ld	r24, Z+
    7696:	2f 01       	movw	r4, r30
    7698:	85 32       	cpi	r24, 0x25	; 37
    769a:	29 f4       	brne	.+10     	; 0x76a6 <vfprintf+0x62>
    769c:	90 e0       	ldi	r25, 0x00	; 0
    769e:	b3 01       	movw	r22, r6
    76a0:	0e 94 4f 3f 	call	0x7e9e	; 0x7e9e <fputc>
    76a4:	e7 cf       	rjmp	.-50     	; 0x7674 <vfprintf+0x30>
    76a6:	98 2f       	mov	r25, r24
    76a8:	ff 24       	eor	r15, r15
    76aa:	ee 24       	eor	r14, r14
    76ac:	99 24       	eor	r9, r9
    76ae:	ff e1       	ldi	r31, 0x1F	; 31
    76b0:	ff 15       	cp	r31, r15
    76b2:	d0 f0       	brcs	.+52     	; 0x76e8 <vfprintf+0xa4>
    76b4:	9b 32       	cpi	r25, 0x2B	; 43
    76b6:	69 f0       	breq	.+26     	; 0x76d2 <vfprintf+0x8e>
    76b8:	9c 32       	cpi	r25, 0x2C	; 44
    76ba:	28 f4       	brcc	.+10     	; 0x76c6 <vfprintf+0x82>
    76bc:	90 32       	cpi	r25, 0x20	; 32
    76be:	59 f0       	breq	.+22     	; 0x76d6 <vfprintf+0x92>
    76c0:	93 32       	cpi	r25, 0x23	; 35
    76c2:	91 f4       	brne	.+36     	; 0x76e8 <vfprintf+0xa4>
    76c4:	0e c0       	rjmp	.+28     	; 0x76e2 <vfprintf+0x9e>
    76c6:	9d 32       	cpi	r25, 0x2D	; 45
    76c8:	49 f0       	breq	.+18     	; 0x76dc <vfprintf+0x98>
    76ca:	90 33       	cpi	r25, 0x30	; 48
    76cc:	69 f4       	brne	.+26     	; 0x76e8 <vfprintf+0xa4>
    76ce:	41 e0       	ldi	r20, 0x01	; 1
    76d0:	24 c0       	rjmp	.+72     	; 0x771a <vfprintf+0xd6>
    76d2:	52 e0       	ldi	r21, 0x02	; 2
    76d4:	f5 2a       	or	r15, r21
    76d6:	84 e0       	ldi	r24, 0x04	; 4
    76d8:	f8 2a       	or	r15, r24
    76da:	28 c0       	rjmp	.+80     	; 0x772c <vfprintf+0xe8>
    76dc:	98 e0       	ldi	r25, 0x08	; 8
    76de:	f9 2a       	or	r15, r25
    76e0:	25 c0       	rjmp	.+74     	; 0x772c <vfprintf+0xe8>
    76e2:	e0 e1       	ldi	r30, 0x10	; 16
    76e4:	fe 2a       	or	r15, r30
    76e6:	22 c0       	rjmp	.+68     	; 0x772c <vfprintf+0xe8>
    76e8:	f7 fc       	sbrc	r15, 7
    76ea:	29 c0       	rjmp	.+82     	; 0x773e <vfprintf+0xfa>
    76ec:	89 2f       	mov	r24, r25
    76ee:	80 53       	subi	r24, 0x30	; 48
    76f0:	8a 30       	cpi	r24, 0x0A	; 10
    76f2:	70 f4       	brcc	.+28     	; 0x7710 <vfprintf+0xcc>
    76f4:	f6 fe       	sbrs	r15, 6
    76f6:	05 c0       	rjmp	.+10     	; 0x7702 <vfprintf+0xbe>
    76f8:	98 9c       	mul	r9, r8
    76fa:	90 2c       	mov	r9, r0
    76fc:	11 24       	eor	r1, r1
    76fe:	98 0e       	add	r9, r24
    7700:	15 c0       	rjmp	.+42     	; 0x772c <vfprintf+0xe8>
    7702:	e8 9c       	mul	r14, r8
    7704:	e0 2c       	mov	r14, r0
    7706:	11 24       	eor	r1, r1
    7708:	e8 0e       	add	r14, r24
    770a:	f0 e2       	ldi	r31, 0x20	; 32
    770c:	ff 2a       	or	r15, r31
    770e:	0e c0       	rjmp	.+28     	; 0x772c <vfprintf+0xe8>
    7710:	9e 32       	cpi	r25, 0x2E	; 46
    7712:	29 f4       	brne	.+10     	; 0x771e <vfprintf+0xda>
    7714:	f6 fc       	sbrc	r15, 6
    7716:	6b c1       	rjmp	.+726    	; 0x79ee <vfprintf+0x3aa>
    7718:	40 e4       	ldi	r20, 0x40	; 64
    771a:	f4 2a       	or	r15, r20
    771c:	07 c0       	rjmp	.+14     	; 0x772c <vfprintf+0xe8>
    771e:	9c 36       	cpi	r25, 0x6C	; 108
    7720:	19 f4       	brne	.+6      	; 0x7728 <vfprintf+0xe4>
    7722:	50 e8       	ldi	r21, 0x80	; 128
    7724:	f5 2a       	or	r15, r21
    7726:	02 c0       	rjmp	.+4      	; 0x772c <vfprintf+0xe8>
    7728:	98 36       	cpi	r25, 0x68	; 104
    772a:	49 f4       	brne	.+18     	; 0x773e <vfprintf+0xfa>
    772c:	f2 01       	movw	r30, r4
    772e:	23 fd       	sbrc	r18, 3
    7730:	95 91       	lpm	r25, Z+
    7732:	23 ff       	sbrs	r18, 3
    7734:	91 91       	ld	r25, Z+
    7736:	2f 01       	movw	r4, r30
    7738:	99 23       	and	r25, r25
    773a:	09 f0       	breq	.+2      	; 0x773e <vfprintf+0xfa>
    773c:	b8 cf       	rjmp	.-144    	; 0x76ae <vfprintf+0x6a>
    773e:	89 2f       	mov	r24, r25
    7740:	85 54       	subi	r24, 0x45	; 69
    7742:	83 30       	cpi	r24, 0x03	; 3
    7744:	18 f0       	brcs	.+6      	; 0x774c <vfprintf+0x108>
    7746:	80 52       	subi	r24, 0x20	; 32
    7748:	83 30       	cpi	r24, 0x03	; 3
    774a:	38 f4       	brcc	.+14     	; 0x775a <vfprintf+0x116>
    774c:	44 e0       	ldi	r20, 0x04	; 4
    774e:	50 e0       	ldi	r21, 0x00	; 0
    7750:	a4 0e       	add	r10, r20
    7752:	b5 1e       	adc	r11, r21
    7754:	5f e3       	ldi	r21, 0x3F	; 63
    7756:	59 83       	std	Y+1, r21	; 0x01
    7758:	0f c0       	rjmp	.+30     	; 0x7778 <vfprintf+0x134>
    775a:	93 36       	cpi	r25, 0x63	; 99
    775c:	31 f0       	breq	.+12     	; 0x776a <vfprintf+0x126>
    775e:	93 37       	cpi	r25, 0x73	; 115
    7760:	79 f0       	breq	.+30     	; 0x7780 <vfprintf+0x13c>
    7762:	93 35       	cpi	r25, 0x53	; 83
    7764:	09 f0       	breq	.+2      	; 0x7768 <vfprintf+0x124>
    7766:	56 c0       	rjmp	.+172    	; 0x7814 <vfprintf+0x1d0>
    7768:	20 c0       	rjmp	.+64     	; 0x77aa <vfprintf+0x166>
    776a:	f5 01       	movw	r30, r10
    776c:	80 81       	ld	r24, Z
    776e:	89 83       	std	Y+1, r24	; 0x01
    7770:	42 e0       	ldi	r20, 0x02	; 2
    7772:	50 e0       	ldi	r21, 0x00	; 0
    7774:	a4 0e       	add	r10, r20
    7776:	b5 1e       	adc	r11, r21
    7778:	61 01       	movw	r12, r2
    777a:	01 e0       	ldi	r16, 0x01	; 1
    777c:	10 e0       	ldi	r17, 0x00	; 0
    777e:	12 c0       	rjmp	.+36     	; 0x77a4 <vfprintf+0x160>
    7780:	f5 01       	movw	r30, r10
    7782:	c0 80       	ld	r12, Z
    7784:	d1 80       	ldd	r13, Z+1	; 0x01
    7786:	f6 fc       	sbrc	r15, 6
    7788:	03 c0       	rjmp	.+6      	; 0x7790 <vfprintf+0x14c>
    778a:	6f ef       	ldi	r22, 0xFF	; 255
    778c:	7f ef       	ldi	r23, 0xFF	; 255
    778e:	02 c0       	rjmp	.+4      	; 0x7794 <vfprintf+0x150>
    7790:	69 2d       	mov	r22, r9
    7792:	70 e0       	ldi	r23, 0x00	; 0
    7794:	42 e0       	ldi	r20, 0x02	; 2
    7796:	50 e0       	ldi	r21, 0x00	; 0
    7798:	a4 0e       	add	r10, r20
    779a:	b5 1e       	adc	r11, r21
    779c:	c6 01       	movw	r24, r12
    779e:	0e 94 44 3f 	call	0x7e88	; 0x7e88 <strnlen>
    77a2:	8c 01       	movw	r16, r24
    77a4:	5f e7       	ldi	r21, 0x7F	; 127
    77a6:	f5 22       	and	r15, r21
    77a8:	14 c0       	rjmp	.+40     	; 0x77d2 <vfprintf+0x18e>
    77aa:	f5 01       	movw	r30, r10
    77ac:	c0 80       	ld	r12, Z
    77ae:	d1 80       	ldd	r13, Z+1	; 0x01
    77b0:	f6 fc       	sbrc	r15, 6
    77b2:	03 c0       	rjmp	.+6      	; 0x77ba <vfprintf+0x176>
    77b4:	6f ef       	ldi	r22, 0xFF	; 255
    77b6:	7f ef       	ldi	r23, 0xFF	; 255
    77b8:	02 c0       	rjmp	.+4      	; 0x77be <vfprintf+0x17a>
    77ba:	69 2d       	mov	r22, r9
    77bc:	70 e0       	ldi	r23, 0x00	; 0
    77be:	42 e0       	ldi	r20, 0x02	; 2
    77c0:	50 e0       	ldi	r21, 0x00	; 0
    77c2:	a4 0e       	add	r10, r20
    77c4:	b5 1e       	adc	r11, r21
    77c6:	c6 01       	movw	r24, r12
    77c8:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <strnlen_P>
    77cc:	8c 01       	movw	r16, r24
    77ce:	50 e8       	ldi	r21, 0x80	; 128
    77d0:	f5 2a       	or	r15, r21
    77d2:	f3 fe       	sbrs	r15, 3
    77d4:	07 c0       	rjmp	.+14     	; 0x77e4 <vfprintf+0x1a0>
    77d6:	1a c0       	rjmp	.+52     	; 0x780c <vfprintf+0x1c8>
    77d8:	80 e2       	ldi	r24, 0x20	; 32
    77da:	90 e0       	ldi	r25, 0x00	; 0
    77dc:	b3 01       	movw	r22, r6
    77de:	0e 94 4f 3f 	call	0x7e9e	; 0x7e9e <fputc>
    77e2:	ea 94       	dec	r14
    77e4:	8e 2d       	mov	r24, r14
    77e6:	90 e0       	ldi	r25, 0x00	; 0
    77e8:	08 17       	cp	r16, r24
    77ea:	19 07       	cpc	r17, r25
    77ec:	a8 f3       	brcs	.-22     	; 0x77d8 <vfprintf+0x194>
    77ee:	0e c0       	rjmp	.+28     	; 0x780c <vfprintf+0x1c8>
    77f0:	f6 01       	movw	r30, r12
    77f2:	f7 fc       	sbrc	r15, 7
    77f4:	85 91       	lpm	r24, Z+
    77f6:	f7 fe       	sbrs	r15, 7
    77f8:	81 91       	ld	r24, Z+
    77fa:	6f 01       	movw	r12, r30
    77fc:	90 e0       	ldi	r25, 0x00	; 0
    77fe:	b3 01       	movw	r22, r6
    7800:	0e 94 4f 3f 	call	0x7e9e	; 0x7e9e <fputc>
    7804:	e1 10       	cpse	r14, r1
    7806:	ea 94       	dec	r14
    7808:	01 50       	subi	r16, 0x01	; 1
    780a:	10 40       	sbci	r17, 0x00	; 0
    780c:	01 15       	cp	r16, r1
    780e:	11 05       	cpc	r17, r1
    7810:	79 f7       	brne	.-34     	; 0x77f0 <vfprintf+0x1ac>
    7812:	ea c0       	rjmp	.+468    	; 0x79e8 <vfprintf+0x3a4>
    7814:	94 36       	cpi	r25, 0x64	; 100
    7816:	11 f0       	breq	.+4      	; 0x781c <vfprintf+0x1d8>
    7818:	99 36       	cpi	r25, 0x69	; 105
    781a:	69 f5       	brne	.+90     	; 0x7876 <vfprintf+0x232>
    781c:	f7 fe       	sbrs	r15, 7
    781e:	08 c0       	rjmp	.+16     	; 0x7830 <vfprintf+0x1ec>
    7820:	f5 01       	movw	r30, r10
    7822:	20 81       	ld	r18, Z
    7824:	31 81       	ldd	r19, Z+1	; 0x01
    7826:	42 81       	ldd	r20, Z+2	; 0x02
    7828:	53 81       	ldd	r21, Z+3	; 0x03
    782a:	84 e0       	ldi	r24, 0x04	; 4
    782c:	90 e0       	ldi	r25, 0x00	; 0
    782e:	0a c0       	rjmp	.+20     	; 0x7844 <vfprintf+0x200>
    7830:	f5 01       	movw	r30, r10
    7832:	80 81       	ld	r24, Z
    7834:	91 81       	ldd	r25, Z+1	; 0x01
    7836:	9c 01       	movw	r18, r24
    7838:	44 27       	eor	r20, r20
    783a:	37 fd       	sbrc	r19, 7
    783c:	40 95       	com	r20
    783e:	54 2f       	mov	r21, r20
    7840:	82 e0       	ldi	r24, 0x02	; 2
    7842:	90 e0       	ldi	r25, 0x00	; 0
    7844:	a8 0e       	add	r10, r24
    7846:	b9 1e       	adc	r11, r25
    7848:	9f e6       	ldi	r25, 0x6F	; 111
    784a:	f9 22       	and	r15, r25
    784c:	57 ff       	sbrs	r21, 7
    784e:	09 c0       	rjmp	.+18     	; 0x7862 <vfprintf+0x21e>
    7850:	50 95       	com	r21
    7852:	40 95       	com	r20
    7854:	30 95       	com	r19
    7856:	21 95       	neg	r18
    7858:	3f 4f       	sbci	r19, 0xFF	; 255
    785a:	4f 4f       	sbci	r20, 0xFF	; 255
    785c:	5f 4f       	sbci	r21, 0xFF	; 255
    785e:	e0 e8       	ldi	r30, 0x80	; 128
    7860:	fe 2a       	or	r15, r30
    7862:	ca 01       	movw	r24, r20
    7864:	b9 01       	movw	r22, r18
    7866:	a1 01       	movw	r20, r2
    7868:	2a e0       	ldi	r18, 0x0A	; 10
    786a:	30 e0       	ldi	r19, 0x00	; 0
    786c:	0e 94 7b 3f 	call	0x7ef6	; 0x7ef6 <__ultoa_invert>
    7870:	d8 2e       	mov	r13, r24
    7872:	d2 18       	sub	r13, r2
    7874:	40 c0       	rjmp	.+128    	; 0x78f6 <vfprintf+0x2b2>
    7876:	95 37       	cpi	r25, 0x75	; 117
    7878:	29 f4       	brne	.+10     	; 0x7884 <vfprintf+0x240>
    787a:	1f 2d       	mov	r17, r15
    787c:	1f 7e       	andi	r17, 0xEF	; 239
    787e:	2a e0       	ldi	r18, 0x0A	; 10
    7880:	30 e0       	ldi	r19, 0x00	; 0
    7882:	1d c0       	rjmp	.+58     	; 0x78be <vfprintf+0x27a>
    7884:	1f 2d       	mov	r17, r15
    7886:	19 7f       	andi	r17, 0xF9	; 249
    7888:	9f 36       	cpi	r25, 0x6F	; 111
    788a:	61 f0       	breq	.+24     	; 0x78a4 <vfprintf+0x260>
    788c:	90 37       	cpi	r25, 0x70	; 112
    788e:	20 f4       	brcc	.+8      	; 0x7898 <vfprintf+0x254>
    7890:	98 35       	cpi	r25, 0x58	; 88
    7892:	09 f0       	breq	.+2      	; 0x7896 <vfprintf+0x252>
    7894:	ac c0       	rjmp	.+344    	; 0x79ee <vfprintf+0x3aa>
    7896:	0f c0       	rjmp	.+30     	; 0x78b6 <vfprintf+0x272>
    7898:	90 37       	cpi	r25, 0x70	; 112
    789a:	39 f0       	breq	.+14     	; 0x78aa <vfprintf+0x266>
    789c:	98 37       	cpi	r25, 0x78	; 120
    789e:	09 f0       	breq	.+2      	; 0x78a2 <vfprintf+0x25e>
    78a0:	a6 c0       	rjmp	.+332    	; 0x79ee <vfprintf+0x3aa>
    78a2:	04 c0       	rjmp	.+8      	; 0x78ac <vfprintf+0x268>
    78a4:	28 e0       	ldi	r18, 0x08	; 8
    78a6:	30 e0       	ldi	r19, 0x00	; 0
    78a8:	0a c0       	rjmp	.+20     	; 0x78be <vfprintf+0x27a>
    78aa:	10 61       	ori	r17, 0x10	; 16
    78ac:	14 fd       	sbrc	r17, 4
    78ae:	14 60       	ori	r17, 0x04	; 4
    78b0:	20 e1       	ldi	r18, 0x10	; 16
    78b2:	30 e0       	ldi	r19, 0x00	; 0
    78b4:	04 c0       	rjmp	.+8      	; 0x78be <vfprintf+0x27a>
    78b6:	14 fd       	sbrc	r17, 4
    78b8:	16 60       	ori	r17, 0x06	; 6
    78ba:	20 e1       	ldi	r18, 0x10	; 16
    78bc:	32 e0       	ldi	r19, 0x02	; 2
    78be:	17 ff       	sbrs	r17, 7
    78c0:	08 c0       	rjmp	.+16     	; 0x78d2 <vfprintf+0x28e>
    78c2:	f5 01       	movw	r30, r10
    78c4:	60 81       	ld	r22, Z
    78c6:	71 81       	ldd	r23, Z+1	; 0x01
    78c8:	82 81       	ldd	r24, Z+2	; 0x02
    78ca:	93 81       	ldd	r25, Z+3	; 0x03
    78cc:	44 e0       	ldi	r20, 0x04	; 4
    78ce:	50 e0       	ldi	r21, 0x00	; 0
    78d0:	08 c0       	rjmp	.+16     	; 0x78e2 <vfprintf+0x29e>
    78d2:	f5 01       	movw	r30, r10
    78d4:	80 81       	ld	r24, Z
    78d6:	91 81       	ldd	r25, Z+1	; 0x01
    78d8:	bc 01       	movw	r22, r24
    78da:	80 e0       	ldi	r24, 0x00	; 0
    78dc:	90 e0       	ldi	r25, 0x00	; 0
    78de:	42 e0       	ldi	r20, 0x02	; 2
    78e0:	50 e0       	ldi	r21, 0x00	; 0
    78e2:	a4 0e       	add	r10, r20
    78e4:	b5 1e       	adc	r11, r21
    78e6:	a1 01       	movw	r20, r2
    78e8:	0e 94 7b 3f 	call	0x7ef6	; 0x7ef6 <__ultoa_invert>
    78ec:	d8 2e       	mov	r13, r24
    78ee:	d2 18       	sub	r13, r2
    78f0:	8f e7       	ldi	r24, 0x7F	; 127
    78f2:	f8 2e       	mov	r15, r24
    78f4:	f1 22       	and	r15, r17
    78f6:	f6 fe       	sbrs	r15, 6
    78f8:	0b c0       	rjmp	.+22     	; 0x7910 <vfprintf+0x2cc>
    78fa:	5e ef       	ldi	r21, 0xFE	; 254
    78fc:	f5 22       	and	r15, r21
    78fe:	d9 14       	cp	r13, r9
    7900:	38 f4       	brcc	.+14     	; 0x7910 <vfprintf+0x2cc>
    7902:	f4 fe       	sbrs	r15, 4
    7904:	07 c0       	rjmp	.+14     	; 0x7914 <vfprintf+0x2d0>
    7906:	f2 fc       	sbrc	r15, 2
    7908:	05 c0       	rjmp	.+10     	; 0x7914 <vfprintf+0x2d0>
    790a:	8f ee       	ldi	r24, 0xEF	; 239
    790c:	f8 22       	and	r15, r24
    790e:	02 c0       	rjmp	.+4      	; 0x7914 <vfprintf+0x2d0>
    7910:	1d 2d       	mov	r17, r13
    7912:	01 c0       	rjmp	.+2      	; 0x7916 <vfprintf+0x2d2>
    7914:	19 2d       	mov	r17, r9
    7916:	f4 fe       	sbrs	r15, 4
    7918:	0d c0       	rjmp	.+26     	; 0x7934 <vfprintf+0x2f0>
    791a:	fe 01       	movw	r30, r28
    791c:	ed 0d       	add	r30, r13
    791e:	f1 1d       	adc	r31, r1
    7920:	80 81       	ld	r24, Z
    7922:	80 33       	cpi	r24, 0x30	; 48
    7924:	19 f4       	brne	.+6      	; 0x792c <vfprintf+0x2e8>
    7926:	99 ee       	ldi	r25, 0xE9	; 233
    7928:	f9 22       	and	r15, r25
    792a:	08 c0       	rjmp	.+16     	; 0x793c <vfprintf+0x2f8>
    792c:	1f 5f       	subi	r17, 0xFF	; 255
    792e:	f2 fe       	sbrs	r15, 2
    7930:	05 c0       	rjmp	.+10     	; 0x793c <vfprintf+0x2f8>
    7932:	03 c0       	rjmp	.+6      	; 0x793a <vfprintf+0x2f6>
    7934:	8f 2d       	mov	r24, r15
    7936:	86 78       	andi	r24, 0x86	; 134
    7938:	09 f0       	breq	.+2      	; 0x793c <vfprintf+0x2f8>
    793a:	1f 5f       	subi	r17, 0xFF	; 255
    793c:	0f 2d       	mov	r16, r15
    793e:	f3 fc       	sbrc	r15, 3
    7940:	14 c0       	rjmp	.+40     	; 0x796a <vfprintf+0x326>
    7942:	f0 fe       	sbrs	r15, 0
    7944:	0f c0       	rjmp	.+30     	; 0x7964 <vfprintf+0x320>
    7946:	1e 15       	cp	r17, r14
    7948:	10 f0       	brcs	.+4      	; 0x794e <vfprintf+0x30a>
    794a:	9d 2c       	mov	r9, r13
    794c:	0b c0       	rjmp	.+22     	; 0x7964 <vfprintf+0x320>
    794e:	9d 2c       	mov	r9, r13
    7950:	9e 0c       	add	r9, r14
    7952:	91 1a       	sub	r9, r17
    7954:	1e 2d       	mov	r17, r14
    7956:	06 c0       	rjmp	.+12     	; 0x7964 <vfprintf+0x320>
    7958:	80 e2       	ldi	r24, 0x20	; 32
    795a:	90 e0       	ldi	r25, 0x00	; 0
    795c:	b3 01       	movw	r22, r6
    795e:	0e 94 4f 3f 	call	0x7e9e	; 0x7e9e <fputc>
    7962:	1f 5f       	subi	r17, 0xFF	; 255
    7964:	1e 15       	cp	r17, r14
    7966:	c0 f3       	brcs	.-16     	; 0x7958 <vfprintf+0x314>
    7968:	04 c0       	rjmp	.+8      	; 0x7972 <vfprintf+0x32e>
    796a:	1e 15       	cp	r17, r14
    796c:	10 f4       	brcc	.+4      	; 0x7972 <vfprintf+0x32e>
    796e:	e1 1a       	sub	r14, r17
    7970:	01 c0       	rjmp	.+2      	; 0x7974 <vfprintf+0x330>
    7972:	ee 24       	eor	r14, r14
    7974:	04 ff       	sbrs	r16, 4
    7976:	0f c0       	rjmp	.+30     	; 0x7996 <vfprintf+0x352>
    7978:	80 e3       	ldi	r24, 0x30	; 48
    797a:	90 e0       	ldi	r25, 0x00	; 0
    797c:	b3 01       	movw	r22, r6
    797e:	0e 94 4f 3f 	call	0x7e9e	; 0x7e9e <fputc>
    7982:	02 ff       	sbrs	r16, 2
    7984:	1d c0       	rjmp	.+58     	; 0x79c0 <vfprintf+0x37c>
    7986:	01 fd       	sbrc	r16, 1
    7988:	03 c0       	rjmp	.+6      	; 0x7990 <vfprintf+0x34c>
    798a:	88 e7       	ldi	r24, 0x78	; 120
    798c:	90 e0       	ldi	r25, 0x00	; 0
    798e:	0e c0       	rjmp	.+28     	; 0x79ac <vfprintf+0x368>
    7990:	88 e5       	ldi	r24, 0x58	; 88
    7992:	90 e0       	ldi	r25, 0x00	; 0
    7994:	0b c0       	rjmp	.+22     	; 0x79ac <vfprintf+0x368>
    7996:	80 2f       	mov	r24, r16
    7998:	86 78       	andi	r24, 0x86	; 134
    799a:	91 f0       	breq	.+36     	; 0x79c0 <vfprintf+0x37c>
    799c:	01 ff       	sbrs	r16, 1
    799e:	02 c0       	rjmp	.+4      	; 0x79a4 <vfprintf+0x360>
    79a0:	8b e2       	ldi	r24, 0x2B	; 43
    79a2:	01 c0       	rjmp	.+2      	; 0x79a6 <vfprintf+0x362>
    79a4:	80 e2       	ldi	r24, 0x20	; 32
    79a6:	f7 fc       	sbrc	r15, 7
    79a8:	8d e2       	ldi	r24, 0x2D	; 45
    79aa:	90 e0       	ldi	r25, 0x00	; 0
    79ac:	b3 01       	movw	r22, r6
    79ae:	0e 94 4f 3f 	call	0x7e9e	; 0x7e9e <fputc>
    79b2:	06 c0       	rjmp	.+12     	; 0x79c0 <vfprintf+0x37c>
    79b4:	80 e3       	ldi	r24, 0x30	; 48
    79b6:	90 e0       	ldi	r25, 0x00	; 0
    79b8:	b3 01       	movw	r22, r6
    79ba:	0e 94 4f 3f 	call	0x7e9e	; 0x7e9e <fputc>
    79be:	9a 94       	dec	r9
    79c0:	d9 14       	cp	r13, r9
    79c2:	c0 f3       	brcs	.-16     	; 0x79b4 <vfprintf+0x370>
    79c4:	da 94       	dec	r13
    79c6:	f1 01       	movw	r30, r2
    79c8:	ed 0d       	add	r30, r13
    79ca:	f1 1d       	adc	r31, r1
    79cc:	80 81       	ld	r24, Z
    79ce:	90 e0       	ldi	r25, 0x00	; 0
    79d0:	b3 01       	movw	r22, r6
    79d2:	0e 94 4f 3f 	call	0x7e9e	; 0x7e9e <fputc>
    79d6:	dd 20       	and	r13, r13
    79d8:	a9 f7       	brne	.-22     	; 0x79c4 <vfprintf+0x380>
    79da:	06 c0       	rjmp	.+12     	; 0x79e8 <vfprintf+0x3a4>
    79dc:	80 e2       	ldi	r24, 0x20	; 32
    79de:	90 e0       	ldi	r25, 0x00	; 0
    79e0:	b3 01       	movw	r22, r6
    79e2:	0e 94 4f 3f 	call	0x7e9e	; 0x7e9e <fputc>
    79e6:	ea 94       	dec	r14
    79e8:	ee 20       	and	r14, r14
    79ea:	c1 f7       	brne	.-16     	; 0x79dc <vfprintf+0x398>
    79ec:	43 ce       	rjmp	.-890    	; 0x7674 <vfprintf+0x30>
    79ee:	f3 01       	movw	r30, r6
    79f0:	66 81       	ldd	r22, Z+6	; 0x06
    79f2:	77 81       	ldd	r23, Z+7	; 0x07
    79f4:	cb 01       	movw	r24, r22
    79f6:	2b 96       	adiw	r28, 0x0b	; 11
    79f8:	e2 e1       	ldi	r30, 0x12	; 18
    79fa:	0c 94 fe 39 	jmp	0x73fc	; 0x73fc <__epilogue_restores__>

000079fe <dtoa_prf>:
    79fe:	a9 e0       	ldi	r26, 0x09	; 9
    7a00:	b0 e0       	ldi	r27, 0x00	; 0
    7a02:	e5 e0       	ldi	r30, 0x05	; 5
    7a04:	fd e3       	ldi	r31, 0x3D	; 61
    7a06:	0c 94 e6 39 	jmp	0x73cc	; 0x73cc <__prologue_saves__+0x8>
    7a0a:	6a 01       	movw	r12, r20
    7a0c:	12 2f       	mov	r17, r18
    7a0e:	a0 2e       	mov	r10, r16
    7a10:	be 2c       	mov	r11, r14
    7a12:	2b e3       	ldi	r18, 0x3B	; 59
    7a14:	20 17       	cp	r18, r16
    7a16:	18 f4       	brcc	.+6      	; 0x7a1e <dtoa_prf+0x20>
    7a18:	2c e3       	ldi	r18, 0x3C	; 60
    7a1a:	92 2e       	mov	r9, r18
    7a1c:	02 c0       	rjmp	.+4      	; 0x7a22 <dtoa_prf+0x24>
    7a1e:	90 2e       	mov	r9, r16
    7a20:	93 94       	inc	r9
    7a22:	ae 01       	movw	r20, r28
    7a24:	4f 5f       	subi	r20, 0xFF	; 255
    7a26:	5f 4f       	sbci	r21, 0xFF	; 255
    7a28:	27 e0       	ldi	r18, 0x07	; 7
    7a2a:	09 2d       	mov	r16, r9
    7a2c:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <__ftoa_engine>
    7a30:	bc 01       	movw	r22, r24
    7a32:	89 81       	ldd	r24, Y+1	; 0x01
    7a34:	e8 2e       	mov	r14, r24
    7a36:	ff 24       	eor	r15, r15
    7a38:	c7 01       	movw	r24, r14
    7a3a:	89 70       	andi	r24, 0x09	; 9
    7a3c:	90 70       	andi	r25, 0x00	; 0
    7a3e:	01 97       	sbiw	r24, 0x01	; 1
    7a40:	11 f4       	brne	.+4      	; 0x7a46 <dtoa_prf+0x48>
    7a42:	ad e2       	ldi	r26, 0x2D	; 45
    7a44:	09 c0       	rjmp	.+18     	; 0x7a58 <dtoa_prf+0x5a>
    7a46:	b1 fe       	sbrs	r11, 1
    7a48:	02 c0       	rjmp	.+4      	; 0x7a4e <dtoa_prf+0x50>
    7a4a:	ab e2       	ldi	r26, 0x2B	; 43
    7a4c:	05 c0       	rjmp	.+10     	; 0x7a58 <dtoa_prf+0x5a>
    7a4e:	b0 fc       	sbrc	r11, 0
    7a50:	02 c0       	rjmp	.+4      	; 0x7a56 <dtoa_prf+0x58>
    7a52:	a0 e0       	ldi	r26, 0x00	; 0
    7a54:	01 c0       	rjmp	.+2      	; 0x7a58 <dtoa_prf+0x5a>
    7a56:	a0 e2       	ldi	r26, 0x20	; 32
    7a58:	e3 fe       	sbrs	r14, 3
    7a5a:	3b c0       	rjmp	.+118    	; 0x7ad2 <dtoa_prf+0xd4>
    7a5c:	aa 23       	and	r26, r26
    7a5e:	11 f4       	brne	.+4      	; 0x7a64 <dtoa_prf+0x66>
    7a60:	23 e0       	ldi	r18, 0x03	; 3
    7a62:	01 c0       	rjmp	.+2      	; 0x7a66 <dtoa_prf+0x68>
    7a64:	24 e0       	ldi	r18, 0x04	; 4
    7a66:	21 17       	cp	r18, r17
    7a68:	10 f0       	brcs	.+4      	; 0x7a6e <dtoa_prf+0x70>
    7a6a:	20 e0       	ldi	r18, 0x00	; 0
    7a6c:	02 c0       	rjmp	.+4      	; 0x7a72 <dtoa_prf+0x74>
    7a6e:	12 1b       	sub	r17, r18
    7a70:	21 2f       	mov	r18, r17
    7a72:	eb 2c       	mov	r14, r11
    7a74:	b4 fe       	sbrs	r11, 4
    7a76:	02 c0       	rjmp	.+4      	; 0x7a7c <dtoa_prf+0x7e>
    7a78:	32 2f       	mov	r19, r18
    7a7a:	0a c0       	rjmp	.+20     	; 0x7a90 <dtoa_prf+0x92>
    7a7c:	f6 01       	movw	r30, r12
    7a7e:	32 2f       	mov	r19, r18
    7a80:	80 e2       	ldi	r24, 0x20	; 32
    7a82:	02 c0       	rjmp	.+4      	; 0x7a88 <dtoa_prf+0x8a>
    7a84:	81 93       	st	Z+, r24
    7a86:	31 50       	subi	r19, 0x01	; 1
    7a88:	33 23       	and	r19, r19
    7a8a:	e1 f7       	brne	.-8      	; 0x7a84 <dtoa_prf+0x86>
    7a8c:	c2 0e       	add	r12, r18
    7a8e:	d1 1c       	adc	r13, r1
    7a90:	aa 23       	and	r26, r26
    7a92:	19 f0       	breq	.+6      	; 0x7a9a <dtoa_prf+0x9c>
    7a94:	f6 01       	movw	r30, r12
    7a96:	a1 93       	st	Z+, r26
    7a98:	6f 01       	movw	r12, r30
    7a9a:	f6 01       	movw	r30, r12
    7a9c:	31 96       	adiw	r30, 0x01	; 1
    7a9e:	e2 fe       	sbrs	r14, 2
    7aa0:	05 c0       	rjmp	.+10     	; 0x7aac <dtoa_prf+0xae>
    7aa2:	9e e4       	ldi	r25, 0x4E	; 78
    7aa4:	d6 01       	movw	r26, r12
    7aa6:	9c 93       	st	X, r25
    7aa8:	81 e4       	ldi	r24, 0x41	; 65
    7aaa:	04 c0       	rjmp	.+8      	; 0x7ab4 <dtoa_prf+0xb6>
    7aac:	9e e6       	ldi	r25, 0x6E	; 110
    7aae:	d6 01       	movw	r26, r12
    7ab0:	9c 93       	st	X, r25
    7ab2:	81 e6       	ldi	r24, 0x61	; 97
    7ab4:	11 96       	adiw	r26, 0x01	; 1
    7ab6:	8c 93       	st	X, r24
    7ab8:	91 83       	std	Z+1, r25	; 0x01
    7aba:	32 96       	adiw	r30, 0x02	; 2
    7abc:	df 01       	movw	r26, r30
    7abe:	83 2f       	mov	r24, r19
    7ac0:	90 e2       	ldi	r25, 0x20	; 32
    7ac2:	02 c0       	rjmp	.+4      	; 0x7ac8 <dtoa_prf+0xca>
    7ac4:	9d 93       	st	X+, r25
    7ac6:	81 50       	subi	r24, 0x01	; 1
    7ac8:	88 23       	and	r24, r24
    7aca:	e1 f7       	brne	.-8      	; 0x7ac4 <dtoa_prf+0xc6>
    7acc:	e3 0f       	add	r30, r19
    7ace:	f1 1d       	adc	r31, r1
    7ad0:	40 c0       	rjmp	.+128    	; 0x7b52 <dtoa_prf+0x154>
    7ad2:	e2 fe       	sbrs	r14, 2
    7ad4:	42 c0       	rjmp	.+132    	; 0x7b5a <dtoa_prf+0x15c>
    7ad6:	aa 23       	and	r26, r26
    7ad8:	11 f4       	brne	.+4      	; 0x7ade <dtoa_prf+0xe0>
    7ada:	23 e0       	ldi	r18, 0x03	; 3
    7adc:	01 c0       	rjmp	.+2      	; 0x7ae0 <dtoa_prf+0xe2>
    7ade:	24 e0       	ldi	r18, 0x04	; 4
    7ae0:	21 17       	cp	r18, r17
    7ae2:	10 f0       	brcs	.+4      	; 0x7ae8 <dtoa_prf+0xea>
    7ae4:	20 e0       	ldi	r18, 0x00	; 0
    7ae6:	02 c0       	rjmp	.+4      	; 0x7aec <dtoa_prf+0xee>
    7ae8:	12 1b       	sub	r17, r18
    7aea:	21 2f       	mov	r18, r17
    7aec:	eb 2c       	mov	r14, r11
    7aee:	b4 fe       	sbrs	r11, 4
    7af0:	02 c0       	rjmp	.+4      	; 0x7af6 <dtoa_prf+0xf8>
    7af2:	92 2f       	mov	r25, r18
    7af4:	0a c0       	rjmp	.+20     	; 0x7b0a <dtoa_prf+0x10c>
    7af6:	f6 01       	movw	r30, r12
    7af8:	92 2f       	mov	r25, r18
    7afa:	80 e2       	ldi	r24, 0x20	; 32
    7afc:	02 c0       	rjmp	.+4      	; 0x7b02 <dtoa_prf+0x104>
    7afe:	81 93       	st	Z+, r24
    7b00:	91 50       	subi	r25, 0x01	; 1
    7b02:	99 23       	and	r25, r25
    7b04:	e1 f7       	brne	.-8      	; 0x7afe <dtoa_prf+0x100>
    7b06:	c2 0e       	add	r12, r18
    7b08:	d1 1c       	adc	r13, r1
    7b0a:	aa 23       	and	r26, r26
    7b0c:	19 f0       	breq	.+6      	; 0x7b14 <dtoa_prf+0x116>
    7b0e:	f6 01       	movw	r30, r12
    7b10:	a1 93       	st	Z+, r26
    7b12:	6f 01       	movw	r12, r30
    7b14:	f6 01       	movw	r30, r12
    7b16:	31 96       	adiw	r30, 0x01	; 1
    7b18:	e2 fe       	sbrs	r14, 2
    7b1a:	08 c0       	rjmp	.+16     	; 0x7b2c <dtoa_prf+0x12e>
    7b1c:	89 e4       	ldi	r24, 0x49	; 73
    7b1e:	d6 01       	movw	r26, r12
    7b20:	8c 93       	st	X, r24
    7b22:	8e e4       	ldi	r24, 0x4E	; 78
    7b24:	11 96       	adiw	r26, 0x01	; 1
    7b26:	8c 93       	st	X, r24
    7b28:	86 e4       	ldi	r24, 0x46	; 70
    7b2a:	07 c0       	rjmp	.+14     	; 0x7b3a <dtoa_prf+0x13c>
    7b2c:	89 e6       	ldi	r24, 0x69	; 105
    7b2e:	d6 01       	movw	r26, r12
    7b30:	8c 93       	st	X, r24
    7b32:	8e e6       	ldi	r24, 0x6E	; 110
    7b34:	11 96       	adiw	r26, 0x01	; 1
    7b36:	8c 93       	st	X, r24
    7b38:	86 e6       	ldi	r24, 0x66	; 102
    7b3a:	81 83       	std	Z+1, r24	; 0x01
    7b3c:	32 96       	adiw	r30, 0x02	; 2
    7b3e:	df 01       	movw	r26, r30
    7b40:	89 2f       	mov	r24, r25
    7b42:	20 e2       	ldi	r18, 0x20	; 32
    7b44:	02 c0       	rjmp	.+4      	; 0x7b4a <dtoa_prf+0x14c>
    7b46:	2d 93       	st	X+, r18
    7b48:	81 50       	subi	r24, 0x01	; 1
    7b4a:	88 23       	and	r24, r24
    7b4c:	e1 f7       	brne	.-8      	; 0x7b46 <dtoa_prf+0x148>
    7b4e:	e9 0f       	add	r30, r25
    7b50:	f1 1d       	adc	r31, r1
    7b52:	10 82       	st	Z, r1
    7b54:	2e ef       	ldi	r18, 0xFE	; 254
    7b56:	3f ef       	ldi	r19, 0xFF	; 255
    7b58:	af c0       	rjmp	.+350    	; 0x7cb8 <dtoa_prf+0x2ba>
    7b5a:	16 16       	cp	r1, r22
    7b5c:	17 06       	cpc	r1, r23
    7b5e:	1c f0       	brlt	.+6      	; 0x7b66 <dtoa_prf+0x168>
    7b60:	41 e0       	ldi	r20, 0x01	; 1
    7b62:	50 e0       	ldi	r21, 0x00	; 0
    7b64:	03 c0       	rjmp	.+6      	; 0x7b6c <dtoa_prf+0x16e>
    7b66:	ab 01       	movw	r20, r22
    7b68:	4f 5f       	subi	r20, 0xFF	; 255
    7b6a:	5f 4f       	sbci	r21, 0xFF	; 255
    7b6c:	aa 20       	and	r10, r10
    7b6e:	19 f4       	brne	.+6      	; 0x7b76 <dtoa_prf+0x178>
    7b70:	80 e0       	ldi	r24, 0x00	; 0
    7b72:	90 e0       	ldi	r25, 0x00	; 0
    7b74:	03 c0       	rjmp	.+6      	; 0x7b7c <dtoa_prf+0x17e>
    7b76:	8a 2d       	mov	r24, r10
    7b78:	90 e0       	ldi	r25, 0x00	; 0
    7b7a:	01 96       	adiw	r24, 0x01	; 1
    7b7c:	20 e0       	ldi	r18, 0x00	; 0
    7b7e:	30 e0       	ldi	r19, 0x00	; 0
    7b80:	aa 23       	and	r26, r26
    7b82:	11 f0       	breq	.+4      	; 0x7b88 <dtoa_prf+0x18a>
    7b84:	21 e0       	ldi	r18, 0x01	; 1
    7b86:	30 e0       	ldi	r19, 0x00	; 0
    7b88:	24 0f       	add	r18, r20
    7b8a:	35 1f       	adc	r19, r21
    7b8c:	28 0f       	add	r18, r24
    7b8e:	39 1f       	adc	r19, r25
    7b90:	81 2f       	mov	r24, r17
    7b92:	90 e0       	ldi	r25, 0x00	; 0
    7b94:	28 17       	cp	r18, r24
    7b96:	39 07       	cpc	r19, r25
    7b98:	14 f0       	brlt	.+4      	; 0x7b9e <dtoa_prf+0x1a0>
    7b9a:	20 e0       	ldi	r18, 0x00	; 0
    7b9c:	02 c0       	rjmp	.+4      	; 0x7ba2 <dtoa_prf+0x1a4>
    7b9e:	12 1b       	sub	r17, r18
    7ba0:	21 2f       	mov	r18, r17
    7ba2:	4b 2d       	mov	r20, r11
    7ba4:	50 e0       	ldi	r21, 0x00	; 0
    7ba6:	ca 01       	movw	r24, r20
    7ba8:	80 71       	andi	r24, 0x10	; 16
    7baa:	90 70       	andi	r25, 0x00	; 0
    7bac:	b4 fc       	sbrc	r11, 4
    7bae:	0d c0       	rjmp	.+26     	; 0x7bca <dtoa_prf+0x1cc>
    7bb0:	b3 fc       	sbrc	r11, 3
    7bb2:	0b c0       	rjmp	.+22     	; 0x7bca <dtoa_prf+0x1cc>
    7bb4:	f6 01       	movw	r30, r12
    7bb6:	32 2f       	mov	r19, r18
    7bb8:	40 e2       	ldi	r20, 0x20	; 32
    7bba:	02 c0       	rjmp	.+4      	; 0x7bc0 <dtoa_prf+0x1c2>
    7bbc:	41 93       	st	Z+, r20
    7bbe:	31 50       	subi	r19, 0x01	; 1
    7bc0:	33 23       	and	r19, r19
    7bc2:	e1 f7       	brne	.-8      	; 0x7bbc <dtoa_prf+0x1be>
    7bc4:	c2 0e       	add	r12, r18
    7bc6:	d1 1c       	adc	r13, r1
    7bc8:	01 c0       	rjmp	.+2      	; 0x7bcc <dtoa_prf+0x1ce>
    7bca:	32 2f       	mov	r19, r18
    7bcc:	aa 23       	and	r26, r26
    7bce:	19 f0       	breq	.+6      	; 0x7bd6 <dtoa_prf+0x1d8>
    7bd0:	f6 01       	movw	r30, r12
    7bd2:	a1 93       	st	Z+, r26
    7bd4:	6f 01       	movw	r12, r30
    7bd6:	89 2b       	or	r24, r25
    7bd8:	11 f0       	breq	.+4      	; 0x7bde <dtoa_prf+0x1e0>
    7bda:	13 2f       	mov	r17, r19
    7bdc:	0a c0       	rjmp	.+20     	; 0x7bf2 <dtoa_prf+0x1f4>
    7bde:	f6 01       	movw	r30, r12
    7be0:	13 2f       	mov	r17, r19
    7be2:	80 e3       	ldi	r24, 0x30	; 48
    7be4:	02 c0       	rjmp	.+4      	; 0x7bea <dtoa_prf+0x1ec>
    7be6:	81 93       	st	Z+, r24
    7be8:	11 50       	subi	r17, 0x01	; 1
    7bea:	11 23       	and	r17, r17
    7bec:	e1 f7       	brne	.-8      	; 0x7be6 <dtoa_prf+0x1e8>
    7bee:	c3 0e       	add	r12, r19
    7bf0:	d1 1c       	adc	r13, r1
    7bf2:	09 2d       	mov	r16, r9
    7bf4:	06 0f       	add	r16, r22
    7bf6:	ba 80       	ldd	r11, Y+2	; 0x02
    7bf8:	90 e1       	ldi	r25, 0x10	; 16
    7bfa:	89 2e       	mov	r8, r25
    7bfc:	91 2c       	mov	r9, r1
    7bfe:	8e 20       	and	r8, r14
    7c00:	9f 20       	and	r9, r15
    7c02:	e4 fe       	sbrs	r14, 4
    7c04:	04 c0       	rjmp	.+8      	; 0x7c0e <dtoa_prf+0x210>
    7c06:	f1 e3       	ldi	r31, 0x31	; 49
    7c08:	bf 16       	cp	r11, r31
    7c0a:	09 f4       	brne	.+2      	; 0x7c0e <dtoa_prf+0x210>
    7c0c:	01 50       	subi	r16, 0x01	; 1
    7c0e:	10 16       	cp	r1, r16
    7c10:	14 f0       	brlt	.+4      	; 0x7c16 <dtoa_prf+0x218>
    7c12:	01 e0       	ldi	r16, 0x01	; 1
    7c14:	03 c0       	rjmp	.+6      	; 0x7c1c <dtoa_prf+0x21e>
    7c16:	09 30       	cpi	r16, 0x09	; 9
    7c18:	08 f0       	brcs	.+2      	; 0x7c1c <dtoa_prf+0x21e>
    7c1a:	08 e0       	ldi	r16, 0x08	; 8
    7c1c:	9b 01       	movw	r18, r22
    7c1e:	77 ff       	sbrs	r23, 7
    7c20:	02 c0       	rjmp	.+4      	; 0x7c26 <dtoa_prf+0x228>
    7c22:	20 e0       	ldi	r18, 0x00	; 0
    7c24:	30 e0       	ldi	r19, 0x00	; 0
    7c26:	cb 01       	movw	r24, r22
    7c28:	01 96       	adiw	r24, 0x01	; 1
    7c2a:	82 1b       	sub	r24, r18
    7c2c:	93 0b       	sbc	r25, r19
    7c2e:	fe 01       	movw	r30, r28
    7c30:	31 96       	adiw	r30, 0x01	; 1
    7c32:	e8 0f       	add	r30, r24
    7c34:	f9 1f       	adc	r31, r25
    7c36:	8e e2       	ldi	r24, 0x2E	; 46
    7c38:	f8 2e       	mov	r15, r24
    7c3a:	3b 01       	movw	r6, r22
    7c3c:	60 1a       	sub	r6, r16
    7c3e:	71 08       	sbc	r7, r1
    7c40:	8a 2d       	mov	r24, r10
    7c42:	90 e0       	ldi	r25, 0x00	; 0
    7c44:	44 27       	eor	r20, r20
    7c46:	55 27       	eor	r21, r21
    7c48:	48 1b       	sub	r20, r24
    7c4a:	59 0b       	sbc	r21, r25
    7c4c:	8f ef       	ldi	r24, 0xFF	; 255
    7c4e:	2f 3f       	cpi	r18, 0xFF	; 255
    7c50:	38 07       	cpc	r19, r24
    7c52:	19 f4       	brne	.+6      	; 0x7c5a <dtoa_prf+0x25c>
    7c54:	d6 01       	movw	r26, r12
    7c56:	fd 92       	st	X+, r15
    7c58:	6d 01       	movw	r12, r26
    7c5a:	62 17       	cp	r22, r18
    7c5c:	73 07       	cpc	r23, r19
    7c5e:	2c f0       	brlt	.+10     	; 0x7c6a <dtoa_prf+0x26c>
    7c60:	62 16       	cp	r6, r18
    7c62:	73 06       	cpc	r7, r19
    7c64:	14 f4       	brge	.+4      	; 0x7c6a <dtoa_prf+0x26c>
    7c66:	80 81       	ld	r24, Z
    7c68:	01 c0       	rjmp	.+2      	; 0x7c6c <dtoa_prf+0x26e>
    7c6a:	80 e3       	ldi	r24, 0x30	; 48
    7c6c:	21 50       	subi	r18, 0x01	; 1
    7c6e:	30 40       	sbci	r19, 0x00	; 0
    7c70:	31 96       	adiw	r30, 0x01	; 1
    7c72:	24 17       	cp	r18, r20
    7c74:	35 07       	cpc	r19, r21
    7c76:	24 f0       	brlt	.+8      	; 0x7c80 <dtoa_prf+0x282>
    7c78:	d6 01       	movw	r26, r12
    7c7a:	8d 93       	st	X+, r24
    7c7c:	6d 01       	movw	r12, r26
    7c7e:	e6 cf       	rjmp	.-52     	; 0x7c4c <dtoa_prf+0x24e>
    7c80:	26 17       	cp	r18, r22
    7c82:	37 07       	cpc	r19, r23
    7c84:	49 f4       	brne	.+18     	; 0x7c98 <dtoa_prf+0x29a>
    7c86:	b5 e3       	ldi	r27, 0x35	; 53
    7c88:	bb 15       	cp	r27, r11
    7c8a:	28 f0       	brcs	.+10     	; 0x7c96 <dtoa_prf+0x298>
    7c8c:	bb 16       	cp	r11, r27
    7c8e:	21 f4       	brne	.+8      	; 0x7c98 <dtoa_prf+0x29a>
    7c90:	81 14       	cp	r8, r1
    7c92:	91 04       	cpc	r9, r1
    7c94:	09 f4       	brne	.+2      	; 0x7c98 <dtoa_prf+0x29a>
    7c96:	81 e3       	ldi	r24, 0x31	; 49
    7c98:	f6 01       	movw	r30, r12
    7c9a:	81 93       	st	Z+, r24
    7c9c:	d6 01       	movw	r26, r12
    7c9e:	81 2f       	mov	r24, r17
    7ca0:	90 e2       	ldi	r25, 0x20	; 32
    7ca2:	02 c0       	rjmp	.+4      	; 0x7ca8 <dtoa_prf+0x2aa>
    7ca4:	9c 93       	st	X, r25
    7ca6:	81 50       	subi	r24, 0x01	; 1
    7ca8:	11 96       	adiw	r26, 0x01	; 1
    7caa:	88 23       	and	r24, r24
    7cac:	d9 f7       	brne	.-10     	; 0x7ca4 <dtoa_prf+0x2a6>
    7cae:	e1 0f       	add	r30, r17
    7cb0:	f1 1d       	adc	r31, r1
    7cb2:	10 82       	st	Z, r1
    7cb4:	20 e0       	ldi	r18, 0x00	; 0
    7cb6:	30 e0       	ldi	r19, 0x00	; 0
    7cb8:	c9 01       	movw	r24, r18
    7cba:	29 96       	adiw	r28, 0x09	; 9
    7cbc:	ee e0       	ldi	r30, 0x0E	; 14
    7cbe:	0c 94 02 3a 	jmp	0x7404	; 0x7404 <__epilogue_restores__+0x8>

00007cc2 <__ftoa_engine>:
    7cc2:	28 30       	cpi	r18, 0x08	; 8
    7cc4:	08 f0       	brcs	.+2      	; 0x7cc8 <__ftoa_engine+0x6>
    7cc6:	27 e0       	ldi	r18, 0x07	; 7
    7cc8:	33 27       	eor	r19, r19
    7cca:	da 01       	movw	r26, r20
    7ccc:	99 0f       	add	r25, r25
    7cce:	31 1d       	adc	r19, r1
    7cd0:	87 fd       	sbrc	r24, 7
    7cd2:	91 60       	ori	r25, 0x01	; 1
    7cd4:	00 96       	adiw	r24, 0x00	; 0
    7cd6:	61 05       	cpc	r22, r1
    7cd8:	71 05       	cpc	r23, r1
    7cda:	39 f4       	brne	.+14     	; 0x7cea <__ftoa_engine+0x28>
    7cdc:	32 60       	ori	r19, 0x02	; 2
    7cde:	2e 5f       	subi	r18, 0xFE	; 254
    7ce0:	3d 93       	st	X+, r19
    7ce2:	30 e3       	ldi	r19, 0x30	; 48
    7ce4:	2a 95       	dec	r18
    7ce6:	e1 f7       	brne	.-8      	; 0x7ce0 <__ftoa_engine+0x1e>
    7ce8:	08 95       	ret
    7cea:	9f 3f       	cpi	r25, 0xFF	; 255
    7cec:	30 f0       	brcs	.+12     	; 0x7cfa <__ftoa_engine+0x38>
    7cee:	80 38       	cpi	r24, 0x80	; 128
    7cf0:	71 05       	cpc	r23, r1
    7cf2:	61 05       	cpc	r22, r1
    7cf4:	09 f0       	breq	.+2      	; 0x7cf8 <__ftoa_engine+0x36>
    7cf6:	3c 5f       	subi	r19, 0xFC	; 252
    7cf8:	3c 5f       	subi	r19, 0xFC	; 252
    7cfa:	3d 93       	st	X+, r19
    7cfc:	91 30       	cpi	r25, 0x01	; 1
    7cfe:	08 f0       	brcs	.+2      	; 0x7d02 <__ftoa_engine+0x40>
    7d00:	80 68       	ori	r24, 0x80	; 128
    7d02:	91 1d       	adc	r25, r1
    7d04:	df 93       	push	r29
    7d06:	cf 93       	push	r28
    7d08:	1f 93       	push	r17
    7d0a:	0f 93       	push	r16
    7d0c:	ff 92       	push	r15
    7d0e:	ef 92       	push	r14
    7d10:	19 2f       	mov	r17, r25
    7d12:	98 7f       	andi	r25, 0xF8	; 248
    7d14:	96 95       	lsr	r25
    7d16:	e9 2f       	mov	r30, r25
    7d18:	96 95       	lsr	r25
    7d1a:	96 95       	lsr	r25
    7d1c:	e9 0f       	add	r30, r25
    7d1e:	ff 27       	eor	r31, r31
    7d20:	e2 55       	subi	r30, 0x52	; 82
    7d22:	ff 4f       	sbci	r31, 0xFF	; 255
    7d24:	99 27       	eor	r25, r25
    7d26:	33 27       	eor	r19, r19
    7d28:	ee 24       	eor	r14, r14
    7d2a:	ff 24       	eor	r15, r15
    7d2c:	a7 01       	movw	r20, r14
    7d2e:	e7 01       	movw	r28, r14
    7d30:	05 90       	lpm	r0, Z+
    7d32:	08 94       	sec
    7d34:	07 94       	ror	r0
    7d36:	28 f4       	brcc	.+10     	; 0x7d42 <__ftoa_engine+0x80>
    7d38:	36 0f       	add	r19, r22
    7d3a:	e7 1e       	adc	r14, r23
    7d3c:	f8 1e       	adc	r15, r24
    7d3e:	49 1f       	adc	r20, r25
    7d40:	51 1d       	adc	r21, r1
    7d42:	66 0f       	add	r22, r22
    7d44:	77 1f       	adc	r23, r23
    7d46:	88 1f       	adc	r24, r24
    7d48:	99 1f       	adc	r25, r25
    7d4a:	06 94       	lsr	r0
    7d4c:	a1 f7       	brne	.-24     	; 0x7d36 <__ftoa_engine+0x74>
    7d4e:	05 90       	lpm	r0, Z+
    7d50:	07 94       	ror	r0
    7d52:	28 f4       	brcc	.+10     	; 0x7d5e <__ftoa_engine+0x9c>
    7d54:	e7 0e       	add	r14, r23
    7d56:	f8 1e       	adc	r15, r24
    7d58:	49 1f       	adc	r20, r25
    7d5a:	56 1f       	adc	r21, r22
    7d5c:	c1 1d       	adc	r28, r1
    7d5e:	77 0f       	add	r23, r23
    7d60:	88 1f       	adc	r24, r24
    7d62:	99 1f       	adc	r25, r25
    7d64:	66 1f       	adc	r22, r22
    7d66:	06 94       	lsr	r0
    7d68:	a1 f7       	brne	.-24     	; 0x7d52 <__ftoa_engine+0x90>
    7d6a:	05 90       	lpm	r0, Z+
    7d6c:	07 94       	ror	r0
    7d6e:	28 f4       	brcc	.+10     	; 0x7d7a <__ftoa_engine+0xb8>
    7d70:	f8 0e       	add	r15, r24
    7d72:	49 1f       	adc	r20, r25
    7d74:	56 1f       	adc	r21, r22
    7d76:	c7 1f       	adc	r28, r23
    7d78:	d1 1d       	adc	r29, r1
    7d7a:	88 0f       	add	r24, r24
    7d7c:	99 1f       	adc	r25, r25
    7d7e:	66 1f       	adc	r22, r22
    7d80:	77 1f       	adc	r23, r23
    7d82:	06 94       	lsr	r0
    7d84:	a1 f7       	brne	.-24     	; 0x7d6e <__ftoa_engine+0xac>
    7d86:	05 90       	lpm	r0, Z+
    7d88:	07 94       	ror	r0
    7d8a:	20 f4       	brcc	.+8      	; 0x7d94 <__ftoa_engine+0xd2>
    7d8c:	49 0f       	add	r20, r25
    7d8e:	56 1f       	adc	r21, r22
    7d90:	c7 1f       	adc	r28, r23
    7d92:	d8 1f       	adc	r29, r24
    7d94:	99 0f       	add	r25, r25
    7d96:	66 1f       	adc	r22, r22
    7d98:	77 1f       	adc	r23, r23
    7d9a:	88 1f       	adc	r24, r24
    7d9c:	06 94       	lsr	r0
    7d9e:	a9 f7       	brne	.-22     	; 0x7d8a <__ftoa_engine+0xc8>
    7da0:	84 91       	lpm	r24, Z+
    7da2:	10 95       	com	r17
    7da4:	17 70       	andi	r17, 0x07	; 7
    7da6:	41 f0       	breq	.+16     	; 0x7db8 <__ftoa_engine+0xf6>
    7da8:	d6 95       	lsr	r29
    7daa:	c7 95       	ror	r28
    7dac:	57 95       	ror	r21
    7dae:	47 95       	ror	r20
    7db0:	f7 94       	ror	r15
    7db2:	e7 94       	ror	r14
    7db4:	1a 95       	dec	r17
    7db6:	c1 f7       	brne	.-16     	; 0x7da8 <__ftoa_engine+0xe6>
    7db8:	e4 e5       	ldi	r30, 0x54	; 84
    7dba:	f0 e0       	ldi	r31, 0x00	; 0
    7dbc:	68 94       	set
    7dbe:	15 90       	lpm	r1, Z+
    7dc0:	15 91       	lpm	r17, Z+
    7dc2:	35 91       	lpm	r19, Z+
    7dc4:	65 91       	lpm	r22, Z+
    7dc6:	95 91       	lpm	r25, Z+
    7dc8:	05 90       	lpm	r0, Z+
    7dca:	7f e2       	ldi	r23, 0x2F	; 47
    7dcc:	73 95       	inc	r23
    7dce:	e1 18       	sub	r14, r1
    7dd0:	f1 0a       	sbc	r15, r17
    7dd2:	43 0b       	sbc	r20, r19
    7dd4:	56 0b       	sbc	r21, r22
    7dd6:	c9 0b       	sbc	r28, r25
    7dd8:	d0 09       	sbc	r29, r0
    7dda:	c0 f7       	brcc	.-16     	; 0x7dcc <__ftoa_engine+0x10a>
    7ddc:	e1 0c       	add	r14, r1
    7dde:	f1 1e       	adc	r15, r17
    7de0:	43 1f       	adc	r20, r19
    7de2:	56 1f       	adc	r21, r22
    7de4:	c9 1f       	adc	r28, r25
    7de6:	d0 1d       	adc	r29, r0
    7de8:	7e f4       	brtc	.+30     	; 0x7e08 <__ftoa_engine+0x146>
    7dea:	70 33       	cpi	r23, 0x30	; 48
    7dec:	11 f4       	brne	.+4      	; 0x7df2 <__ftoa_engine+0x130>
    7dee:	8a 95       	dec	r24
    7df0:	e6 cf       	rjmp	.-52     	; 0x7dbe <__ftoa_engine+0xfc>
    7df2:	e8 94       	clt
    7df4:	01 50       	subi	r16, 0x01	; 1
    7df6:	30 f0       	brcs	.+12     	; 0x7e04 <__ftoa_engine+0x142>
    7df8:	08 0f       	add	r16, r24
    7dfa:	0a f4       	brpl	.+2      	; 0x7dfe <__ftoa_engine+0x13c>
    7dfc:	00 27       	eor	r16, r16
    7dfe:	02 17       	cp	r16, r18
    7e00:	08 f4       	brcc	.+2      	; 0x7e04 <__ftoa_engine+0x142>
    7e02:	20 2f       	mov	r18, r16
    7e04:	23 95       	inc	r18
    7e06:	02 2f       	mov	r16, r18
    7e08:	7a 33       	cpi	r23, 0x3A	; 58
    7e0a:	28 f0       	brcs	.+10     	; 0x7e16 <__ftoa_engine+0x154>
    7e0c:	79 e3       	ldi	r23, 0x39	; 57
    7e0e:	7d 93       	st	X+, r23
    7e10:	2a 95       	dec	r18
    7e12:	e9 f7       	brne	.-6      	; 0x7e0e <__ftoa_engine+0x14c>
    7e14:	10 c0       	rjmp	.+32     	; 0x7e36 <__ftoa_engine+0x174>
    7e16:	7d 93       	st	X+, r23
    7e18:	2a 95       	dec	r18
    7e1a:	89 f6       	brne	.-94     	; 0x7dbe <__ftoa_engine+0xfc>
    7e1c:	06 94       	lsr	r0
    7e1e:	97 95       	ror	r25
    7e20:	67 95       	ror	r22
    7e22:	37 95       	ror	r19
    7e24:	17 95       	ror	r17
    7e26:	17 94       	ror	r1
    7e28:	e1 18       	sub	r14, r1
    7e2a:	f1 0a       	sbc	r15, r17
    7e2c:	43 0b       	sbc	r20, r19
    7e2e:	56 0b       	sbc	r21, r22
    7e30:	c9 0b       	sbc	r28, r25
    7e32:	d0 09       	sbc	r29, r0
    7e34:	98 f0       	brcs	.+38     	; 0x7e5c <__ftoa_engine+0x19a>
    7e36:	23 95       	inc	r18
    7e38:	7e 91       	ld	r23, -X
    7e3a:	73 95       	inc	r23
    7e3c:	7a 33       	cpi	r23, 0x3A	; 58
    7e3e:	08 f0       	brcs	.+2      	; 0x7e42 <__ftoa_engine+0x180>
    7e40:	70 e3       	ldi	r23, 0x30	; 48
    7e42:	7c 93       	st	X, r23
    7e44:	20 13       	cpse	r18, r16
    7e46:	b8 f7       	brcc	.-18     	; 0x7e36 <__ftoa_engine+0x174>
    7e48:	7e 91       	ld	r23, -X
    7e4a:	70 61       	ori	r23, 0x10	; 16
    7e4c:	7d 93       	st	X+, r23
    7e4e:	30 f0       	brcs	.+12     	; 0x7e5c <__ftoa_engine+0x19a>
    7e50:	83 95       	inc	r24
    7e52:	71 e3       	ldi	r23, 0x31	; 49
    7e54:	7d 93       	st	X+, r23
    7e56:	70 e3       	ldi	r23, 0x30	; 48
    7e58:	2a 95       	dec	r18
    7e5a:	e1 f7       	brne	.-8      	; 0x7e54 <__ftoa_engine+0x192>
    7e5c:	11 24       	eor	r1, r1
    7e5e:	ef 90       	pop	r14
    7e60:	ff 90       	pop	r15
    7e62:	0f 91       	pop	r16
    7e64:	1f 91       	pop	r17
    7e66:	cf 91       	pop	r28
    7e68:	df 91       	pop	r29
    7e6a:	99 27       	eor	r25, r25
    7e6c:	87 fd       	sbrc	r24, 7
    7e6e:	90 95       	com	r25
    7e70:	08 95       	ret

00007e72 <strnlen_P>:
    7e72:	fc 01       	movw	r30, r24
    7e74:	05 90       	lpm	r0, Z+
    7e76:	61 50       	subi	r22, 0x01	; 1
    7e78:	70 40       	sbci	r23, 0x00	; 0
    7e7a:	01 10       	cpse	r0, r1
    7e7c:	d8 f7       	brcc	.-10     	; 0x7e74 <strnlen_P+0x2>
    7e7e:	80 95       	com	r24
    7e80:	90 95       	com	r25
    7e82:	8e 0f       	add	r24, r30
    7e84:	9f 1f       	adc	r25, r31
    7e86:	08 95       	ret

00007e88 <strnlen>:
    7e88:	fc 01       	movw	r30, r24
    7e8a:	61 50       	subi	r22, 0x01	; 1
    7e8c:	70 40       	sbci	r23, 0x00	; 0
    7e8e:	01 90       	ld	r0, Z+
    7e90:	01 10       	cpse	r0, r1
    7e92:	d8 f7       	brcc	.-10     	; 0x7e8a <strnlen+0x2>
    7e94:	80 95       	com	r24
    7e96:	90 95       	com	r25
    7e98:	8e 0f       	add	r24, r30
    7e9a:	9f 1f       	adc	r25, r31
    7e9c:	08 95       	ret

00007e9e <fputc>:
    7e9e:	0f 93       	push	r16
    7ea0:	1f 93       	push	r17
    7ea2:	cf 93       	push	r28
    7ea4:	df 93       	push	r29
    7ea6:	8c 01       	movw	r16, r24
    7ea8:	eb 01       	movw	r28, r22
    7eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    7eac:	81 ff       	sbrs	r24, 1
    7eae:	1b c0       	rjmp	.+54     	; 0x7ee6 <fputc+0x48>
    7eb0:	82 ff       	sbrs	r24, 2
    7eb2:	0d c0       	rjmp	.+26     	; 0x7ece <fputc+0x30>
    7eb4:	2e 81       	ldd	r18, Y+6	; 0x06
    7eb6:	3f 81       	ldd	r19, Y+7	; 0x07
    7eb8:	8c 81       	ldd	r24, Y+4	; 0x04
    7eba:	9d 81       	ldd	r25, Y+5	; 0x05
    7ebc:	28 17       	cp	r18, r24
    7ebe:	39 07       	cpc	r19, r25
    7ec0:	64 f4       	brge	.+24     	; 0x7eda <fputc+0x3c>
    7ec2:	e8 81       	ld	r30, Y
    7ec4:	f9 81       	ldd	r31, Y+1	; 0x01
    7ec6:	01 93       	st	Z+, r16
    7ec8:	f9 83       	std	Y+1, r31	; 0x01
    7eca:	e8 83       	st	Y, r30
    7ecc:	06 c0       	rjmp	.+12     	; 0x7eda <fputc+0x3c>
    7ece:	e8 85       	ldd	r30, Y+8	; 0x08
    7ed0:	f9 85       	ldd	r31, Y+9	; 0x09
    7ed2:	80 2f       	mov	r24, r16
    7ed4:	09 95       	icall
    7ed6:	89 2b       	or	r24, r25
    7ed8:	31 f4       	brne	.+12     	; 0x7ee6 <fputc+0x48>
    7eda:	8e 81       	ldd	r24, Y+6	; 0x06
    7edc:	9f 81       	ldd	r25, Y+7	; 0x07
    7ede:	01 96       	adiw	r24, 0x01	; 1
    7ee0:	9f 83       	std	Y+7, r25	; 0x07
    7ee2:	8e 83       	std	Y+6, r24	; 0x06
    7ee4:	02 c0       	rjmp	.+4      	; 0x7eea <fputc+0x4c>
    7ee6:	0f ef       	ldi	r16, 0xFF	; 255
    7ee8:	1f ef       	ldi	r17, 0xFF	; 255
    7eea:	c8 01       	movw	r24, r16
    7eec:	df 91       	pop	r29
    7eee:	cf 91       	pop	r28
    7ef0:	1f 91       	pop	r17
    7ef2:	0f 91       	pop	r16
    7ef4:	08 95       	ret

00007ef6 <__ultoa_invert>:
    7ef6:	fa 01       	movw	r30, r20
    7ef8:	aa 27       	eor	r26, r26
    7efa:	28 30       	cpi	r18, 0x08	; 8
    7efc:	51 f1       	breq	.+84     	; 0x7f52 <__ultoa_invert+0x5c>
    7efe:	20 31       	cpi	r18, 0x10	; 16
    7f00:	81 f1       	breq	.+96     	; 0x7f62 <__ultoa_invert+0x6c>
    7f02:	e8 94       	clt
    7f04:	6f 93       	push	r22
    7f06:	6e 7f       	andi	r22, 0xFE	; 254
    7f08:	6e 5f       	subi	r22, 0xFE	; 254
    7f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    7f0c:	8f 4f       	sbci	r24, 0xFF	; 255
    7f0e:	9f 4f       	sbci	r25, 0xFF	; 255
    7f10:	af 4f       	sbci	r26, 0xFF	; 255
    7f12:	b1 e0       	ldi	r27, 0x01	; 1
    7f14:	3e d0       	rcall	.+124    	; 0x7f92 <__ultoa_invert+0x9c>
    7f16:	b4 e0       	ldi	r27, 0x04	; 4
    7f18:	3c d0       	rcall	.+120    	; 0x7f92 <__ultoa_invert+0x9c>
    7f1a:	67 0f       	add	r22, r23
    7f1c:	78 1f       	adc	r23, r24
    7f1e:	89 1f       	adc	r24, r25
    7f20:	9a 1f       	adc	r25, r26
    7f22:	a1 1d       	adc	r26, r1
    7f24:	68 0f       	add	r22, r24
    7f26:	79 1f       	adc	r23, r25
    7f28:	8a 1f       	adc	r24, r26
    7f2a:	91 1d       	adc	r25, r1
    7f2c:	a1 1d       	adc	r26, r1
    7f2e:	6a 0f       	add	r22, r26
    7f30:	71 1d       	adc	r23, r1
    7f32:	81 1d       	adc	r24, r1
    7f34:	91 1d       	adc	r25, r1
    7f36:	a1 1d       	adc	r26, r1
    7f38:	20 d0       	rcall	.+64     	; 0x7f7a <__ultoa_invert+0x84>
    7f3a:	09 f4       	brne	.+2      	; 0x7f3e <__ultoa_invert+0x48>
    7f3c:	68 94       	set
    7f3e:	3f 91       	pop	r19
    7f40:	2a e0       	ldi	r18, 0x0A	; 10
    7f42:	26 9f       	mul	r18, r22
    7f44:	11 24       	eor	r1, r1
    7f46:	30 19       	sub	r19, r0
    7f48:	30 5d       	subi	r19, 0xD0	; 208
    7f4a:	31 93       	st	Z+, r19
    7f4c:	de f6       	brtc	.-74     	; 0x7f04 <__ultoa_invert+0xe>
    7f4e:	cf 01       	movw	r24, r30
    7f50:	08 95       	ret
    7f52:	46 2f       	mov	r20, r22
    7f54:	47 70       	andi	r20, 0x07	; 7
    7f56:	40 5d       	subi	r20, 0xD0	; 208
    7f58:	41 93       	st	Z+, r20
    7f5a:	b3 e0       	ldi	r27, 0x03	; 3
    7f5c:	0f d0       	rcall	.+30     	; 0x7f7c <__ultoa_invert+0x86>
    7f5e:	c9 f7       	brne	.-14     	; 0x7f52 <__ultoa_invert+0x5c>
    7f60:	f6 cf       	rjmp	.-20     	; 0x7f4e <__ultoa_invert+0x58>
    7f62:	46 2f       	mov	r20, r22
    7f64:	4f 70       	andi	r20, 0x0F	; 15
    7f66:	40 5d       	subi	r20, 0xD0	; 208
    7f68:	4a 33       	cpi	r20, 0x3A	; 58
    7f6a:	18 f0       	brcs	.+6      	; 0x7f72 <__ultoa_invert+0x7c>
    7f6c:	49 5d       	subi	r20, 0xD9	; 217
    7f6e:	31 fd       	sbrc	r19, 1
    7f70:	40 52       	subi	r20, 0x20	; 32
    7f72:	41 93       	st	Z+, r20
    7f74:	02 d0       	rcall	.+4      	; 0x7f7a <__ultoa_invert+0x84>
    7f76:	a9 f7       	brne	.-22     	; 0x7f62 <__ultoa_invert+0x6c>
    7f78:	ea cf       	rjmp	.-44     	; 0x7f4e <__ultoa_invert+0x58>
    7f7a:	b4 e0       	ldi	r27, 0x04	; 4
    7f7c:	a6 95       	lsr	r26
    7f7e:	97 95       	ror	r25
    7f80:	87 95       	ror	r24
    7f82:	77 95       	ror	r23
    7f84:	67 95       	ror	r22
    7f86:	ba 95       	dec	r27
    7f88:	c9 f7       	brne	.-14     	; 0x7f7c <__ultoa_invert+0x86>
    7f8a:	00 97       	sbiw	r24, 0x00	; 0
    7f8c:	61 05       	cpc	r22, r1
    7f8e:	71 05       	cpc	r23, r1
    7f90:	08 95       	ret
    7f92:	9b 01       	movw	r18, r22
    7f94:	ac 01       	movw	r20, r24
    7f96:	0a 2e       	mov	r0, r26
    7f98:	06 94       	lsr	r0
    7f9a:	57 95       	ror	r21
    7f9c:	47 95       	ror	r20
    7f9e:	37 95       	ror	r19
    7fa0:	27 95       	ror	r18
    7fa2:	ba 95       	dec	r27
    7fa4:	c9 f7       	brne	.-14     	; 0x7f98 <__ultoa_invert+0xa2>
    7fa6:	62 0f       	add	r22, r18
    7fa8:	73 1f       	adc	r23, r19
    7faa:	84 1f       	adc	r24, r20
    7fac:	95 1f       	adc	r25, r21
    7fae:	a0 1d       	adc	r26, r0
    7fb0:	08 95       	ret

00007fb2 <_exit>:
    7fb2:	f8 94       	cli

00007fb4 <__stop_program>:
    7fb4:	ff cf       	rjmp	.-2      	; 0x7fb4 <__stop_program>
